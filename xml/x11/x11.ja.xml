<?xml version = '1.0' encoding = 'utf-8'?>
<!DOCTYPE document SYSTEM "../finkdoc.dtd">
<document filename="index" lang="ja" >
<title>Running X11 on Darwin and Mac OS X</title>
<shorttitle>Running X11</shorttitle>
<cvsid>$Id: x11.ja.xml,v 1.17 2023/08/04 5:08:13 nieder Exp $</cvsid>
<preface>
<p>
このドキュメントは、 Apple の Mac OS X および Darwin システム上で X11 / XFree86 / Xtools を使用するためのものです。
紹介と開発の歴史から始まり、 現状と X11 を使う上での様々なオプションについて書かれています。
これは Fink を使うか使わないかには直接の関係はありません。
</p>
</preface>
<chapter filename="intro" >
<title>イントロダクション</title>
<shorttitle>イントロ</shorttitle>
<section name="def-x11" >
<title>X11 とは何ですか?</title>
<p>
<link url="http://www.x.org/" >X Window System</link> Version 11,
あるいは短く X11 とは、ネットワーク透過型、クライアント＝サーバ形式の画像表示システムです。
これによってアプリケーションはピクセル、線、テキスト、画像など画面上にを描くことができます。
X11 はまた、追加のライブラリを使用することで、ボタンやテキストフィールドなどのユーザーインターフェイスを描くことが容易にできます。
</p>
<p>
X11 は、 Unix の世界におけるデファクトスタンダードのグラフィックシステムで、
Linux 、 BSD 、商用 Unix などで使われています。
デスクトップ環境である CDE 、 KDE 、 GNOME などはこの上で動くものです。
</p>
</section>
<section name="def-macosx" >
<title>Mac OS X とは何ですか?</title>
<p>
<link url="http://www.apple.co.jp/macosx/" >Mac OS X</link> は 
<link url="http://www.apple.co.jp" >Apple</link> 
によって作られたオペレーティングシステムです。
この前身である NeXTStep や OpenStep のように、これは BSD をベースにしている Unix OS ファミリーの一員です。
しかし、 Mac OS X は独自の画像表示システムを有しています。
この画像エンジンは Quartz と呼ばれていて、そのルックアンドフィールは Aqua と呼ばれていますが、両者は同じ意味で使われることもあります。。
</p>
</section>
<section name="def-darwin" >
<title>Darwin とは何ですか?</title>
<p>
<link url="http://opendarwin.org/" >Darwin</link> は
Mac OS X から余計な部分を落とした無料版で、完全なソースコードが入手できます。
これには Quartz 、 Aqua などや関連テクノロジーはついてきません。
デフォルトではテキストコンソールのみです。
</p>
</section>
<section name="def-xfree86" >
<title>XFree86 とは何ですか?</title>
<p>
<link url="http://www.xfree86.org/" >XFree86</link> はオープンソースで実装した X11 です。
これは名前が示すように、当初 Intel x86 PC 上で動くように開発されましたが、現在では OS/2 、 Darwin 、 Mac OS X 、 Windows など多くのアーキテクチャーやオペレーティングシステムで動かすことができます。
</p>
</section>
<section name="def-xtools" >
<title>Xtools とは何ですか?</title>
<p>
Xtools は <link url="http://www.tenon.com/" >Tenon Intersystems</link> の製品です。
これは XFree86 をベースにした Mac OS X 用の X11 の一バージョンです。
</p>
<p>注記: OS 10.3 のリリース以前に開発が止まっているようです。</p>
</section>
<section name="client-server" >
<title>クライアントとサーバー</title>
<p>
X11 はクライアント＝サーバ型のアーキテクチャーで構築されています。
中央のシステムが実際の描画やアプリケーション間のアクセスを調整しています。
X11 を使って描画をしたいアプリケーションは、サーバに接続して何を描画するかを伝えます。
このため、 X11 の世界ではアプリケーションはクライアントと呼ばれています。
</p>
<p>
X11 ではサーバとクライアントは同じマシンで動いている必要はありません。
これはよく用語の混乱の元となっています。
ワークステーションとサーバを使った環境の場合、 X11 ディスプレイサーバはワークステーションで、アプリケーション (X11 クライアント) はサーバ上で実行するためです。
ここでは &quot;サーバ&quot; という言葉は X11 ディスプレイサーバを指し、押し入れの中に隠してあるマシンのことではありません。
</p>
</section>
<section name="rootless" >
<title>rootless とはどういう意味ですか?</title>
<p>
背景:
X11 は画面をウィンドウのハイエラルキーと見なしています。
最上位にはスクリーンサイズの特別なウィンドウがあり、他の全てのウィンドウはこれに含まれています。
このウィンドウはデスクトップ背景も含み、 &quot;root window&quot; と呼ばれています。
</p>
<p>
本題に戻りましょう:
他のグラフィック環境と同様、 X11 はそれだけでスクリーンを占有するように描かれています。
Mac OS X では、 Quartz が既にスクリーンを占有しているので、両者が協働するように修正しなければいなりませんでした。
</p>
<p>
やり方の一つとしては、両者を順々に占有させる方法があります。
それぞれの環境は、ある瞬間には片方だけがスクリーンを完全に占有する形で、ユーザーが切り替えます。
この方式はフルスクリーンや rooted モードと呼ばれています。
rooted とは、 X11上で、完全に他のシステムと同じルートウィンドウが存在するためにこう呼ばれています。
</p>
<p>
もう一つの方法は、ウィンドウごとに両者の環境を混在させることです。
これによって二つのスクリーンを切り替える必要がなくなり、また既に Quartz が背景を管理しているので、 X11 ルートウィンドウを除くことができます。
こうして (目に見える) ルートウィンドウがなくなるので &quot;rootless&quot; と呼ばれています。
これが Mac OS X 上で X11 を使う最適な方法です。
</p>
</section>
<section name="wm" >
<title>ウィンドウマネージャとは何ですか?</title>
<p>
ほとんどのグラフィック環境においてはウィンドウ枠の見た目 (タイトルバー、閉じるボタン) はシステムによって決められています。
X11 は違います。
X11 では、ウィンドウ枠 (または &quot; 装飾 &quot;) は別のプログラムによって提供されていて、これをウィンドウマネージャと呼びます。
多くの点で、ウィンドウマネージャは一つのクライアントアプリケーションにすぎません。
起動する仕方も、 X サーバに通信するときのチャンネルもまったく一緒です。
</p>
<p>
ウィンドウマネージャの一覧は <link url="http://www.xwinman.org/" >xwinman.org</link>  にあります。
有名どころは <link url="http://www.themes.org/" >テーマ</link> と呼ばれる外観のカスタマイズをすることができます。
ウィンドウマネージャによっては、ルートウィンドウでのポップアップメニュー、ドック、ランチャ−などの機能も備えています。
</p>
<p>
多くのウィンドウマネージャが Fink パッケージ化されています。
<link url="http://pdb.finkproject.org/pdb/section.php/x11-wm" >一覧</link>をご覧下さい。
</p>
</section>
<section name="desktop" >
<title>Quartz/Aqua や Gnome, KDE とは何ですか?</title>
<p>
いずれもデスクトップ環境です。
これ以外にも沢山あります。
デスクトップ環境は、統一した外観や操作性の枠組みを提供します。
例えば：
</p>
<p> 描画エンジン: X11
</p>
<p>ウィンドウマネージャ:
<link url="http://sawmill.sourceforge.net/" >sawfish</link>
</p>
<p>デスクトップ: <link url="http://www.gnome.org/" >Gnome</link>
</p>
<p>
描画ディスプレイエンジン、ウィンドウマネージャ、デスクトップ環境は似たような機能が実装されていることもあるので、境界線は非常に曖昧です。
このため、ウィンドウマネージャとデスクトップ環境によっては一緒に使えない組み合わせもあります。
</p>
<p>
多くのアプリケーションは特定のデスクトップに統合された形で開発されています。
たいてい、これはデスクトップ環境用のライブラリ (と低レベルのライブラリ) をインストールすることで、そのアプリケーションの機能を損なうことなく使うことができます。
たとえば、いまでも増加中の <link url="http://pdb.finkproject.org/pdb/section.php/gnome" >GNOME アプリケーション </link> は、GNOMEがなくとも動作します。
残念なことに、 <link url="http://www.kde.org/" >KDE アプリケーション</link> ではまだ<link url="/faq/usage-fink.php#kde" >そこまで達していません</link>。
</p>
</section>
</chapter>
<chapter filename="history" >
<title>歴史</title>
<shorttitle>歴史</shorttitle>
<preface>
<p>[大げさな言葉を使ってしまいました。
どうしても使いたかったんです...]</p>
</preface>
<section name="early" >
<title>古代</title>
<p>
始まりは無だった。
 Darwin は赤子の様で、 Mac OS X はまだ開発段階だった。
どちらにしても、 X11 もなかった。
</p>
<p>
やがて John Carmack がやってきて、 XFree86 を Mac OS X サーバに移植した。
唯一の Darwin ファミリーの OS であった。
後に、これは Dave Zarzycki によって XFree86 4.0 と Darwin 1.0 に更新された。
パッチは  Darwin の CVS レポジトリへの道を見いだし、そこで眠りについた。
時がくるのを待っていたのだ。
</p>
</section>
<section name="xonx-forms" >
<title>XonX forms</title>
<p>
ある晴れた日、 Torrey T. Lyons がやってきて Darwin パッチに待ち望まれていた陽の目を見ることになる。
彼は公式の XFree86 CVS レポジトリという新しい家を用意した。
この時、 Mac OS X Public Beta と Darwin 1.2 の頃である。
XFree86 4.0.2 は Darwin 上で動いたが、 Mac OS X 上ではユーザが Aqua をログアウトし一旦コンソールに移動する必要があった。
そこで Terry は <link url="http://mrcla.com/XonX/" >XonX チーム</link> を組織し、 XFree86 を Mac OS X にもたらす旅に出たのだった。 
</p>
<p>
これと同じ頃、 XFree86 を元に Tenon が Xtools をビルドし始めたのだった。
</p>
</section>
<section name="root-or-not" >
<title>root か root にあらざるか</title>
<p>
直ぐに、 XonX チームは XFree86 を Quartz と平行してフルスクリーンで走らせることに成功した。
これはテストリリースとして冒険好きなユーザに提供された。
リリースされた名称は XFree86-Aqua あるいは短く XAqua であった。
Torrey がリーダーであったため、変更は直接 XFree86 の CVS レポジトリに反映され、 4.1.0 に向かったのであった。
</p>
<p>
当初、 Quartz とのインターフェイスは Xmaster.app と呼ばれる (当初は Carbon で書かれ、後に Cocoa 化された) 小さなアプリケーションが行っていた。
後にコードは X サーバに統合され、 XDarwin.app が誕生した。
この頃、共有ライブラリのサポートが追加された (Tenon はバイナリ互換性のためこの方式にするように説得された) 。 
また、 (Carbon API を使った) ルートレスモードも進んでいたのだが、 XFree86 4.1.0 には少し遅かった。
こうしてルートレスパッチは自由にネット上を解き放たれたのだった。
XFree86 4.1.0 がフルスクリーンモードで登場した後、ルートレスモードの作業は続き、 Cocoa API を使うようになった。
実験的なルートレスモードが XFree86 の CVS レポジトリに取り込まれた。
</p>
<p>
この頃、 Apple は Mac OS X 10.0 と Darwin 1.3 をリリースし、 Tenon は Xtools 1.0 を数週間後にリリースした。
</p>
<p>
開発は引き続き ルートレスモードに XFree86 を統合するよう働きかけ、 2002 年 1 月 の XFree86 4.2.0 には Darwin/Mac OS X は完全に XFree86 ディスリビューションに統合された。
</p>
</section>
</chapter>
<chapter filename="inst-xfree86" >
<title>X11 の入手とインストール</title>
<shorttitle>X11 のインストール</shorttitle>
<section name="fink" >
<title>Fink を使ったインストール</title>
<p>
Fink はどのような X11 がインストールされていても問題なく動作しますが、また独自の XFree86
パッケージも提供しています。
<code>fink install ...</code> と入力すれば、ソースコードをダウンロードしてコンパイルを開始します。
もし <code>apt-get install ...</code> か <code>dselect</code> フロントエンドを使ったら、
X11 の公式ディストリビューションに似たコンパイル済みのパッケージをインストールします。
</p>
<p><em>一般的事項:</em></p>
<ul>
	<li>
		Fink の提供する全ての X11 パッケージは、フルスクリーンとルートレスの双方をサポートし、 OpenGL もサポートします。
	</li>
	<li>
		<em>重要事項:</em>
		X11 のリリースによってファイルが異なります。
		これにより、 X11 をダウングレード使用とする場合、バイナリが動作しないことがあります。
		この場合はパッケージを再度ビルドする必要があります。
		<p>
		逆は通常は問題ありません: 古い X11 用にビルドされたパッケージは、後のバージョンでも動作します。
		</p>
		<p>
		10.3 と 10.4 では、X11 のヒエラルキー (新しい -&gt; 古い コードベース) は以下の通り:
		</p>
		<codeblock>xorg &gt; xfree86 &gt; Apple's X11 </codeblock>
	</li>
</ul>
<p><em>10.4 利用者:</em></p>
<p>
XFree86 version 4.5.0-23 をソースからインストールすることができます。
<code>xfree86</code> と <code>xfree86-shlibs</code>  の両方が必要です。
</p>
<p>
X.org の X11 リリースをインストールすることもできます (現在のバージョンは 6.8.2-35) 。
これは unstable ツリーの <code>xorg</code> と <code>xorg-shlibs</code> をインストールします。
この X11 は、 XFree86-4.5 に似ていますが、バグフィックス、新しい機能があり、係争中のライセンスのコードが除かれています。
</p>
<p><em>10.3 利用者:</em></p>
<p>
XFree86 version 4.4.0-13 (現在のバイナリディストリビューション内) または
4.5.0-13 (ソースで提供) をインストールすることができます。
<code>xfree86</code> と <code>xfree86-shlibs</code>  の両方が必要です。
</p>
<p>
X.org-6.8.2 は、上記の方法で <code>xorg</code> と <code>xorg-shlibs</code> をインストールします。
</p>
<!-->Verify latest bindist version when online</-->
<p><em>10.2 利用者:</em></p>
<p>
10.2 の利用者は、バージョン 4.3 をソースまたはバイナリで、4.4 を unstable ツリーからインストールできます。
上述の通り、<code>xfree86</code> と <code>xfree86-shlibs</code> です。
</p>
<p>
10.2 には、XFree86 4.2.1.1 もあり、<code>normal</code> と <code>-threaded</code> の２種類あります (これ以降は全てスレッドをサポートしています)が、既に古くなっています。
<code>xfree86-base</code>, <code>xfree86-base-shlibs</code>, <code>xfree86-shlibs</code>, and <code>xfree86-rootless-shlibs</code> パッケージ (または <code>-threaded</code> 付き)の全てをインストールする必要があります。
これに加え、Fink が新しいバージョンをインストールしないよう、<code>xfree86-base-dev</code> と <code>xfree86-rootless-dev</code> (または <code>-threaded</code> 付き)をインストールする必要があります。
</p>
<p><em>10.1 利用者:</em></p>
<p>
バイナリディストリビューション (のみ) からバージョン 4.2.0 をインストールすることができます。
<code>xfree86-base</code> と <code>xfree86-rootless</code> をインストールします。
</p>

</section>
<section name="apple-binary" >
<title>Apple のバイナリ</title>
<p>
2003年1月7日、 Apple は<link url="http://apple.co.jp/macosx/features/x11/index.html" >XFree86-4.2 ベースの X11</link> をリリースしました。
これは Quart レンダリングエンジンや高速化 OpenGL をサポートしています。
新しいバージョンが2003年2月10日にリリースされ、機能追加とバグ修正がなされました。
３回目のリリース (Beta 3) は 2003年3月17日に行われ、さらに機能追加とバグ修正がなされました。
このバージョンは Jaguar で使うことができます。
</p>
<p>
2003年10月24日、 Apple は Panther (10.3) をリリースしました。
これには X11 が同梱されていて、このバージョンは XFree86-4.3 をベースにしたものです。
</p>
<p>
2003年10月24日、 Apple は Tiger (10.4) をリリースしました。
これには X11 が同梱されていて、このバージョンは XFree86-4.4 をベースにしたものです。
</p>
<p>
アップルのバイナリを使うには、 <em>X11 User</em> パッケージがインストールされている必要があります。
また、Fink の <link url="/doc/users-guide/upgrade.php">update</link> も行ってください。
</p>
<p>
<code>fink-0.16.2</code> では <em>X11 SDK</em> パッケージも必要です。
インストール後、 Fink は <code>system-xfree86</code> バーチャルパッケージを作成します。
</p>
<p>
<code>fink-0.17.0</code> 以降は、 X11 SDK はソースからパッケージをビルドする場合のみ必要になります。
この場合、 SDK がなくても <code>system-xfree86</code> バーチャルパッケージが存在します。
SDK をインストールした場合は、 <code>system-xfree86-shlibs</code> パッケージと <code>system-xfree86-dev</code> が追加され、それぞれライブラリとヘッダファイルを表しています。
</p>
<p>
XFree86 ディストリビューションが既にある場合、 Fink でインストールしたかどうかに関わらず
<xref section="switching-x11" chapter="inst-xfree86" >X11 パッケージをべつのものに切り替える方法</xref>
を参照して下さい。
この場合、まず最初に既存パッケージを削除してから Apple X11 (および必要に応じて X11 SDK) をインストールしてください。
</p>
<p>
Apple X11 使用上の注意:
</p>
<ul>
<li>
<p>
<filename>autocutsel</filename> パッケージは不要です。
もし X11 で選択している場合、無効にして下さい。
</p>
</li>
<li>
<p>
Apple X11 は <filename>~/.xinitrc</filename> ファイルを使います。
Quartz を完全に生かしたい場合、ウィンドウマネージャに <filename>/usr/X11R6/bin/quartz-wm</filename> を使う必要があります。
<filename>~/.xinitrc</filename> を編集するか、完全に削除して下さい。
</p>  
<p>
他のウィンドウマネージャを使いたいけれどカットアンドペーストも使いたい場合、以下の例のようにして下さい:
</p>
<codeblock>/usr/X11R6/bin/quartz-wm --only-proxy &amp;
exec /opt/sw/bin/fvwm2</codeblock>
<p>
もちろん、 <code>startkde</code> のようなウィンドウマネージャ起動も書く必要があります。
</p>
</li>
<li>
<p>
<filename>quartz-wm</filename> は Gnome/KDE ウィンドウマネージャのヒント機能を完全にはサポートしていません。
無駄なデコレーションをされたウィンドウを見ることがあると思います。
</p>
</li>
<li>
<p>
Apple X11 は Fink の環境設定をデフォルトでは認識しません。
Fink でインストールした起動アプリケーション (例 ウィンドウマネージャ, gnome-session, その他の<filename>/opt/sw/bin</filename> 内のアプリケーション) 
を呼び出すには、 <filename>~/.xinitrc</filename> の上の方 (&quot;<filename>#!/bin/sh</filename>&quot; より下、他のプログラムより上) に以下の行を追加します;
</p>
<codeblock> . /opt/sw/bin/init.sh
</codeblock>
<p>
これにより Fink 環境が初期化されます。
注記: <filename>init.sh</filename> を使います。
<filename>.xinitrc</filename> は <filename>tcsh</filename> ではなく <filename>sh</filename> によって実行されるので <filename>init.csh</filename> は使用しません。
</p>
</li>
<li>
<p>
Fink ツリー下にあるプログラムをアプリケーションメニューから呼び出すときに、そのプログラムが他のプログラムを呼ぶようなものの場合、特別な処置が必要です。
このような場合、フルパスを追加するのではなく、例えば
</p>
<codeblock>/opt/sw/bin/emacs</codeblock>
<p>ではなく、 bash であれば:</p>
<codeblock>. /opt/sw/bin/init.sh ; emacs</codeblock>
<p>tcsh であれば:</p>
<codeblock>source /opt/sw/bin/init.sh ; emacs</codeblock>
<p>
これにより PATH 情報が正しく伝わります。
Fink でインストールしたアプリケーションなら、どれでもこの方法が使えます。
</p>
</li>
<li>
<p>もし Apple X11 用にパッケージをビルドしようとして、以下のようなエラーが出た場合:</p>
<codeblock>ld: err.o illegal reference to symbol: _XSetIOErrorHandler 
defined in indirectly referenced dynamic library 
/usr/X11R6/lib/libX11.6.dylib</codeblock>
<p>
リンク時に <code>-lX11</code> がされているかどうか確認して下さい。
パッケージの設定オプションを確認し、この引数の追加方法を調べて下さい。
</p>
</li>
<li>
<p>
もし以前に <code>xfree86</code> を使っていて、 Apple X11 (10.2.x または 10.3.x) に切り替えた場合、
バイナリ互換ではないので <code>xfree86</code> 用にビルドしたパッケージをビルドし直す必要があります。
</p>
</li>
<li><p><em>10.3 と 10.4 の利用者:</em>
XFree86 や X.org の上に、Apple のディスプレイサーバとウィンドウマネージャーを使うこともできます。
<code>applex11tools</code> をインストールすれば、 X11User.pkg があれば必要なものがインストールされます。
</p>
</li>
</ul>
<p>Apple X11 の使用に関しては、Apple Developer Connection の<link url="http://developer.apple.com/darwin/runningx11.html">記事</link> が参考になります。</p>
</section>
<section name="official-binary" >
<title>公式バイナリ</title>
<p>
XFree86 プロジェクトには公式の Xfree86 4.5.0 バイナリディストリビューションがあります。
これは <link url="http://www.xfree86.org/mirrors" >XFree86 ミラー</link> 内の
<code>4.5.0/binaries/Darwin-ppc-6.x</code> (10.1 用は <code>4.5.0/binaries/Darwin-ppc-5.x</code> ) ディレクトリにあります。
<filename>Xprog.tgz</filename> と <filename>Xquartz.tgz</filename> は、たとえ &quot;optional&quot; と書かれてあっても忘れずに入手して下さい。
もし何が必要なファイルかわからなければ、ディレクトリごとダウンロードして下さい。
<filename>Xinstall.sh</filename> スクリプトを root で実行してインストールします。
(インストール前に <link url="http://www.xfree86.org/4.5.0/Install.html" >official instructions</link> を読むといいでしょう。)
</p>
<p>
これで Mac OS X 上でフルスクリーンとルートレスの XFree86 が入りました。
</p>
</section>
<section name="official-source" >
<title>公式ソース</title>
<p>
もし時間が許せば、 XFree86 4.5 はソースからビルドすることもできます。
ソースは <link url="http://www.xfree86.org/MIRRORS.shtml" >XFree86 ミラー</link> の <code>4.5.0/source</code> ディレクトリ内にありますので
<filename>X420src-#.tgz</filename> の３つの tarball を同じディレクトリ内で取得・解凍して下さい。
XFree86 ソースツリーにある <filename>config/cf/host.def</filename> ファイルにマクロ定義をすることで、ビルドをカスタマイズできます。
(注記: #ifndef チェックがされているマクロだけが、 host.def で上書きできるマクロです。)
</p>
<p>
設定を終了したら、以下のコマンドで XFree86 をコンパイルしてインストールしましょう。
</p>
<codeblock>make World
sudo make install install.man</codeblock>
<p>4.2.1.1 にアップデートするには、 <xref section="official-binary" >公式バイナリ</xref> 節の解説を参照して下さい。</p>
<p>
4.3.0 をインストールするには、上述の &quot;2&quot; のところを &quot;3&quot; に変えて実行して下さい。
ただし、4.2.1.1 へのアップグレードは無視して下さい。
</p>
<p>
公式バイナリと同様、これで Mac OS X でフルスクリーンとルートレスの XFree86 とサーバがインストールされました。
</p>
</section>
<section name="latest-cvs" >
<title>最新の開発用ソース</title>
<p>
もし時間だけではなく、図太い神経もあるようでしたら、最新の開発版の XFree86 を公開 CVS レポジトリから手に入れることもできます。
コードは常に開発中ですので、今日手に入るものと昨日手に入れたものは違うものになっていますので注意して下さい。
</p>
<p>
インストールするには、 <link url="http://www.xfree86.org/cvs/" >XFree86 CVS</link> の解説に従い、 <filename>xc</filename> モジュールをダウンロードします。
あとは上述のソースからのビルドに従って下さい。
</p>
</section>
<!--><section name="xonx-bin" >
<title>XonX バイナリテストリリース (XAqua, XDarwin)</title>
<p>
4.1.0 のリリース以前に、 XonX チームは XAqua というバイナリテストリリースを出しています。
これはいずれも古いので使用しないで下さい。
</p>
<p>
XFree86 の主流 CVS にルートレスモードが導入されて以来 (4.1.0 のリリース後) 、
XonX チームは再びバイナリテストリリースを出していますが、これは XDarwin という名称です。
現在では XDarwin は 4.2.0 と一緒にリリースされています。
</p>
<p>
<link url="http://www.mrcla.com/XonX/" >XonX ウェブページ</link> には 4.2.0 以降の XDarwin 
のテストバージョンをいずれ出すと書かれていますが、今のところ出ていません。
これはおそらく 4.2.0 (以降) の上にインストールされると思われます。
</p>
</section><-->
<!--><section name="macgimp" >
<title>MacGimp</title>
<p>
MacGimp の人々によって 2001年に作られたインストーラには XFree86 は含まれていません。
(XFree86 設定ファイルは書き換えられてしまうものがあります。)
</p>
<p>
<link url="http://www.macgimp.com/" >MacGimp, Inc.</link> の CD には XFree86 が入っていると言われていますが、どのバージョンが入っているかはわかりません。
おそらくは 4.0.3 と 4.1.0, 開発中などのミックスだと思われます。
サーバは 4.1.0 以前のパッチによるルートレスモードをサポートしています。
</p>
</section>
<section name="rootless" >
<title>ネット上のルートレスサーバ</title>
<p>
ネット上にはルートレスサーバのバイナリがよく転がっていますが、公式の 4.2.0 バイナリが出た現在、これは好ましいものではありません。
</p>
</section><-->
<section name="switching-x11" >
<title>X11 の削除</title>
<p>
以前に Fink で XFree86 パッケージをインストールして削除や他のものに変えたい場合の方法は簡単です。
dpkg データベースをそのままにするため、強制的に古いパッケージを削除し、新しいものをインストールします。
</p>
<p>
これには二つの方法があります:
</p>
<ol>
<li>
<p>FinkCommander を使う</p>
<p>
<link url="http://finkcommander.sourceforge.net/" >FinkCommander</link> を使っている場合、メニューから force removal を選択します。
例えば、 <filename>xfree86-rootless</filename> がインストールされていてスレッド版に変えたい場合、
<filename>xfree86-rootless</filename>, <filename>xfree86-rootless-shlibs</filename>, 
<filename>xfree86-base</filename>, <filename>xfree86-base-shlibs</filename> を選択して:
</p>
<codeblock>Source -> Force Remove</codeblock>
</li>
<li>
<p>を実行します。</p>
<p>コマンドラインから手動で行う</p>
<p>
手動で行う場合、 <filename>dpkg</filename> を --force-depends のオプションをつけて実行します:
</p>
<codeblock>sudo dpkg -r --force-depends xfree86-rootless\ 
xfree86-rootless-shlibs xfree86-base xfree86-base-shlibs</codeblock>
<p>
もしスレッド版の XFree86 を必要とするアプリケーションがある場合、force remove 
を行って他のXFree86 や代替パッケージをインストールすると、 dpkg 
データベースに問題が生じることがありますので注意して下さい。
</p>
</li>
</ol>
<p>逆に Fink 以外でインストールした X11 が既にある場合、コマンドラインから削除します:</p>
<codeblock>sudo rm -rf /usr/X11R6 /etc/X11</codeblock> 
<p>
これは Fink 以外の X11 を削除する正しい方法です。
また、インストールしたものによって <filename>XDarwin.app</filename> | <code>X11.app</code> も削除する必要があるでしょう。
Apple X11 を削除する場合は <filename>.xinitrc</filename> を開いて <filename>quartz-wm</filename> を実行しないか確認して下さい。
これで新しい X11 を手動でも Fink でもインストールすることができます。
</p>  
</section>
<section name="fink-summary" >
<title>Fink パッケージの要点</title>
<p>
インストールオプションと必要な Fink パッケージの要点:
</p>
<itemtable labelt="Install Type" labeld="Fink packages" >
        <item>
          <itemt>XFree86-4.4.0 または 4.5.0 (10.3 と 10.4)</itemt>
          <itemd>
            <p>
              <code>xfree86</code> と <code>xfree86-shlibs</code>
            </p>
          </itemd>
        </item>
	<item>
	  <itemt>X.org-6.8.2 (10.3 と 10.4)</itemt>
	  <itemd>
	    <p><code>xorg</code> と <code>xorg-shlibs</code></p>
	</itemd>
	</item>
        <item>
          <itemt>Apple's X11 (全てのバージョン)</itemt>
          <itemd>
            <p>
              <code>system-xfree86</code> と <code>system-xfree86-shlibs</code> (+<code>system-xfree86-dev</code> が X11 に依存するパッケージのビルド時に必要)</p>
          </itemd>
        </item>
        <item>
          <itemt>XFree86-4.x 公式バイナリ</itemt>
          <itemd>
            <p>
	      <code>system-xfree86</code> と <code>system-xfree86-shlibs</code> (+<code>system-xfree86-dev</code> が X11 に依存するパッケージのビルド時に必要)
            </p>  
          </itemd>
        </item>
        <item>
          <itemt>ソースまたは最新の CVS からビルドした XFree86-4.x</itemt>
          <itemd>
            <p>
	      <code>system-xfree86</code> と <code>system-xfree86-shlibs</code> (+<code>system-xfree86-dev</code> が X11 に依存するパッケージのビルド時に必要))
              </p>
          </itemd>
        </item>
        <!--obsolete><item>
<itemt>4.2.x base system built via Fink + binary rootless server</itemt>
<itemd>
<p>
<code>xfree86-base</code> only</p>
</itemd><-->
        <item>
          <itemt>XFree86-4.2.1.x (10.2 のみ) または 4.2.0 (10.1 のみ)</itemt>
          <itemd>
             <p><code>xfree86-base</code> と <code>xfree86-rootless</code> (および その <code>-shlibs</code>)</p>
            <p>または <code>xfree86-base-threaded</code> と <code>xfree86-rootless-threaded</code> (および <code>-shlibs</code>)</p>
          </itemd>
        </item>

      </itemtable>
</section>
</chapter>
<chapter filename="run-xfree86" >
<title>X11 の起動</title>
<shorttitle>X11 の起動</shorttitle>
<section name="darwin" >
<title>Darwin</title>
<p>
純粋な Darwin 上では XFree86 は他の Unix と同様に動作します。
通常、コンソールから <code>startx</code> で起動させると、サーバとウィンドウマネージャやターミナルエミュレータなどのクライアントが実行されます。
純粋 Darwin 上ではパラメータは必要ありません。
単純に:
</p>
<codeblock>startx</codeblock>
<p>
と入力します。
ホームディレクトリにあるファイルを編集することで、何を起動させるかをカスタマイズすることもできます。
<filename>.xinitrc</filename> はどのクライアントを起動するかを管理します。
<filename>.xserverrc</filename> はサーバオプションや他のサーバを起動させることもできます。
もし問題があれば (真っ暗な画面やコンソールに戻ってしまったら) 、上述のファイルを削除してみて下さい。
<code>startx</code> はこれらのファイルがない場合は安全なデフォルト設定で起動するはずです。
</p>
<p>
あるいは、サーバに XDMCP オプションをつけて、次のように起動することもできます:
</p>
<codeblock>X -query remotehost</codeblock>
<p>
これについての詳細は <code>Xserver</code> のマニュアルページに書かれています。
</p>
<p>
最後に、 <code>xdm</code> オプションを設定して起動することもできます:
これについての詳細はマニュアルページをご覧下さい。
</p>
<p>
注記: Panther 以前のMac OS X では、
ログイン画面で <code>&gt;console</code> と入力することでテキストコンソールに入ることもできます。
これは
</p>
<p>
注記: Mac OS X Panther 以降では、 console ウィンドウからは XFree86 は起動できません。
</p>
</section>
<section name="macosx-41" >
<title>Mac OS X + XFree86 4.x.y</title>
<p>
Mac OS X で XFree86 を起動するには、基本的に二つの方法があります。
ひとつは<filename>アプリケーション</filename>フォルダ内の <filename>XDarwin.app</filename> アプリケーションをダブルクリックします。
この後、起動ダイアログでフルスクリーンかルートレスかを選択します。
このダイアログは毎回でてきますが、 Preferences ダイアログで設定を行うと出てこなくなります。
</p>
<p>
4.2.0 より前は自動的にフルスクリーンモードで、ダブルクリックによる起動ではルートレスに変える方法はありませんでした。
</p>
<p>
もうひとつの方法は、 Mac OS X 上で <filename>ターミナル.app</filename>から <code>startx</code> を実行します。
この方法でサーバを起動する場合、Quartz と共存することを伝える必要があります。
これは、 <code>-fullscreen</code> オプションをつけて:
</p>
<codeblock>startx -- -fullscreen</codeblock>
<p>
とします。
これにより、フルスクリーンモードでサーバが起動します。
クライアントは <filename>.xinitrc</filename> に書き込んで下さい。
</p>
<p>
注記: 4.2 より前では <code>-quartz</code> でフルスクリーンモードになりました。
</p>
<p>
<code>-rootless</code> オプションを使って:
</p>
<codeblock>startx -- -rootless</codeblock>
<p>
<code>-quartz</code> オプションはもうフルスクリーンモードを選択しません。
代わりに、 Preferences のデフォルトモードを使用します。
</p>
<p>4.3 時点では、引数なしで <code>startx</code> を実行すると起動ダイアログが表示されます。</p>
</section>
    <section name="starting-xorg">
      <title>X.org の起動</title>
     <p>X.org は XFree86 と全く同じ要領で起動します。</p>
    </section>
    <section name="starting-apples-x11">
      <title>Apple X11 の起動</title>
       <p>
	     機能としては、 Apple X11 は XFree86 と同様です (例えば、<filename>.xinitrc</filename> を
	     使って、クライアントを制御します)
	     通常の起動方法は <filename>X11.app</filename> をダブルクリックします
	     (これは<filename>/アプリケーション/ユーティリティ</filename>内にあります)。
	     <code>startx</code>　コマンドを使うことも可能ですが、コマンドラインオプションを使ってディスプレーモードを指定することはできません;
	     <filename>X11.app</filename> は、初期設定で選択されたモードで起動します。
	   </p>
       <p>
         ウィンドウマネージャーは、ほかの設定をしない限り <code>quartz-wm</code> となります。
         <em>X11.app</em> の初期設定で、再起動することなくフルスクリーンとルートレスを切り替えることができます。
         しかし、これは quartz-wm では動作しません;
         ほかのウィンドウマネージャーを (<filename>.xinitrc</filename> で設定して) 使う必要があります。
       </p>
    </section>
    <section name="applex11tools">
      <title>applex11tools パッケージ</title>
      <p>
        Fink の <code>applex11tools</code> を用いると、 OS 10.3 以降では、
        XFree86 4.4 以降や X.org で <filename>X11.app</filename> と <code>quartz-wm</code> を組み合わせることができます。
      </p>
      <p>
      	このパッケージを使用するには<link url="/faq/usage-fink.php#unstable">unstable ツリー</link> を設定し、<filename>X11User.pkg</filename> を <filename>/Users</filename> または <filename>/Volumes</filename> のどこかに置きます。
      	<filename>X11.app</filename> は、 Fink ツリー内の <filename>Applications</filename> フォルダーにインストールされます。
      	これで <filename>X11.app</filename> や <filename>XDarwin.app</filename> を使うことができます。</p>
</section>
<section name="xinitrc" >
<title>.xinitrc ファイル</title>
<p>
ホームディレクトリに <filename>.xinitrc</filename> という名前のファイルがある場合、自動的にウィンドウマネージャや 
xterm, GNOME などのデスクトップ環境といったX クライアントを起動するために使われます。
<filename>.xinitrc</filename> はコマンドを実行するシェルスクリプトです。
通常の <code>#!/bin/sh</code> を先頭に書いたり、実行可能フラグをたてる必要は<em>ありません</em>。
xinit はシェルを通して起動する方法を知っています。
</p>
<p>
<filename>.xinitrc</filename> ファイルがホームディレクトリ内にない場合、 X11 はデフォルトのファイル
<filename>/private/etc/X11/xinit/xinitrc</filename>.
を使用します。
このデフォルトのファイルを元に編集するとよいかもしれません。
</p>
<codeblock>cp /private/etc/X11/xinit/xinitrc ~/.xinitrc</codeblock>
<p>
Fink を使っている場合、 source <filename>init.sh</filename>
を一番最初に実行します。
これによって環境が正しく設定されます。
</p>
<p>
<filename>.xinitrc</filename> には任意のコマンドを追加できますが、いくつかの注意点があります。
まず、シェルはデフォルトではプログラムを一つづつ実行していきます。
次にプログラムは、前のプログラムが完全に終了するまで実行されません。
同時に複数のプログラムを実行したい場合、シェルに  &quot;バックグラウンド &quot; 
で実行するよう伝えるため <code>&amp;</code> を各行の最後に追加します。
</p>
<p>
次に、 <code>xinit</code> は <filename>.xinitrc</filename> スクリプトがが終了しするまで待ち、
&quot;セッションは終了しました。 X サーバを終了します。&quot; 
と解釈します。
この意味は、<filename>.xinitrc</filename> の最後のコマンドはバックグランドで実行してはならず、ずっと実行されていなければならないということです。
慣習的にウィンドウマネージャはこの目的のために使われてきました。
実際、ほとんどのウィンドウマネージャは <code>xinit</code> が待っていることを想定し、メニューの &quot;ログアウト&quot; ではこれを使います。
(注記: メモリと CPU サイクルを節約するために、下記の例のように <code>exec</code> を追加すると良いでしょう。)
</p>
<p>
以下の簡単な例では、XFree86 または Xorg　上で GNOME を起動しています:
</p>
<codeblock>source /opt/sw/bin/init.csh
exec gnome-session</codeblock>
<p>
より複雑に、 bell をオフにし、クライアントをいくつか起動してから Enlightenment ウィンドウマネージャを起動するには:
</p>
<codeblock>source /opt/sw/bin/init.sh

xset b off

xclock -geometry -0+0 &amp;
xterm &amp;
xterm &amp;

exec enlightenment</codeblock>
<!-- ><p>GNOME2.2 を Apple X11 下で起動するには、以下の通りです:</p>
<codeblock>. /opt/sw/bin/init.sh
quartz-wm -only-proxy &amp;
metacity &amp;
exec gnome-session
</codeblock>< -->
<p>GNOME2.4 以降を Apple X11 下で起動するには:</p>
<codeblock>. /opt/sw/bin/init.sh
quartz-wm --only-proxy &amp;
exec gnome-session
</codeblock>
<p>KDE 3.2 (version &lt; 3.2.2-21) を Apple X11 下で起動するには</p>
<codeblock>. /opt/sw/bin/init.sh
export KDEWM=kwin
quartz-wm --only-proxy &amp;
/opt/sw/bin/startkde >/tmp/kde.log 2>&amp;1
</codeblock>
<p>最後に、最新版の unstable な KDE を Apple X11 下で起動するには:</p>
<codeblock>. /opt/sw/bin/init.sh
/opt/sw/bin/startkde >/tmp/kde.log 2>&amp;1
</codeblock>
</section>
    <section name="oroborosx">
    <title>OroborOSX</title>
    <p><link url="http://oroborosx.sourceforge.net">OroborOSX</link> は、X11.app や XDarwin ディスプレイマネージャーの代わりになります。
    これは、あらかじめ X11 を必要とします。
    <filename>X11.app</filename> または <filename>XDarwin.app</filename> もそのまま使うことができます。
    
    </p>
    <p><em>OroborOSX</em> が実行されると、独自のルートレスのみのウィンドウマネージャーを立ち上げ、
    システムの <code>xinitrc</code> やユーザーの <code>.xinitrc</code> は読み込みません。
    起動後に <code>.xinitrc</code> を実行するメニューがあります。
    しかし、起動時にアプリケーションを設定する独自の方法が採用されています。
    また、Finder から X11 アプリケーションを、スクリプトを用いて起動することができるメカニズムもあります。
    </p>
    <p>詳しい情報は、 <link url="http://oroborosx.sourceforge.net">OroborOSX ホームページ</link>をご覧ください。</p>
    </section>  
</chapter>
<chapter filename="xtools" >
<title>Xtools</title>
<shorttitle>Xtools</shorttitle>
<section name="install" >
<title>Xtools のインストール</title>
<p>
楽勝、楽勝。
インストーラを見つけて、ダブルクリックして、ガイドに従うだけです。
起動ディスクを選択するのを忘れずに。
</p>
<p>
Fink を使っている場合、Xtools のインストール後に <code>system-xtools</code> パッケージをインストールします。
このパッケージはファイルは何もインストールしません。
代わりにライブラリなどをチェックして Fink の依存性システム上の代替物となります。
</p>
</section>
<section name="run" >
<title>Xtools の起動</title>
<p>
Xtools を起動するには、アプリケーションフォルダ内の Xtools.app アイコンをダブルクリックします。
XFree86 と同様、 Xtools は <filename>.xinitrc</filename> ファイルに書かれているクライアントを起動します。
Xtools ではさらにメニューからもクライアントを起動することができます。
</p>
</section>
<section name="opengl" >
<title>OpenGL に関する注記</title>
<p>
Xtools はハードウェア加速の OpenGL をルートレスで行い、サポートするライブラリもついてきます。
主要な libGL ライブラリは問題ないのですが、 libGLU と libglut は静的なライブラリとしてのみ存在し、 XFree86 とのバイナリ互換の問題を引き起こします。
また、ヘッダに足りないものがあり、 Fink ではまだ解決できていません。
Xtools 1.1 までには修正されることを期待します。
</p>
</section>
</chapter>
<chapter filename="other" >
<title>その他の X11</title>
<shorttitle>その他</shorttitle>
<section name="vnc" >
<title>VNC</title>
<p>
VNC は X11 と設計上よく似ているネットワーク可能な画像表示システムです。
よく似ていますが、低レベルで動作していて実装が容易になっています。
Xvnc サーバと Mac OS X ディスプレイクライアントを組み合わせて Mac OS X 上で X11 アプリケーションを実行することも可能です。
Jeff Whitaker 氏の <link url="http://www.cdc.noaa.gov/~jsw/macosx_xvnc/" >Xvnc page</link> にこれについての情報があります。
</p>
</section>
<section name="wiredx" >
<title>WiredX</title>
<p>
<link url="http://www.jcraft.com/wiredx/" >WiredX</link> は Java で書かれた X11 です。
ルートレスモードも対応していて、ウェブ上に Installer.app パッケージもあります。
</p>
</section>
<section name="exodus" >
<title>eXodus</title>
<p>
同社のウェブサイトによると、 Powerlan USA の <link url="http://www.powerlan-usa.com/exodus/" >eXodus 8</link> は Mac OS X 上でネイティブに動作するようです。
これに用いられているコードやローカルのクライアントをサポートしているかはわかっていません。
このため、 Fink では eXodus をサポートしてはいません。
もし何らかの情報があれば、我々に下さい。
</p>
</section>
</chapter>
<chapter filename="trouble" >
<title>XFree86 トラブルシューティング</title>
<shorttitle>トラブルシューティング</shorttitle>
<section name="immedate-quit" >
<title>XDarwin を起動した直後に終了かクラッシュします</title>
<p>
慌てない、慌てない。
XFree86 をおかしくする原因は沢山あります。
このなかで、起動に関連するものは特に多いです。
起動時に問題があった場合、当然 XDarwin がクラッシュすることもよくあります。
この節では起こりうる問題についての対処の完全な一覧を提供していきたいと思います。
まず最初は、二種類の情報が必要です。
</p>
<p>
<em>XDarwin バージョン</em>
XDarwin のバージョンは、 Finder の XDarwin アイコンを <em>一回だけ</em> クリックして、メニューから &quot; 情報を見る&quot; を選択します。
バージョンは、新しいバイナリテストリリースが XonX プロジェクトから出たときだけあがります。
つまり、 &quot;1.0a1&quot; は実際は 1.0a1 と 1.0a2 の間にあります。
</p>
<p>
<em>エラーメッセージ</em>
これは問題を特定するために必須の情報です。
エラーメッセージを見るのは、どうやって XDarwin を起動したかによって変わります。
<code>startx</code> をターミナルから起動した場合、そのウィンドウ内に出力されます。
スクロールアップして見つけて下さい。
XDarwin アイコンをダブルクリックして起動した場合、メッセージはシステムログに書かれます。
アプリケーションフォルダ内のユーティリティーから Console を起動し、該当するメッセージを探して下さい。
</p>
<p>
メッセージについての説明をします:
</p>
<codeblock>_XSERVTransmkdir: Owner of /tmp/.X11-unix should be set to root</codeblock>
<codeblock>_IceTransmkdir: Owner of /tmp/.ICE-unix should be set to root</codeblock>
<p>
Class: Harmless.
X11 は隠しディレクトリを /tmp に作り、ソケット &quot;ファイル&quot; をローカル接続用に作成します。
セキュリティー上の問題から、 X11 は root を所有者にしますが、誰でも書き込めるため実行時には問題にはなりません。
(注記: ディレクトリを root に持たせることは困難です。
Mac OS X では /tmp を 再起同時に削除し、 XDarwin 自体は root 権限では実行されないためです)
</p>
<codeblock>QuartzAudioInit: AddIOProc returned 1852797029</codeblock>
<codeblock>-[NSCFArray objectAtIndex:]: index (2) beyond bounds (2)</codeblock>
<codeblock>kCGErrorIllegalArgument : CGSGetDisplayBounds (display 35434400)</codeblock>
<codeblock>No core keyboard</codeblock>
<p>
Class: Bogus (嘘八百).
これは前のエラーをリセットする際に発生するものです。
この間、起動バナーがもう一つできますが、これは XDarwin では動作しないため、このエラーを出力します。
もしこのメッセージが出てきたら、ターミナルまたは Console をさらにスクロールアップして他のメッセージを探して下さい。
この問題は 1.0a3 あで存在しましたが、これ以降では修正されました。
</p>
<codeblock>cat: /Users/chrisp/.Xauthority: No such file or directory</codeblock>
<p>
Class: Mostly harmless.
このメッセージがどこからきたのかわかっていません。
動作には特に影響しないようです。
これはホームディレクトリ内で <code>touch .Xauthority</code> を起動すると取り除くことができます。
</p>
<codeblock>Gdk-WARNING **: locale not supported by C library</codeblock>
<p>
Class: Harmless.
これは、文字通りのことで、アプリケーションの実行には関係しません。
詳細は、<xref section="locale" >下記を参照</xref>して下さい。
</p>
<codeblock>Gdk-WARNING **: locale not supported by Xlib, locale set to C
Gdk-WARNING **: can not set locale modifiers</codeblock>
<p>
Class: Bad, but not fatal.
このメッセージは上記のメッセージと一緒に出てくることがあります。
これは、 XFree86 のロケールデータファイルが存在しないことを示しています。
ソースからビルドした場合、このエラーは発生しないようです。
ほとんどのアプリケーションは動作しますが、 GNU Emacs は例外です。
</p>
<codeblock>Unable to open keymapping file USA.keymapping.
Reverting to kernel keymapping.</codeblock>
<p>
Class: Often fatal.
これは XDarwin 1.0a1 で &quot;Load from file&quot; keymapping オプションがオンの場合に発生します。
このバージョンでは Preferences ダイアログでファイルを指定する場合にフルパスで指定する必要がありますが、コマンドラインで指定した場合は自動的に検索します。
このメッセージは通常、下の &quot;assert&quot; メッセージが続きます。
この問題を解決するには、下に書かれていることに従って下さい。
</p>
<codeblock>Fatal server error:
assert failed on line 454 of darwinKeyboard.c!</codeblock>
<codeblock>Fatal server error:
Could not get kernel keymapping! Load keymapping from file instead.</codeblock>
<p>
Class: Fatal.
Apple の Mac OS X 10.1 における変更が XFree86 のキーボードレイアウトをオペレーティングシステムカーネルから読むコードを壊しました。
上記のメッセージはこのために出てきます。
Mac OS X 10.1 上では &quot;Load from file&quot; keymapping オプションを使わなければなりません。
この設定は XDarwin Preferences ダイアログにあります。
ファイルが選択されているか確認します (&quot;Pick file&quot; ボタンを使う) 。
XDarwin のバージョンによってはチェックボックスをオンにするだけでは動作しません。
もし XDarin が直ぐに終了して Preferences ダイアログまでたどり着けない場合、
<code>startx -- -quartz -keymap USA.keymapping</code> を実行してターミナルから起動します。
これで通常は XDarwin が起動します。
Preferences で設定を保存します。
</p>
<codeblock>Fatal server error:
Could not find keymapping file .</codeblock>
<p>
Class: Fatal (メッセージの通り).  
これは Panther でキーマッピングファイルがないために発生します。
<code>xfree86-4.3.99-16</code> 以降のバージョンではキーマッピングファイルを必要としないので、これをインストールして下さい。
</p>
<codeblock>Warning: no access to tty (Inappropriate ioctl for device).
Thus no job control in this shell.</codeblock>
<p>
Class: Mostly harmless.
XDarwin 1.0a2 以降ではクライアント起動ファイル (.xinitrc) を実行する際に裏で対話的にシェルを起動しています。
これによって PATH を設定せずにすんでいます。
シェルによっては、実際のターミナルには接続していないとメッセージを発しますが、ジョブ管理などにはシェルを使わないので無視します。
</p>
<codeblock>Fatal server error:
failed to connect as window server!</codeblock>
<p>
Class: Fatal.
Aqua が存在しているのにコンソールモードのサーバ (純粋な Darwin) が起動されたことを意味しています。
通常、公式 XFree バイナリディストリビューションをインストールして XQuartz.tgz tarball 
を残していた場合にこのエラーが発生します。
また、 /usr/X11R6/bin のシンボリックリンクが壊れていたり、ターミナルから<code>XDarwin</code> 
を実行しても発生することがあります
(ターミナルからの起動には startx を使います。<xref chapter="run-xfree86" >XFree86の起動</xref> を参照) 。
</p>
<p>
いずれの場合も、 <code>ls -l /usr/X11R6/bin/X*</code> を実行して出力の、特に以下のようになっている４カ所を見ます。
<code>X</code> <code>XDarwinStartup</code> へのシンボリックリンク;
<code>XDarwin</code>, 実行可能ファイル (コンソールモードサーバ);
<code>XDarwinQuartz</code> <filename>/Applications/XDarwin.app/Contents/MacOS/XDarwin</filename> へのシンボリックリンク;
<code>XDarwinStartup</code> 小さい実行可能ファイル。
もしどれか一つでもないか、違うファイルへリンクされていたら、修正する必要があります。
修正の方法はどうやって XFree86 をインストールしたかによって変わります。
Fink で XFree86 をインストールした場合、
<code>xfree86</code> パッケージ (または OS 10.2 以前は<code>xfree86-rootless</code>)
を再インストールする必要があります。
手動でインストールした場合、Xquartz.tgz からファイルを取得します。
</p>
<codeblock>The XKEYBOARD keymap compiler (xkbcomp) reports:
&gt; Error:            Can't find file &quot;unknown&quot; for geometry include
&gt;                   Exiting
&gt;                   Abandoning geometry file &quot;(null)&quot;
Errors from xkbcomp are not fatal to the X server</codeblock>
<p>
Class: Mostly harmless.
メッセージの通り、致命的ではありません。
私が知っている限り、 XDarwin は XKB 拡張は使っていません。
おそらくクライアントプログラムによっては使ってることもあるでしょうが...
</p>
<codeblock>startx: Command not found.</codeblock>
<p>
Class: Fatal.
これは XDarwin 1.0a2 と 1.0a3 で シェルの初期かファイルが /usr/X11R6/bin 
を PATH 変数に追加しない場合に発生します。
Fink を使っていてデフォルトのシェルを変えていない場合、 (Fink の解説の通り)
<code>source /opt/sw/bin/init.csh</code> という一行をホームディレクトリ内の 
<filename>.cshrc</filename> に追加すれば十分です。
</p>
<codeblock>_XSERVTransSocketUNIXCreateListener: ...SocketCreateListener() failed
_XSERVTransMakeAllCOTSServerListeners: server already running</codeblock>
<codeblock>Fatal server error:
Cannot establish any listening sockets - Make sure an X server isn't already
running</codeblock>
<p>
Class: Fatal.
これは、間違って複数の XDarwin を起動しようとしたときに発生します。
あるいは、 (クラッシュなど) XDarwin を正常に終了しなかった場合もあり得ます。
または、ローカル接続用ソケットのファイル権限の問題かもしれません。
<code>rm -rf /tmp/.X11-unix</code> できれいにするか、コンピュータの再起動でなおります
(Mac OS X では自動的に起動時に /tmp をきれいにし、ネットワークスタックをリセットします) 。
</p>
<codeblock>Xlib: connection to &quot;:0.0&quot; refused by server
Xlib: Client is not authorized to connect to Server</codeblock>
<p>
Class: Fatal.
誤った認証データのためにクライアントプログラムが表示サーバ (XDarwin) に接続できません。
これはある種の VNC インストール、 root で XDarwin を起動、あるいはすごく変な状況下が原因となります。
通常、ホームディレクトリから <filename>.Xauthority</filename> ファイル 
(認証データが保存されている) を削除し、空ファイルを作成します:
</p>
<codeblock>cd
rm .Xauthority
touch .Xauthority</codeblock>
<p>
この他に、 <filename>.xinitrc</filename> ファイルが原因となることもあります。
<filename>.xinitrc</filename> が実行されて直ぐに終了するような場合、 <code>xinit</code> は
ユーザーのセッションが終了したと解釈して XDarwin を終了します。
<xref section="xinitrc" chapter="run-xfree86" >.xinitrc 節</xref> の詳細をご覧下さい。
PATH を設定し、終了しないプログラムをバックグラウンドでひとつだけ起動させることは絶対に忘れないで下さい。
<code>exec xterm</code> を追加して、ウィンドウマネージャが見つからない場合の安全策にする方法もあります。
</p>
</section>
<section name="black" >
<title>GNOME パネルや GNOME アプリケーションメニュのアイコンが黒い</title>
<p>
よくある問題に、アイコンや他の画像が黒い長方形や輪郭だけ表示されるといったものがあります。
究極的には、これはオペレーティングシステムの限界によるものです。
この問題は Apple に報告されていますが、現時点では修正する気はないようです。
<link url="http://www.opensource.apple.com/bugs/X/Kernel/2691632.html" >Darwin bug report</link> をお読みください。
</p>
<p>
現状は、 X11 プロトコルの MIT-SHM 拡張 が Darwin と Mac OS X では実用的には使用できないようです。
このプロトコル拡張はサーバ側またはクライアント側で無効化することができます。
Fink でインストールされた XFree86 サーバ (xfree86-server と xfree86-rootless) は既に無効化しています。
GIMP と GNOME パネルも対処しています。
他のアプリケーションで同様の問題が発生した場合、 <code>--no-xshm</code> 
コマンドラインオプションをつけて実行してみて下さい。
</p>
</section>
<section name="keyboard" >
<title>キーボードが XFree86 で反応しない</title>
<p>
この問題は今のところノート (PowerBook, iBook) だけで発生するようです。
この問題を回避するために &quot;Load from file&quot; keymapping オプションが実装されました。
現在では古い方法 (カーネルからマッピングを読む) は Mac OS X 10.1 で使えなくなったため、デフォルトになっています。
もしこのオプションが有効になっていない場合、 XDarwin の Preferences ダイアログで有効にできます。
&quot;Load from file&quot; チェックボックスをチェックしてキーマッピングファイルを選択して下さい。
 XDarwin を再起動後、キーボードが使えるはずです (下記参照)。
</p>
<p>
XFree86 をコマンドラインから実行している場合、オプションとしてキーマッピングファイルを渡すこともできます:
</p>
<codeblock>startx -- -quartz -keymap USA.keymapping</codeblock>
</section>
<section name="delete-key" >
<title>Back Space キーが動かない</title>
<p>
これは、 &quot;Load keymapping from file&quot; オプションを有効にした場合におこることがあります。
マッピングファイルはバックスペースキーを &quot;Delete&quot; キーとして登録し、 &quot;Backspace&quot; ではありません。
これは、 <filename>.xinitrc</filename> ファイルに以下の行を追加して直します:
</p>
<codeblock>xmodmap -e &quot;keycode 59 = BackSpace&quot;</codeblock>
<p>
もし私の記憶が正しければ、 XDarwin 1.0a2 以降では自動的に Backspace キーとしてマップしています。
</p>
</section>
<section name="locale" >
<title>&quot;Warning: locale not supported by C library&quot;</title>
<p>
このメッセージはよく見かけますが、無害です。
メッセージの通り、国際化が標準 C ライブラリを通してサポートされていないので、プログラムはデフォルトの英語でメッセージ、日時などを使います。
この問題の対処法はいくつかあり:
</p>
<ul>
<li>
<p>
無視する.

</p>
</li>
<li>
<p>
環境変数 LANG をアンセットしてメッセージが出てこなくする。
これは、国際化されている他のプログラムが (gettext/libintl の) サポートを使用しなくなるので注意して下さい。
<filename>.xinitrc</filename> の例として、  
</p>
<codeblock>unset LANG</codeblock>
<p>
<filename>.cshrc</filename> の例:
</p>
<codeblock>unsetenv LANG</codeblock>
</li>
<li>
<p>
(10.1 のみ) <code>libxpg4</code> Fink パッケージを使用する。
これはシステムライブラリより前にロードされる (DYLD_INSERT_LIBRARIES 環境変数を使った)
ロケール関数などを含む小さなライブラリです。
この場合、 LANG 環境変数に完全な値、例えば <code>ja_JP.eucJP</code> を使う必要があります。
<code>ja</code> や <code>ja_JP</code> では動作しません。
</p>
</li>
<li>
<p>
Apple に将来の Mac OS X に、ちゃんとしたロケールサポートを追加してもらう。
</p>
</li>
</ul>
</section>
</chapter>
<chapter filename="tips" >
<title>使用上の Tips</title>
<shorttitle>Tips</shorttitle>
<section name="terminal-app" >
<title>
ターミナル.app からの X11 アプリの起動
</title>
<p>
X11 アプリケーションをターミナル.app から起動するには、環境変数 &quot;DISPLAY&quot; が必要です。
この値はアプリケーションにどこで X11 ウィンドウサーバを探すかを指定します。
デフォルト設定では、 XDarwin は同じマシン上で動作し、以下のように環境変数を設定します:
</p>
<ul>
<li><p>tcsh の場合:</p>
<codeblock>setenv DISPLAY :0.0</codeblock>
</li>
<li><p>bash の場合:</p>
<codeblock>export DISPLAY=":0.0"</codeblock>
</li>
</ul>
<p>
ログイン時に XDarwin.app を起動するようにし (MacOSX 10.2 の場合、システム環境設定のログインパネルで、
MacOSX 10.3 の場合、アカウントパネルの起動項目で) 、
</p>
<ul>
<li><p>tcsh の場合: 以下を <filename>.cshrc</filename> に追加:</p>
<codeblock>if (! $?DISPLAY) then
  setenv DISPLAY :0.0
endif</codeblock>
</li>
<li><p>bash の場合: 以下を <filename>.bashrc</filename> に追加:</p>
<codeblock>[[ -z $DISPLAY ]] &amp;&amp; export DISPLAY=":0.0"</codeblock>
</li>
</ul>
<p>
全てのシェルで DISPLAY を自動的に設定しますが、既に設定されている場合は上書きをしません。
これにより、 X11 アプリケーションを遠隔から、 ssh や X11 トンネリングで実行することができます。
</p>
</section>
<section name="open" >
<title>xterm からの Aqua アプリケーションの起動</title>
<p>
Aqua アプリケーションの xterm (他のシェルでも) からの起動方法は、 <code>open</code> コマンドを使います。
例えば:
</p>
<codeblock>open /Applications/TextEdit.app
open SomeDocument.rtf
open -a /Applications/TextEdit.app index.html</codeblock>
<p>
２番目の例では、アプリケーションに関連するドキュメントを開いています。
３番目の例では、明示的にアプリケーションを指定しています。
</p>
</section>
<section name="copy-n-paste" >
<title>コピーとペースト</title>
<p>
コピーとペーストは Aqua と X11 環境間でも使うことができますが、バグもまだ残っています。
Emacs は現在の選択に好き嫌いが多いという報告があります。
Classic と X11 間では、コピーとペーストはできません。
</p>
<p>
いずれにせよ、それぞれの環境でそれぞれの方法を使うだけです。
テキストを Aqua から X11 へ移すには、 Aqua で Cmd-C とし、移す先のウィンドウを開いて
&quot;ミドルマウスボタン&quot; 、ワンボタンマウスの場合は Option-click を押して
(これは XDarwin の Preferences で設定できます) ペーストします。
テキストを X11 から Aqua に移す場合、 X11 ではマウスでテキストを選択し、 Aqua 
側で Cmd-V してペーストします。
</p>
<p>
X11 システムは複数のクリップボード (X11 的な言葉では カットバッファ) 
を持っていて、 アプリケーションによっては変なことをしているものもあります。
特に、 GNU Emacs や XEmacs にペーストするときにうまく行かないことがあります。
<code>autocutsel</code> というプログラムは、これを解消するために自動的に両方のカットバッファを同期させます。
これを実行するには、 Fink パッケージの autocutsel をインストールして、以下の行を
<filename>.xinitrc</filename> に追加します:
</p>
<codeblock>autocutsel &amp;</codeblock>
<p>
(注記: ウィンドウマネージャを exec する<em>前に</em>、バックグラウンドで実行して下さい。
最後に追加するだけでは起動されません。)
これは Apple X11 では必要ではありません。
(<xref chapter="inst-xfree86" section="apple-binary" >Apple X11 を使う際の注意点</xref> を参照)。
</p>
<p>
Apple X11 を使う場合、通常の Map アプリのように Command-C か Edit-&gt;Copy 
を使ってクリップボードにコピーすることができます。
ペーストは、マウスの中ボタンをクリックか Command-V を押します。
</p>
<p>
いずれにせよ、 Aqua と X11 の間のコピー・ペーストで問題が合った場合、
まずはペーストを２回試してください
(コピーに時間がかかる場合があるようです)。
これで駄目なら、他のアプリケーションを試してください。
例: Aqua 側では TextEdit や Terminal.app 、
X11 側では nedit や xterm 。
私の経験上、これでうまく行きます。
</p>
</section>
</chapter>
</document>
