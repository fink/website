<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document SYSTEM "../finkdoc.dtd">

<document filename="index" lang="en" >
	<title>Porting Unix software to Darwin and Mac OS X</title>
	<shorttitle>Porting</shorttitle>
	<cvsid>$Id: porting.en.xml,v 1.11 2023/08/04 5:08:13 nieder Exp $</cvsid> 

	<preface>
		<p>This document contains hints for porting Unix applications to Darwin and Mac OS X. Much of the information here applies to both Mac OS X version 10.x.x and &quot;pure&quot; Darwin systems. Both systems will be referred to as Darwin, since Mac OS X is actually a superset of Darwin.</p>
	</preface>

	<chapter filename="basics">
		<title>Basics</title>
		<shorttitle>Basics</shorttitle>

		<section name="heritage"><title>Where Darwin came from</title>

			<p>Darwin is a Unix-like operating system that evolved from NeXTStep / OpenStep. Lore has it that it was initially forked off 4.4BSD Lite. The BSD heritage still shows, in fact Darwin was recently modernized with code from FreeBSD and NetBSD.</p>

			<p>Darwin's kernel is based on a combination of Mach 3.0, BSD, and proprietary functionality like the object-oriented driver layer IOKit. Although Mach originally is a micro-kernel design, the BSD kernel that sits on top of it is monolithic and the two are now so intertwined that they must be regarded as a single monolithic kernel.</p>

			<p>The user-space tools and libraries shipped with Darwin are mostly of the BSD persuation, as opposed to the GNU tools you get with Linux. Apple is not as strict as other BSDs though, and goes for useful compromises. For example, Apple ships both BSD make and GNU make, with GNU make installed as the default.</p>
		
		</section>

		<section name="compiler">
			<title>The Compiler and Tools</title>
			
			<p>Short story: The compiler is a gcc derivate, but installed as <code>cc</code>; you may have to patch Makefiles. Most packages won't build shared libraries. If you get errors related to macros, use the <code>-no-cpp-precomp</code> option.</p>

			<p>Long story: The compiler tool chain in the Mac OS X Developer Tools is a strange beast. The compiler is based on the gcc 2.95.2 suite, with modifications to support the Objective C language and some Darwin quirks. The preprocessor (<code>cpp</code>) is available in two versions. One is the standard precompiler (from gcc 2.95.2), the other one is a special precompiler written by Apple, with support for precompiled headers. The latter one is used by default, because it is faster. However, some code doesn't compile with Apple's precompiler, so you must use the <code>-no-cpp-precomp</code> option to get the standard precompiler. (Note: I previously recommended the <code>-traditional-cpp</code> option. The semantics of this option have changed slightly with GCC 3, breaking most packages that use it. <code>-no-cpp-precomp</code> has the desired effect on both the current Developer Tools and future compilers based on GCC 3.)</p>

			<p>The assembler says it's based on gas 1.38. The linker is not based on GNU tools. This is a problem when building shared libraries, as GNU libtool and configure scripts generated by it don't know how to handle Apple's linker.</p>
		
		</section>

		<section name="host-type">
			<title>Host type</title>
			
			<p>Short story: If configure fails with 'Can't determine host type', copy config.guess and config.sub from /usr/share/libtool (/usr/libexec for OS versions prior to 10.2) into the current directory.</p>

			<p>Long story: The GNU world uses a canonical format to specify system types. It has three parts: cpu type, manufacturer and operating system. Sometimes a fourth part is added - then the third part denotes the kernel, while the fourth denotes the operating system. All parts are lower case and concatenated using dashes. Some examples: <code>i586-pc-linux-gnu</code>, <code>hppa1.1-hp-hpux10.20</code>, <code>sparc-sun-solaris2.6</code>. The host type for Mac OS X 10.0 is <code>powerpc-apple-darwin1.3</code>. Versions of Mac OS X 10.2 bring various <code>powerpc-apple-darwin6.x.0</code> and 10.3 gives <code>powerpc-apple-darwin7.x.0</code>, where &quot;x&quot; depends on the exact OS version.</p>

			<p>Many packages that use autoconf want to know the host type of the system they are compiled on. (Side note: to support cross-compiling and porting, there are actually three types - the host type, the build type and the target type. Usually, they're all the same.) You can either pass the host type to the configure script as a parameter or you can let it guess.</p>

			<p>The configure script uses two companion scripts to determine host types. <filename>config.guess</filename> tries to guess the host type, <filename>config.sub</filename> is used to validate and canonicalize the host type. These scripts are maintained as separate entities, but they are included in every package that uses them. Until very recently, these scripts didn't know about Darwin or Mac OS X. If you have a package that doesn't recognize Darwin, you must replace the config.guess and config.sub included in the package. Luckily, Apple put working versions in /usr/share/libtool (/usr/libexec for pre-10.2 OS), so you can just copy them from there.</p>

			<p>If you are constructing a Fink package, you can use the <code>UpdateConfigGuess</code> and/or <code>UpdateConfigGuessInDirs</code> fields in your <filename>.info</filename> package description file to do this update automatically.</p>

		</section>

		<section name="libraries">
			<title>Libraries</title>

			<p>Short story: You can safely remove <code>-lm</code> from Makefiles, but you don't need to.</p>

			<p>Long story: Mac OS X doesn't have separate libc, libm, libcurses, libpthread etc. libraries. Instead, they're all part of the system library, libSystem. (In earlier versions, this actually was the System framework.) However, Apple placed appropriate symlinks in /usr/lib, so linking with <code>-lm</code> will work. The only exception is <code>-lutil</code>. On other systems, libutil contains functions related to pseudo-terminals and login accounting. These functions are in libSystem, but there is no symlink to provide a libutil.dylib.</p>

		</section>

		<section name="other-sources">
			<title>Other sources of information</title>

			<p>Another source of information for porting is the Wiki at <link url="http://www.metapkg.org/wiki">MetaPkg Wiki</link>.</p>

			<p>You can also read Apple Technical Note <link url="http://developer.apple.com/technotes/tn2002/tn2071.html">TN2071</link>: "Porting Command Line Unix Tools to Mac OS X".</p>

		</section>

	</chapter>

	<chapter filename="shared">
		<title>Shared Code</title>
		<shorttitle>Shared Code</shorttitle>

		<section name="lib-and-mod">
			
			<title>Shared Libraries vs. Loadable Modules</title>

			<p>One Mach-O feature that hits many people by surprise is the strict distinction between shared libraries and dynamically loadable modules. On ELF systems both are the same; any piece of shared code can be used as a library and for dynamic loading. Use <code>otool -hv <em>some_file</em></code> to see the filetype of <filename>some_file</filename>.</p>

			<p>Mach-O shared libraries have the file type MH_DYLIB and carry the extension <code>.dylib</code>. They can be linked against with the usual static linker flags, e.g. <code>-lfoo</code> for libfoo.dylib. However, they can not be loaded as a module. (Side note: Shared libraries can be loaded dynamically through an API. However, that API is different from the API for bundles and the semantics make it useless for an <code>dlopen()</code> emulation. Most notably, shared libraries can not be unloaded.)</p>

			<p>Loadable modules are called "bundles" in Mach-O speak. They have the file type MH_BUNDLE. Since no component involved cares about it, they can carry any extension. The extension <code>.bundle</code> is recommended by Apple, but most ported software uses <code>.so</code> for the sake of compatibility. Bundles can be dynamically loaded and unloaded via dyld APIs, and there is a wrapper that emulates <code>dlopen()</code> on top of that API. It is not possible to link against bundles as if they were shared libraries. However, it is possible that a bundle is linked against real shared libraries; those will be loaded automatically when the bundle is loaded.</p>

		</section>

		<section name="version">
			<title>Version Numbering</title>

			<p>On an ELF system, version numbers are usually appended to the file name of the shared library after the extension, e.g. <filename>libqt.so.2.3.0</filename>. On Darwin, the version numbers are placed between the library name and the extension, e.g. <filename>libqt.2.3.0.dylib</filename>. Note that this allows you to request a specific version of the library when linking, using <code>-lqt.2.3.0</code> for the example above.</p>

			<p>When creating a shared library, you can specify a name to be used when searching for the library at run time. This is usual practice and allows several major versions of a library to be installed at the same time. On ELF systems this is called the <code>soname</code>. What's different on Darwin is that you can (and should) specify a full path along with the file name. This eliminates the need for "rpath" options and the ldconfig/ld.so.cache system. To use a library that is not yet installed, you can set the DYLD_LIBRARY_PATH environment variable; see the dyld man page for details.</p>

			<p>The Mach-O format also offers real minor version checking, unknown on ELF systems. Every Mach-O library carries two version numbers: a "current" version and a "compatibility" version. Both version numbers are written as three numbers separated by dots, e.g. 1.4.2. The first number must be non-zero. The second and third number can be omitted and default to zero. When no version is specified, it will default to 0.0.0, which is some kind of wildcard value.</p>

			<p>The "current" version is for informational purposes only. The "compatibility" version is used for checking as follows. When an executable is linked, the version information from the library is copied into the executable. When that executable is run, the stored version information is checked against the version information in the library that is loaded. dyld generates a run-time error and terminates the program unless the loaded library version is equal to or newer than the one used during linking.</p>

		</section>

		<section name="cflags">
			<title>Compiler Flags</title>

			<p>The generation of position-independent code (PIC) is the default on Darwin. Actually, PowerPC code is position-independent by design, so there is no performance or space penalty involved. So, you don't need to specify a PIC option when compiling code for a shared library or module. However, the linker doesn't allow &quot;common&quot; symbols in shared libraries, so you must use the <code>-fno-common</code> compiler option.</p>

		</section>

		<section name="build-lib">
			<title>Building a Shared Library</title>

			<p>To build a shared library, you invoke the compiler driver with the <code>-dynamiclib</code> option. This is best demonstrated by a comprehensive example. We'll build a library called libfoo, composed of the source files <filename>source.c</filename> and <filename>code.c</filename>. The version number is 2.4.5, where 2 is the major revision (incompatible API change), 4 is the minor revision (backwards-compatible API change) and 5 is the bugfix revision count (some people call this the &quot;teeny&quot; revision, it denotes fully compatible changes). The library depends on no other shared libraries and will be installed in <filename>/usr/local/lib</filename>.</p>

<codeblock>cc -fno-common -c source.c
cc -fno-common -c code.c
cc -dynamiclib -install_name /usr/local/lib/libfoo.2.dylib \
 -compatibility_version 2.4 -current_version 2.4.5 \
 -o libfoo.2.4.5.dylib source.o code.o
rm -f libfoo.2.dylib libfoo.dylib
ln -s libfoo.2.4.5.dylib libfoo.2.dylib
ln -s libfoo.2.4.5.dylib libfoo.dylib</codeblock>
<p>
Note which parts of the version are used where.
When linking against this library, one would normally use the <code>-lfoo</code> flag, which accesses the <filename>libfoo.dylib</filename> symlink. Regardless of which symlink or file is specified, though, it is the <code>install_name</code> that is written into one's program. That means one can delete the &quot;higher&quot; (less version-specific) symlink <filename>libfoo.dylib</filename> after compiling. During a minor-revision library upgrade, one just changes the target of the <filename>libfoo.2.dylib</filename> symlink that is used by the runtime dynamic linker.
</p>
</section>


<section name="build-mod"><title>Building a Module</title>
<p>
To build a loadable module, you invoke the compiler driver with the
<code>-bundle</code> option.
If the module uses symbols from the host program, you'll have to
specify <code>-undefined suppress</code> to allow undefined symbols,
and <code>-flat_namespace</code> along with it to make the new linker
in Mac OS X 10.1 happy.
A comprehensive example:
</p>
<codeblock>cc -fno-common -c source.c
cc -fno-common -c code.c
cc -bundle -flat_namespace -undefined suppress \
 -o mymodule.so source.o code.o</codeblock>
<p>
Note that no version numbering is used.
It is possible to use it in theory, but in practice it's pointless.
Also note that there are no naming restrictions for bundles.
Some packages prefer to prepend &quot;lib&quot; anyway because some other
systems require it; this is harmless, since a program would use the full filename when loading a module.
</p>
</section>


</chapter>


<chapter filename="libtool">
<title>GNU libtool</title>
<shorttitle>libtool</shorttitle>

<preface>
<p>
GNU packages that build libraries use GNU libtool to hide
platform-dependent procedures for library building and installation.
</p>
</preface>

<section name="situation"><title>The Situation</title>
<p>
In the wild, one can find four strands of libtool:
</p>
<ul>

<li><p>
<em>libtool 1.3</em>:
The most common strand.
The last release from this branch is 1.3.5.
It doesn't know about Darwin and only builds static libraries.
It can be recognized by the presence of the files
<filename>ltconfig</filename> and <filename>ltmain.sh</filename> in
the source tree.
</p></li>

<li><p>
<em>libtool 1.4</em>:
Long in the works and recently released as the new
stable version, this branch has better autoconf integration.
Unfortunately that makes migrating packages from 1.3 non-trivial.
It supports Darwin 1.3 / Mac OS X 10.0 out of the box and needs a
small patch to work on Mac OS X 10.1.
It can be recognized by the absence of <filename>ltconfig</filename>.
Versions that identify themselves as 1.3b or 1.3d are actually
development snapshots of 1.4 and must be treated with caution.
</p></li>

<li><p>
<em>The multi-language-branch</em>:
Also called MLB, this version of libtool was a parallel development
branch that added support for C++ and Java (via gcj).
It has now been merged back into the main development line.
Recent versions support Darwin 1.3 and Mac OS X 10.0 out of the box.
The MLB can be recognized by the files <filename>ltcf-c.sh</filename>,
<filename>ltcf-cxx.sh</filename> and <filename>ltcf-gcj.sh</filename>.
</p></li>

<li><p>
<em>The current development branch</em>:
This is the development version that will some day be released as
libtool 1.5.
It has resulted from the merge of 1.4 and the MLB.
It supports C, C++ and Java (via gcj).
Unfortunately, it can't be easily told apart from 1.4, you'll have to
check the version number inside <filename>ltmain.sh</filename>.
</p></li>

</ul>
<p>
In conclusion, libtool 1.3.x and packages that use it (which
happens to be the majority of libtool-using packages out there) need a
patch to build shared libraries on Darwin.
Apple includes a patched version of libtool 1.3.5 in Mac OS X, but it
will not work correctly in most cases.
Christoph Pfisterer improved that patch to hardcode the correct path and to 
do full versioning.
The changes were incorporated into upstream libtool releases and
development versions starting with 1.4.
Members of the Fink team continue to make improvements and forward them to 
the libtool maintainers.
The versioning scheme is compatible across all libtool versions.
</p>
<p>
Side note:
The libltdl library included with all libtool versions will only work
on Darwin when dlcompat is installed.
This is included with OS X starting with 10.3. For previous versions,
one can install the fink &quot;dlcompat&quot; family of packages.
</p>
</section>


<section name="patch-135"><title>The 1.3.5 Patch</title>
<p>
If you are building libtool 1.3.5 for yourself, you will need to apply
<link
url="/files/libtool-1.3.5-darwin.patch">this
patch</link> <em>[updated 2002-06-09]</em> to the libtool 1.3.5 source and
then delete the files ltconfig and ltmain.sh.
(They will be recreated from the appropriate .in files when you run
configure and make.)  This is done automatically, by the way, in the 
current Fink package for libtool 1.3.5.</p><p>
But that's only half the work - every package using libtool comes with
its own copies of <filename>ltconfig</filename> and <filename>ltmain.sh</filename>.
So you must replace these in every package that you want to build as a
shared library.
Note that you must do this before running the configure script.
For your convenience, you can get the two files right here:
<link url="/files/ltconfig">ltconfig</link> (98K) and
<link url="/files/ltmain.sh">ltmain.sh</link> (110K)
<em>[both updated 2002-06-09]</em>.</p>
</section>

<section name="fixing-14x"><title>Fixing 1.4.x</title>
<p>
There are at least three different versions of libtool 1.4.x now in wide use
(1.4.1, 1.4.2, and later development snapshots). They all have some issues on
Darwin, though the exact changes required to fix them differ. The &quot;libtool14&quot;
package shipped via Fink has all required patches already applied to it.
However, you still have to manually fix the <filename>ltmain.sh</filename> and <filename>configure</filename> files of
affected packages in order to get them working.
</p>

<ol>
<li>
<em>The flat_namespace bug</em>:
This problem only occurs if you use libtool on Mac OS X10.1 and later. What happens
is that libtool tries to use the <code>-undefined suppress</code> to allow undefined
symbols, but doesn't specify along with it the <code>-flat_namespace</code> option.
Starting with 10.1 this won't work anymore. A typical patch looks like this:
<codeblock>
diff -Naur gdk-pixbuf-0.16.0.old/configure gdk-pixbuf-0.16.0.new/configure
--- gdk-pixbuf-0.16.0.old/configure	Wed Jan 23 10:11:48 2002
+++ gdk-pixbuf-0.16.0.new/configure	Thu Jan 31 03:19:54 2002
@@ -3334,7 +3334,7 @@
     ;;
 
   darwin* | rhapsody*)
-    allow_undefined_flag='-undefined suppress'
+    allow_undefined_flag='-flat_namespace -undefined suppress'
     # FIXME: Relying on posixy $() will cause problems for
     #        cross-compilation, but unfortunately the echo tests do not
     #        yet detect zsh echo's removal of \ escapes.
</codeblock>
</li>
<li>
<em>The loadable module bug</em>:
This bug is caused by the non-standard behaviour of zsh (which is the default
shell in 10.0 and 10.1; starting in 10.2 bash is the default).
Zsh's non-standard quoting behaviours prevents loadable module from being built
correctly, they end up as shared libraries instead (unlike Linux, these are
reall different things on Darwin). A typical fix for this (cut off, so you can't
use it unmodified):
<codeblock>
diff -Naur gnome-core-1.4.0.6.old/configure gnome-core-1.4.0.6.new/configure
--- gnome-core-1.4.0.6.old/configure	Sun Jan 27 08:19:48 2002
+++ gnome-core-1.4.0.6.new/configure	Fri Feb  8 01:10:21 2002
@@ -4020,7 +4020,7 @@
     # FIXME: Relying on posixy $() will cause problems for
     #        cross-compilation, but unfortunately the echo tests do not
     #        yet detect zsh echo's removal of \ escapes.
-    archive_cmds='$nonopt $(test "x$module" = xyes &amp;&amp; echo -bundle || echo -dynamiclib) ...'
+    archive_cmds='$nonopt $(test x$module = xyes &amp;&amp; echo -bundle || echo -dynamiclib) ...'
     # We need to add '_' to the symbols in $export_symbols first
     #archive_expsym_cmds="$archive_cmds"' &amp;&amp; strip -s $export_symbols'
     hardcode_direct=yes
</codeblock>
<p>
This problem is fixed in some post-1.4.2 versions of libtool.
</p>
</li>
<li>
<em>The convenience library bug</em>:
Under some conditions, libtool will fail to link convenience libraries, 
giving "multiple definitions" errors.
This is caused by a more fundamental problem in libtool it seems. For now 
as a workaround (curing the symptoms
not the actual problem, but with great success anyway), you can use this fix
(thanks to Dave Vasilevsky):
<codeblock>
--- ltmain.sh.old       2002-04-27 00:01:23.000000000 -0400
+++ ltmain.sh   2002-04-27 00:01:45.000000000 -0400
@@ -2894,7 +2894,18 @@
        if test -n "$export_symbols" &amp;&amp; test -n "$archive_expsym_cmds"; then
          eval cmds=\"$archive_expsym_cmds\"
        else
+         save_deplibs="$deplibs"
+         for conv in $convenience; do
+       tmp_deplibs=
+       for test_deplib in $deplibs; do
+         if test "$test_deplib" != "$conv"; then
+           tmp_deplibs="$tmp_deplibs $test_deplib"
+         fi
+       done
+       deplibs="$tmp_deplibs"
+         done
          eval cmds=\"$archive_cmds\"
+         deplibs="$save_deplibs"
        fi
        save_ifs="$IFS"; IFS='~'
        for cmd in $cmds; do
</codeblock>
</li>
<li>
<em>The DESTDIR bug</em>:
Certain packages which set DESTDIR and use libtool 1.4.2 have problems
with relinking.
The problems are discussed in these email messages: 
<p>
<link
url="http://mail.gnu.org/archive/html/libtool/2002-04/msg00019.html">http://mail.gnu.org/archive/html/libtool/2002-04/msg00019.html</link></p>
<p><link
url="http://mail.gnu.org/archive/html/libtool/2002-04/msg00021.html">http://mail.gnu.org/archive/html/libtool/2002-04/msg00021.html</link></p>
<p><link url="http://mail.gnu.org/archive/html/libtool/2002-04/msg00025.html">http://mail.gnu.org/archive/html/libtool/2002-04/msg00025.html</link>,</p>
<p>and a patch for the problem is discussed in:</p>
<p><link url="http://mail.gnu.org/archive/html/libtool/2002-04/msg00043.html">http://mail.gnu.org/archive/html/libtool/2002-04/msg00043.html</link>.</p>
</li>
</ol>
</section>

<section name="notes"><title>Further Notes</title>
<p>For more information on libtool itself and what it does, see the <link url="http://www.gnu.org/software/libtool/libtool.html">libtool homepage</link>.</p>

<p>
Side note:
Apple's Developer Tools contain a program also called libtool, which
is used by the compiler driver to build shared libraries.
However, this is completely unrelated with GNU libtool.
The GNU libtool that Apple ships is installed as <code>glibtool</code>
instead.
This can be achieved by configuring GNU libtool with
<code>--program-transform-name=s/libtool/glibtool/</code>.
</p>
</section>

</chapter>

<chapter filename="preparing-10.2">
<title>Preparing for 10.2</title>
<shorttitle>Preparing for 10.2</shorttitle>


<section name="bash"><title>The bash shell</title>
<p>
Fink made the transition from OS X 10.0 to OS X 10.1 fairly easily, thanks
in part to planning ahead for the changes that were coming.  We will try
to do the same for the next transition, but not many details are known
yet. </p>
<p> We understand that OS X 10.2 will use bash rather than zsh to provide
<code>/bin/sh</code> functionality.  This has at least three implications
for fink. 
</p>
<ul><li>
In the past, some fink packages created a CompileScript (or PatchScript or
InstallScript) which does nothing
by simply putting a semicolon in the script.  This does not work
under bash, and must be replaced by something like
<codeblock>
  CompileScript: echo "nothing to do"
</codeblock>
</li>
<li>
In the past, some fink packages used a the <code>lib(foo|bar).dylib</code>
construction to refer to two libraries at once; this doesn't work under
bash (and the bash alternative <code>lib{foo,bar}.dylib</code> doesn't work
under zsh).  Solution: write out the names in full.
</li>
<li>
A libtool patch is needed in many cases, to prevent libraries from being
build unversioned under bash.  
<em> Note: you do not need this patch with
 libtool-1.3.5, for example, if you are using UpdateLibtool:
 True. </em>
The symptom: when building under bash,
you see
<codeblock>
../libtool: test: too many arguments
</codeblock>
When this happens, <code>configure</code> contains the following:
<codeblock>
archive_cmds='$CC $(test .$module = .yes &amp;&amp; echo -bundle || echo 
-dynamiclib) $allow_undefined_flag -o $lib $libobjs $deplibs$linkopts 
-install_name $rpath/$soname $(test -n "$verstring" -a x$verstring != 
x0.0 &amp;&amp; echo $verstring)'
</codeblock>
Here is a patch (but it must be used with care, because sometimes there are
other libtool problems as well so this patch must be applied by hand):
<codeblock>
diff -Naur gdk-pixbuf-0.16.0/configure gp-new/configure
--- gdk-pixbuf-0.16.0/configure 2002-01-22 20:11:48.000000000 -0500
+++ gp-new/configure    2002-05-10 03:02:44.000000000 -0400
@@ -3338,7 +3338,7 @@
      # FIXME: Relying on posixy $() will cause problems for
      #        cross-compilation, but unfortunately the echo tests do not
      #        yet detect zsh echo's removal of \ escapes.
-    archive_cmds='$CC $(test .$module = .yes &amp;&amp; echo -bundle || echo 
-dynamiclib) $allow_undefined_flag -o $lib $libobjs $deplibs$linkopts 
-install_name $rpath/$soname $(test -n "$verstring" -a x$verstring != 
x0.0 &amp;&amp; echo $verstring)'
+    archive_cmds='$CC $(test .$module = .yes &amp;&amp; echo -bundle || echo 
-dynamiclib) $allow_undefined_flag -o $lib $libobjs $deplibs$linkopts 
-install_name $rpath/$soname $tmp_verstring'
      # We need to add '_' to the symbols in $export_symbols first
      #archive_expsym_cmds="$archive_cmds"' &amp;&amp; strip -s $export_symbols'
      hardcode_direct=yes
diff -Naur gdk-pixbuf-0.16.0/ltmain.sh gp-new/ltmain.sh
--- gdk-pixbuf-0.16.0/ltmain.sh 2002-01-22 20:11:43.000000000 -0500
+++ gp-new/ltmain.sh    2002-05-10 03:04:49.000000000 -0400
@@ -2862,6 +2862,11 @@
        if test -n "$export_symbols" &amp;&amp; test -n "$archive_expsym_cmds";
	then
          eval cmds=\"$archive_expsym_cmds\"
        else
+         if test "x$verstring" = "x0.0"; then
+           tmp_verstring=
+         else
+           tmp_verstring="$verstring"
+         fi
          eval cmds=\"$archive_cmds\"
        fi
        IFS="${IFS=     }"; save_ifs="$IFS"; IFS='~'
</codeblock>
</li>
</ul>
</section>
<section name="gcc3"><title>The gcc3 compiler</title>

	<p>Mac OS X 10.2 uses the gcc3 compiler.</p>
	
	<p>Some packages which have loadable modules and use
libtool fail with an install_name error, because libtool passes
the -install_name flag even along with the -bundle flag (when it is not
strictly needed).  This behavior was accepted by the gcc2 compiler but is
not being accepted by the gcc3 compiler.  The fix can be found <link
url="http://www.mail-archive.com/fink-devel@lists.sourceforge.net/msg02025.html">here.</link>
Note that you do not need the patch if your package uses libtool-1.3.5
(for example, if you are using <code>UpdateLibtool: True</code>)
since it has already been incorporated into a revised version of fink's
ltconfig file (available in pre-release versions of fink).
</p>

<p>Another issue with the gcc3 compiler is an incompatibility for C++ ABIs
between gcc2 and gcc3.  In practice, this means that C++ programs compiled
with gcc3 cannot link to libraries compiled with gcc2.</p>

</section>


</chapter>

<chapter filename="preparing-10.3">
<title>Preparing for 10.3</title>
<shorttitle>Preparing for 10.3</shorttitle>

<section name="perl"><title>Perl</title>

  <p>
    In OS X 10.2, <filename>/usr/bin/perl</filename> was perl 5.6.0
    and the architecture string was &quot;darwin&quot;. In OS X
    10.3, <filename>/usr/bin/perl</filename> was upgraded to perl
    5.8.1 and the architecture string was changed to
    &quot;darwin-thread-multi-2level&quot;. These changes <em>probably</em> do
    not affect ordinary uses of the perl executable for package
    creation since each perl executable knows where to find its own modules.
    Maintainers of perl-module (&quot;-pm&quot;) packages who follow the current
    <link 
    url="/doc/packaging/policy.php#perlmods">Perl
    Modules packaging policy</link> and are careful to follow the
    <code>CompileScript</code> and <code>InstallScript</code>
    documentation will already have things set up correctly.
  </p>

</section>

<section name="typedef"><title>New symbol definitions</title>

  <p>
    Starting in Mac OS X 10.3, there is now always a complete
    definition for the <code>socklen_t</code> type. To get this
    typedef defined, you may need to add to your program:
  </p>
  <codeblock>
#include &lt;sys/types.h&gt;
#include &lt;sys/socket.h&gt;
  </codeblock>

</section>

<section name="system-libs"><title>New builtin system libraries</title>

  <p>
    Mac OS X 10.3 includes several libraries that were not in previous
    system releases, and so were provided as fink packages:
  </p>

  <itemtable>
    <item>
      <itemt>libpoll</itemt>
      <itemd>
	<p>
	  The files <filename>/usr/lib/libpoll.dylib</filename> and
	  <filename>/usr/include/poll.h</filename> are now included,
	  however the OS X-supplied implementation of this library is
	  not complete. If it is sufficient for your purposes, you can
	  remove dependencies on the Fink &quot;libpoll&quot; and
	  &quot;libpoll-shlibs&quot; packages. The library code is
	  actually incorporated into libSystem, which is automatically
	  linked. That means that <code>-lpoll</code> is not necessary
	  if you wish to use the OS X implementation. Be aware that OS
	  X supplies a <filename>libpoll.dylib</filename>, so
	  <code>-lpoll</code> may give different results depending on
	  whether you have the Fink &quot;libpoll&quot; package
	  installed or not.
	</p>
      </itemd>
    </item>
    <item>
      <itemt>libdl</itemt>
      <itemd>
	<p>
	  The files <filename>/usr/lib/libdl.dylib</filename>
	  and <filename>/usr/include/dlfcn.h</filename> are now included, so you should
	  not need dependencies on the Fink &quot;dlcompat&quot;,
	  &quot;dlcompat-dev&quot;, and &quot;dlcompat-shlibs&quot; packages. The library
	  code is actually incorportated into libSystem, which is
	  automatically linked. That means that <code>-ldl</code> is
	  not necessary (but has no effect if used).
	</p>
      </itemd>
    </item>
    <item>
      <itemt>GNU getopt</itemt>
      <itemd>
	<p>
	  This library, including the <code>getopt_long()</code>
	  function, has been incorportated into libSystem and
	  <filename>/usr/include/getopt.h</filename>, so you may not
	  need to use the Fink &quot;libgnugetopt&quot; and
	  &quot;libgnugetopt-shlibs&quot; packages. Because libSystem is
	  automatically linked and <filename>/usr/include</filename>
	  is automatically searched for headers, you could remove any
	  <code>-lgnugetopt</code>
	  and <code>-I/opt/sw/include/gnugetopt</code> flags that were
	  manually added in order to access Fink's
	  &quot;libgnugetopt&quot;.
	</p>
      </itemd>
    </item>
  </itemtable>

  <p>
    When migrating a package to OS X 10.3, try to remove these
    deprecated dependencies, as those packages may be removed from these
    newer package trees in the future. This means you will need a separate
    package description file for each tree. As always,
    the <code>Revision</code> must be increased when making changes to
    a package. In this manner, a user who upgrades from OS X 10.2 to
    10.3 will see 10.3-specific packages as &quot;newer&quot; than his
    existing 10.2 ones. By convention, the <code>Revision</code>
    should be increased by 10 when changes are made for migration to a
    higher tree inn order to leave space for the lower-tree package to be
    updated in the future.
  </p>

  <p>
    When testing a migrated package, make sure to uninstall the
    packages whose <code>BuildDepends</code> you removed. Otherwise
    the compiler may still link the Fink-supplied libraries.
  </p>

</section>

</chapter>

<chapter filename="preparing-10.4">
<title>Preparing for 10.4</title>
<shorttitle>Preparing for 10.4</shorttitle>

<section name="perl"><title>Perl</title>

  <p>
    <filename>/usr/bin/perl</filename> is now perl 5.8.6; the
    architecture string is still &quot;darwin-thread-multi-2level&quot;.
  </p>

</section>

<section name="typedef"><title>New symbol definitions</title>

  <p>
    Mac OS X 10.4 has changed the types of many symbols. If you
    previously set a type explicitly, for example,
    defining <code>socklen_t</code> as <code>int</code>, that
    definition may no longer be correct.
  </p>

</section>

<section name="system-libs"><title>New builtin system libraries</title>

  <p>
    The <code>poll()</code> function in Mac OS X 10.3 was actually an
    emulation implemented using <code>select()</code>. In Mac OS X
    10.4, <code>poll()</code> is a real function implemented in the
    kernel, however it is broken when used with sockets. Consider
    ignoring the system's <code>poll()</code> completely. Fink's glib2
    package has been patched to use a fully functional emulation, so
    it is safe to use that library's implementation of poll-like
    functions.
  </p>

</section>

</chapter>

</document>
