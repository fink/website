<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE document SYSTEM "../finkdoc.dtd">

<document filename="index" lang="en" >
<title>Creating Fink Packages</title>
<shorttitle>Packaging</shorttitle>
<cvsid>$Id: packaging.en.xml,v 1.1318 2024/12/20 6:46:11 nieder Exp $</cvsid>

<preface>
<p>
This manual documents how to create package descriptions for the Fink
package manager.
It also provides a policy and guidelines for the Fink distribution.
Both the description format and the distribution policy are still
evolving, so watch the "Last changed" info and the CVS tag on this
page to detect updates.
What you're reading right now is a description of the format and
policy used in post-0.9.0 development versions of the <tt>fink</tt>
package manager.
</p>
<p>
If you create packages for Fink, you may want to subscribe to the
<link url="http://lists.sourceforge.net/lists/listinfo/fink-devel">fink-devel</link>
mailing list.
If you are looking for a way to help out with Fink, and you have skills
in this area, you might consider adopting a
<link url="http://pdb.finkproject.org/pdb/nomaintainer.php">package which
currently has no maintainer.</link>
</p>
</preface>


<chapter filename="intro">
<title>Introduction</title>
<shorttitle>Intro</shorttitle>


<section name="def1"><title>What is a Package?</title>
<p>
A package is a piece of software that forms an atomic unit.
A typical package contains an executable program, the data files it
needs, message catalogs for internationalisation and documentation.
In Fink, packages can exist in two forms: the package description
and the ready-to-install binary package file.
</p>
<p>
The package description is a human readable text file that contains
everything needed to build a package, i.e. to create the binary
package file.
The information includes meta-data (like the package's name and a prose
description of its purpose), the URL of the source code and the
instructions necessary to configure, compile and wrap up the package.
The description may be accompanied by a patch file.
</p>
<p>
A binary package file is a file archive that contains the actual files
that make up the package,
i.e. executables, data files, message catalogs, libraries, include
files, etc.
The package file also contains some meta-data for the package.
Installing a binary package mainly consists of unpacking its contents
as it is already in a ready-to-use form.
Since Fink builds on the dpkg package manager, the binary package
files are in the dpkg format and have the extension .deb.
</p>
</section>


<section name="ident"><title>Identifying a Package</title>
<p>
A package is identified by three strings: the package name, the
version and the revision.
All of these may contain lower-case letters (a-z), numbers (0-9),
dashes (-; note: not allowed in the revision), plus signs (+) and dots (.).
Other characters are not allowed.
In particular, capital letters and underscores are not allowed.
</p>
<p>
The package name is simply the name of the software, e.g. openssh.
The version, also called the upstream version, is the version
identifier of the original software package.
It is okay to use letters in the version, e.g. 2.9p1.
Both fink and dpkg know how to sort these correctly.
The revision is a counter that is increased when the package
description changes.
It starts at 1 and should be reset to 1 when the upstream version
changes.
The revision must not contain dashes.
The full name of a package is all three items concatenated, with
dashes in between, e.g. openssh-2.9p1-2.
</p>
</section>

</chapter>


<chapter filename="format">
<title>Package Descriptions</title>
<shorttitle>Package Descriptions</shorttitle>

<section name="trees"><title>Tree Layout</title>
<p>
Package descriptions are read from the <code>finkinfo</code>
directories below the <filename>/opt/sw/fink/dists</filename> directory.
The "Trees" setting in <filename>/opt/sw/etc/fink.conf</filename> controls
which directories are read.
The name of package description files must be the full package name
plus the extension ".info".
As of fink 0.26.0, there are several different ways to specify the
filename: it is recommended to use the shortest version which is
consistent with other needed package files.  The filename takes
the form: the invariant packagename, optionally 
followed by the architecture, optionally followed by the
distribution, 
optionally followed by either version or version-revision, each delimited by 
hyphens, concluding with ".info".  
The "architecture" and "distribution" components are only allowed
if the corresponding field is present in the package, and if it specifies
exactly one value.
</p>
<p>
The package description tree is organized with several levels of
directories.
The directories in top-down order:
</p>
<ul>
<li><code>dists</code> is where it starts. The <code>dists</code>
directory is necessary for the Debian tools.  In recent versions
of fink, this is a symlink to a directory with a distribution-inspired
name.</li>
<li>The distribution. There is <code>stable</code>,
<code>unstable</code> and <code>local</code>. The <code>local</code>
directory is under the control of the local administrator/user. The
<code>stable</code> and <code>unstable</code> directories are part of
Fink.</li>
<li>The tree. The <code>main</code> tree contains the bulk of the
packages. Prior to July 1, 2010, the
Cryptographic software was kept in a separate tree,
<code>crypto</code>, but this is now a section of the <code>main</code>
tree.</li>
<li><code>finkinfo</code>
vs. <code>binary-darwin-powerpc</code>. <code>finkinfo</code> contains
the Fink package descriptions and patches, while
<code>binary-darwin-powerpc</code> contains the <code>.deb</code>
binary packages.</li>
<li>Sections. The <code>main</code> tree is subdivided into thematic
sections to make it manageable. </li>
</ul>
</section>

<section name="format"><title>File Format</title>
<p>
The description files are simple lists of key-value pairs, also called
'fields'.
Each line starts with a key, terminated by a colon (:) and followed by
the value, like this:
</p>
<codeblock>Key: Value</codeblock>
<p>
There are two notations for fields that must span multiple lines.
</p><p>
The preferred notation is based on the here-document
syntax in shell scripts.
In this syntax, the first line consists of the key, followed by <code>&lt;&lt;</code>
as the value.
All following lines are treated as the actual value, until a line with
just <code>&lt;&lt;</code> on it is encountered.
The example from above now looks like this:
</p>
<codeblock>InstallScript: &lt;&lt;
mkdir -p %i/share/man
make install prefix=%i mandir=%i/share/man
mkdir -p %i/share/doc/%n
install -m 644 COPYING %i/share/doc/%n
&lt;&lt;</codeblock>
<p>
Indentation using this format is optional, but it can be used to
improve readability.
</p><p>
The here-document syntax can be nested. This is often used in
a <code>SplitOff</code> or <code>SplitOff<em>N</em></code> field.
These fields contain other fields (multiple lines), and this syntax
allows these sub-fields to have multiple lines themselves.  The same
terminator <code>&lt;&lt;</code> is used for the sub-here-document.
Here is an example:
</p>
<codeblock>
SplitOff: &lt;&lt;
  Package: %N-shlibs
  InstallScript: &lt;&lt;
    ln -s %p/lib/libfoo.2.dylib %i/lib/libfoo.%v.dylib
  &lt;&lt;
&lt;&lt;
</codeblock>
<p>
In this format, empty lines and lines starting with a hash (#) are ignored.
Keys (field names) are case-insensitive in Fink, so you can write
<code>InstallScript</code>, <code>installscript</code> or
<code>INSTALLSCRIPT</code> as you please.
The first capitalization form is preferred for readability, though.
Some fields take a boolean value - any of "true", "yes", "on", "1"
(case-insensitive) are treated as true, all other values are treated
as false.
</p>
</section>

<section name="percent"><title>Percent Expansion</title>
<p>
To make life easier, Fink supports a set of expansions that are
performed on some fields.
In order to prevent ambiguity, you can use curly-braces to denote
exactly what character(s) should be considered for a percent
expansion. For example, <code>%{n}</code> has the same meaning
as <code>%n</code>.
The available expansions are:
</p>
<itemtable labeld="" labelt="">
<item><itemt>%n</itemt>
<itemd>
<p>
the <em>n</em>ame of the current package
</p>
</itemd></item>

<item><itemt>%N</itemt>
<itemd>
<p>
the <em>N</em>ame of the parent package (the same as %n unless within a
<code>SplitOff</code>)
</p>
<p>
Note: If a parent <code>Package</code> field contains %type_*[], those
percent expansion values <em>will</em> be included in %N in
a <code>SplitOff</code> block (since they are included in %n in the
parent).
</p>
</itemd></item>

<item><itemt>%e</itemt>
<itemd>
<p>
the package <em>e</em>poch
</p>
</itemd></item>

<item><itemt>%v</itemt>
<itemd>
<p>
the package <em>v</em>ersion. Note that the Epoch is not part
of <code>%v</code>.
</p>
</itemd></item>

<item><itemt>%V</itemt>
<itemd>
<p>
the full package <em>V</em>ersion, which automatically includes the Epoch
if present.  Note that this percent expansion is only available for
packages whose <code>InfoN</code> level is at least 4.
</p>
</itemd></item>

<item><itemt>%r</itemt>
<itemd>
<p>
the package <em>r</em>evision
</p>
</itemd></item>

<item><itemt>%f</itemt>
<itemd>
<p>
the <em>f</em>ull package name (%n-%v-%r). Note that the Epoch is not
part of <code>%f</code>.
</p>
</itemd></item>

<item><itemt>%p, %P</itemt>
<itemd>
<p>
the <em>p</em>refix where Fink is installed, e.g. <filename>/opt/sw</filename>. You must not assume all users have Fink installed in <filename>/opt/sw</filename>; use <code>%p</code> to get the correct path.
</p>
</itemd></item>

<item><itemt>%d</itemt>
<itemd>
<p>
the <em>d</em>estination directory where the tree to be packaged is built, e.g.
<filename>/opt/sw/src/fink.build/root-gimp-1.2.1-1</filename>. This temporary directory serves
as root during the installation phase of compiling a package. You must not assume that
<filename>root-%f</filename> will be in <filename>%p/src</filename> since
a user can change that directory using the <code>Buildpath</code> field
in <filename>/opt/sw/etc/fink.conf</filename>.
</p>
</itemd></item>

<item><itemt>%D</itemt>
<itemd>
<p>
the <em>D</em>estination for the parent package (the same as %d unless within a
<code>SplitOff</code>)
</p>
</itemd></item>

<item><itemt>%i</itemt>
<itemd>
<p>
the full <em>i</em>nstall-phase prefix, equivalent to %d%p
</p>
</itemd></item>

<item><itemt>%I</itemt>
<itemd>
<p>
the <em>I</em>nstall prefix of the parent package, equivalent to %D%P (the same
as %i unless within a <code>SplitOff</code>)
</p>
</itemd></item>

<item><itemt>%a</itemt>
<itemd>
<p>
the path where the p<em>a</em>tches can be found. As of fink-0.29.0, this variable should not be used. Use <code>%{PatchFile}</code> to access the <filename>.patch</filename> file. Support for <code>%a</code> will be removed in the future.
</p>
</itemd></item>

<item><itemt>%b</itemt>
<itemd>
<p>
the <em>b</em>uild directory, e.g. <filename>/opt/sw/src/fink.build/gimp-1.2.1-1/gimp-1.2.1</filename>.
You must not assume that
<filename>%f</filename> will be in <filename>%p/src</filename> since
a user can change that directory using the <code>Buildpath</code> field
in <filename>/opt/sw/etc/fink.conf</filename>.
The innermost directory is named based on the <code>Source</code>
filename, or is the value of the <code>SourceDirectory</code> field
(if present), or is not used if <code>NoSourceDirectory</code>
is <code>true</code>.
</p>
<p>
Note: Use this only when there is no other way. The build directory is the
current directory when scripts are executed; you should use relative path names
in commands.
</p>
</itemd></item>

<item><itemt>%c</itemt>
<itemd>
<p>
the parameters for <em>c</em>onfigure: <code>--prefix=%p</code> plus anything
specified with ConfigureParams.  (The behavior is different when the package
has <code>Type: perl</code>; in that case, the default flags for
building a perl package are used instead of <code>--prefix=%p</code>
in the definition of <code>%c</code>.)
</p>
</itemd></item>

<item><itemt>%m</itemt>
<itemd>
<p>
the <em>m</em>achine architecture string.  This is no longer strictly
dictated by the type of machine, but is rather a choice made by the
user upon fink installation among those architectures which will run
on the user's hardware.  Current possible values are
'powerpc' for ppc machines
and either 'i386' or 'x86_64' for x86 machines. The choice 'x86_64'
is only available if the machine is capable of running 64-bit libraries
and executables.  (This item was introduced in the fink-0.12 era; the
current description is valid for fink-0.29.5 and later.)
</p>
</itemd></item>

<item><itemt>%%</itemt>
<itemd>
<p>
the percent character (one that will not be expanded according to whatever follows it).  Expansion occurs strictly
left-to-right, so %%n is not anything related to the package name, but
rather is the string %n.  (Introduced in fink-0.18.0)
</p>
</itemd></item>

<item><itemt>%type_raw[<em>type</em>], %type_pkg[<em>type</em>],
%type_num[<em>type</em>]</itemt>
<itemd>
<p>
pseudo-hashes returning the subtype for the given <em>type</em>. See
documentation for the <code>Type</code> field later in this document.
The _raw form is the exact subtype string, while the _pkg form has all
period characters removed (as per Fink's language-version package naming
convention and for other clever uses). (Introduced in a post-0.19.2
CVS version of fink.)  The _num form was introduced in fink-0.26.0
and removes all non-digits from the <code>Type</code> field.
</p>
<p>
Note that when the <code>Type</code> field defines <em>type</em> to
be "Boolean", then <code>(%type_pkg[type])</code> can be used directly
in conditional expressions.  (Its boolean value is true or false,
corresponding to the subtype is being evaluated.)
</p>
</itemd></item>

<item><itemt>%{ni}, %{Ni}</itemt>
<itemd>
<p>
the package <em>n</em>ame <em>i</em>nvariant portion. These are like
%n and %N, except all %type_pkg[] and %type_raw[] are blanked out.
(Introduced in a post-0.19.2 CVS version of fink) You should use %{ni}
and %{Ni} to avoid confusion with the %n and %N expansions.
</p>
</itemd></item>

<item><itemt>%{default_script}</itemt>
<itemd>
<p>
Valid only in <code>PatchScript</code>, <code>CompileScript</code>, and <code>InstallScript</code> fields, the default contents of
that type of field. The value is often dependent on
the <code>Type</code> field, and is always defined (though it may be
blank). When used in the <code>InstallScript</code> of a <code>SplitOff</code> (or <code>SplitOff<em>N</em></code>), this
expansion will yield the <em>parent's</em> default, even though the
default for <code>InstallScript</code> in a <code>SplitOff</code>
package is blank. (Introduced in fink-0.20.6)
</p>
</itemd></item>

<item><itemt>%{PatchFile}</itemt>
<itemd>
<p>
The full path to the file given in the <code>PatchFile</code> field.
(Introduced in fink-0.24.12)
</p>
</itemd></item>

<item><itemt>%{PatchFile<em>N</em>}</itemt>
<itemd>
<p>
The full path to the file given in the <code>PatchFile<em>N</em></code> field.
(Introduced in fink-0.30.0)
</p>
</itemd></item>

<item><itemt>%lib</itemt>
<itemd>
<p>
If <code>Type: -64bit</code> is defined to be <code>-64bit</code>,
this expands to <em>lib/ppc64</em> under the powerpc architecture, and to
<em>lib/x86_64</em> under the i386 architecture (the proper storage locations
for 64-bit libraries on 32-bit systems); 
otherwise, this expands to <em>lib</em>.
(Introduced in fink-0.26.0)
</p>
<p>Note that <code>%lib</code> is not permitted in the
<code>ConfigureParams</code> field unless the <code>InfoN</code>
 level is at least 4.
</p>
</itemd></item>
</itemtable>

</section>

</chapter>


<chapter filename="policy">
<title>Packaging Policy</title>
<shorttitle>Policy</shorttitle>

<section name="licenses"><title>Package Licenses</title>
<p>
The packages included in Fink come with a wide variety of licenses.
Most of them place restrictions on redistributing the full source and
especially on distributing binaries.
Some packages can not be included in the binary distribution of Fink
because of these license restrictions.
Thus it is very important that package maintainers check the license
of their package carefully.
</p>
<p>
Every package that is to be distributed as a binary package must
contain a copy of the license.
It must be installed in the doc directory,
i.e. in <filename>%p/share/doc/%n</filename>.
(In the InstallScript, %i must be used instead of %p, of course.
The DocFiles field takes care of the details automatically.)
If there is no explicit license in the original source, include a
small text file with a note about the status of the package.
Most licenses require that the license accompanies any distribution.
Fink's policy is to always do this, even if it is not explicitly
required.
</p>
<p>
To make an automated maintenance of the binary distribution possible,
any package that is to be distributed must have a <code>License</code>
field.
This field denotes the nature of the license and is used to decide
which packages make it into the binary distribution and which must be
held back.
The field may only be present if the actual license terms are included
in the binary package, as explained above.
</p>
<p>
To make the <code>License</code> field useful, only one of the
following pre-defined values may be used.
If you're packaging something that doesn't fit into these categories,
ask for help on the developer mailing list.
</p>
<ul>

<li><code>GPL</code> - the GNU General Public License.
This license requires that the source is available from the same place
as the binary.</li>
<li><code>LGPL</code> - the GNU Lesser General Public License.
This license requires that the source is available from the same place
as the binary.</li>
<li><code>GPL/LGPL</code> - this if a special case for packages where
one part is licensed under the GPL (e.g. the executables) and another
part is licensed under the LGPL (e.g. the libraries).</li>

<li><code>BSD</code> - for BSD-style licenses.
This includes the so-called "original" BSD license, the "modified" BSD
license and the MIT license. The Apache license also counts as
BSD. With these licenses the distribution of source code is
optional.</li>

<li><code>Artistic</code> - for the Artistic license and
derivatives.</li>

<li><code>Artistic/GPL</code> - dual-licensed under the Artistic and GPL
licenses.</li> 

<li><code>GNU Free Documentation License</code> and <code>Linux
Documentation Project</code> - if the documentation included in a package
is explicitly included under one of the licenses, then this is indicated by
appending <code>/GFDL</code> or <code>/LDP</code>, giving one of the
allowed combinations: "GFDL",
"GPL/GFDL", "LGPL/GFDL", "GPL/LGPL/GFDL", "LDP", or "GPL/LGPL/LDP".
</li>

<li><code>DFSG-Approved</code> - for software that meets the guidelines
of the <link url="http://www.debian.org/social_contract">Debian Social Contract</link>.
</li>

<li><code>OSI-Approved</code> - for other Open Source licenses
approved by the <link url="http://www.opensource.org/">Open Source
Initiative</link>. One of OSI's requirements is that free distribution
of binaries and sources is allowed. This value can also be used as an
umbrella for dual-licensed packages.</li>

<li><code>Restrictive</code> - for restrictive licenses.
Use this for packages that are available from the author in source
form for free use, but don't allow free redistribution.</li>

<li><code>Restrictive/Distributable</code> - for restrictive licenses which
permit distribution of source and binaries.
Use this for packages that are available from the author in source
form, permit distribution of source and binaries, but have restrictions which
make them non-open source licenses.</li>

<li><code>Commercial</code> - for restrictive, commercial licenses.
Use this for commercial packages (e.g. Freeware, Shareware) that do
not allow free redistribution of source or binaries.</li>

<li><code>Public Domain</code> - for packages that are in the Public
Domain, i.e. the author has given up his copyright on the code. These
packages don't have licenses at all and anyone can do anything with
them.</li>

</ul>

</section>

<section name="openssl"><title>The GPL and OpenSSL</title>
<p>
(Policy change effective April, 2005.)
</p>
<p>
Due to the apparent incompatibility of the OpenSSL license with the GPL and 
LGPL licenses, fink packages which link to openssl but are licensed under 
the GPL or LGPL are marked as "Restrictive."  As a consequence, the Fink 
project will not distribute binaries of such packages, although users are 
free to compile them from source at their discretion.
</p>
<p>
Package maintainers are encouraged to record the original package license in 
the <code>DescPackaging</code> field.
</p>

</section>

<section name="prefix"><title>Base System Interference</title>
<p>
Fink is an add-on distribution that is installed in a directory
separate from the base system.
It is crucial that a package does not install files outside of Fink's
directory.
</p>
<p>
Exceptions can be made when there is no other possibility, e.g. with
XFree86.
In this case the package must check for existing files before
installation and refuse to install if it would overwrite existing
files.
The package must make sure that all files it installed outside of the
Fink directory are deleted when the package is removed, or that they
cause no harm if they are left there (i.e. they need to check binaries
for existence before calling them and the like).
</p>
</section>

<section name="sharedlibs"><title>Shared Libraries</title>
<p>
Fink's policy about shared libraries became effective in February 2002.
This section of the documentation discusses version 4
of the policy (which coincides with the release of Fink's 0.5.0 distribution),
as modified in December, 2006 to handle 64-bit libraries
and from January, 2008 to handle private shared libraries. (In addition,
the discussion was updated in June, 2008 to eliminate obsolete references to a
transitional period for implementing the shared libraries policy.)
We begin with a quick summary, and then discuss things in more detail.
</p><p>
Any package which builds shared libraries should treat its shared
  libraries according to Fink's policy.  This means:</p>
<ul>
<li>   verify, using <code>otool -L</code> (or <code>otool64 -L</code> for
64-bit libraries on 10.4), that 
       the install_name of each library and
       its compatibility and current version numbers are correct </li>
<li>   put the public shared libraries in a separate package (except for the
       links from libfoo.dylib to the install_name), and include
       the <code>Shlibs</code> field in that package</li>
<li>   put the headers and the final links from libfoo.dylib into a package
       which is classified as <code>BuildDependsOnly: True</code>, and plan
        to have
       no other package depend on this one.</li>
</ul>
<p>Note that a package may also install private shared libraries, which
are not intended to be linked from any other package.  In this case, the
libraries need not go into a separate package, but a <code>Shlibs</code>
field must still be part of the package containing shared libraries.  Also,
maintainers should try to avoid storing a final link from libfoo.dylib
in the main library directory <filename>%i/lib</filename> 
(or its 64-bit equivalent), to prevent
other programs from accidentally linking to this library.
</p>
<p>
  A maintainer who has reasons to deviate from this policy and not split the
  package should explain the reasons in the DescPackaging field.
</p><p>
For some packages, everything can be accomplished with a main package and a
-shlibs package; in other cases you also need a third package.  The new
<code>SplitOff</code> field actually makes this quite easy.
</p><p>
When three packages are needed, there are two different ways they could be named, depending on whether the libraries (option 1) or the binaries (option 2) are the most important feature of the package.  For option 1, 
use the layout:
</p>
<itemtable labeld="Contents" labelt="Package">
<item><itemt><code>foo-shlibs</code></itemt>
<itemd><p>Shared libraries</p></itemd></item>
<item><itemt><code>foo</code></itemt>
<itemd><p>Headers</p></itemd></item>
<item><itemt><code>foo-bin</code></itemt>
<itemd><p>Binaries, etc.</p></itemd></item>
</itemtable>

<p>while for option 2, use the layout:</p>
<itemtable labeld="Contents" labelt="Package">
<item><itemt><code>foo-shlibs</code></itemt>
<itemd><p>Shared libraries</p></itemd></item>
<item><itemt><code>foo-dev</code></itemt>
<itemd><p>Headers</p></itemd></item>
<item><itemt><code>foo</code></itemt>
<itemd><p>Binaries, etc.</p></itemd></item>
</itemtable>

<p><em>The policy in detail</em></p>
<p>
We now discuss things in more detail; for
examples of the policy in action, see the  libpng, libjpeg  and 
libtiff packages.
</p><p>
Software which has been ported to Darwin should build shared libraries 
whenever possible.  (Package maintainers
are also free to build static libraries as well, if appropriate
for their packages; or they may submit packages containing only static
libraries if they wish.)
Whenever shared libraries are being built that are expected to be used by other packages,
<em>two</em> closely related fink packages should be made, named foo 
and foo-shlibs.  The shared libraries go in foo-shlibs, and the header
files go in foo.  These two packages
can be made with a single .info file, using
the <code>SplitOff</code> field, as described below.  
(In fact, it is often necessary
to make more than two packages from the source, and this can be done
using <code>SplitOff2</code>, <code>SplitOff3</code>, etc.)
</p><p>
Each software package for which public shared libraries are built must have
a <em>major version number</em> N, which is included in the shared
library's filename (for example, <filename>libbar.N.dylib</filename>).
The major version number is only supposed
to change when a backwards-incompatible change in the library's API has been
made.  Fink uses the following naming convention: if the upstream name
of the package is bar, then the fink packages are called barN and 
barN-shlibs.  (This is only strictly applied to new packages, or when the 
major version number changes.)  For example, the major version number for
the pre-existing libpng package was 2, but recent versions of the
library have major version number 3.  So there are now four fink packages
to handle this: libpng, libpng-shlibs, libpng3, libpng3-shlibs.
Only one of libpng and libpng3 can be installed at any given time,
but libpng-shlibs and libpng3-shlibs can be installed at the same time.
(Note that only two .info files are required to build these four packages.)
</p><p>
The shared library itself and certain related files will be put into 
the package barN-shlibs; the "include" files and certain other files will
be put into the package barN.  There can be no overlapping files
between these two packages, and everything stored in barN-shlibs must have
a pathname which somehow includes the major version number N.  In many
instances, your package will need some files at runtime which are
typically installed into <filename>%i/lib/bar/</filename> or 
<filename>%i/share/bar/</filename> ; you should adjust the installation
paths to <filename>%i/lib/bar/N/</filename> or
<filename>%i/share/bar/N/</filename>.
</p><p>
All other packages which depend on bar, major version N, will be asked to
use the dependencies
</p>
<codeblock>
  Depends: barN-shlibs
  BuildDepends: barN
</codeblock>
<p>
It is not be permitted for 
another package to depend on barN itself.  (Although there may still be
a few such dependencies involving packages which were in place prior to 
February, 2002.)  This is
signaled to other developers by a boolean field
</p>
<codeblock>
  BuildDependsOnly: True
</codeblock>
<p>
within the package description for barN.
</p><p>
If your package includes both shared libraries and binary files, and
if the binary files need to be present at runtime (not just at build
time), then the binaries must be split off into a third package, which
could be called barN-bin.  Other packages are allowed to depend on
barN-bin as well as barN-shlibs.
</p><p>
When building shared libraries under major version N, it is important that
the "install_name" of the library be <filename>%p/lib/libbar.N.dylib</filename>.  
(You can
find the install_name by running <code>otool -L</code> on your library,
or <code>otool64 -L</code> for 64-bit libraries on 10.4.)  The
actual library file may be installed at another location, such as
</p>
<codeblock>
  %i/lib/libbar.N.x.y.dylib
</codeblock>
<p>
and your packages should create symbolic links
</p>
<codeblock>
  %i/lib/libbar.N.dylib -> %p/lib/libbar.N.x.y.dylib
  %i/lib/libbar.dylib -> %p/lib/libbar.N.x.y.dylib
</codeblock>
<p>from the install_name path and from the linking path to the actual
library.  (The first will not be needed if the library is in fact
installed at the install_name path, which is becoming more common.)
</p>
<p>
If the static library is also built, then it will be installed at
</p>
<codeblock>
  %i/lib/libbar.a
</codeblock>
<p>
If the package uses libtool, these things are usually handled automatically,
but in any event you should
check that they have been done correctly in your case.  You should also
check that current_version and compatibility_version were defined 
appropriately for your shared libraries.  (These are also shown with the 
<code>otool -L</code> query, or <code>otool64 -L</code> for 64-bit libraries.)
</p><p>
Files are then divided between the two packages as follows
</p>
<ul>
<li>  in package barN-shlibs:
<codeblock>
  %i/lib/libbar.N.x.y.dylib
  %i/lib/libbar.N.dylib -> %p/lib/libbar.N.x.y.dylib
  %i/lib/bar/N/*
  %i/share/bar/N/*
  %i/share/doc/barN-shlibs/*
</codeblock></li>
<li>  in package barN:
<codeblock>
  %i/include/*
  %i/lib/libbar.dylib -> %p/lib/libbar.N.x.y.dylib
  %i/lib/libbar.a
  %i/share/doc/barN/*
  other files, if needed
</codeblock></li></ul>
<p>
Notice that both packages are required to have some documentation about
the license, but that the directories containing the DocFiles will be
different.
</p><p>
Doing this is quite easy in practice, using the 
<code>SplitOff</code> field.  Here is
how the example above would be implemented (in part):
</p>
<codeblock>
Package: barN
Version: N.x.y
Revision: 1
License: GPL
Depends: barN-shlibs (= %v-%r)
BuildDependsOnly: True
DocFiles: COPYING
SplitOff: &lt;&lt;
  Package: barN-shlibs
  Files: lib/libbar.N.x.y.dylib lib/libbar.N.dylib lib/bar/N
  DocFiles: COPYING
&lt;&lt;
</codeblock>
<p>
During the execution of the <code>SplitOff</code>
field, the specified files and directories are moved from the 
install directory %I of the main package to the install directory %i of the
splitoff package.  (There is a similar convention for names: %N is the
name of the main package, and %n is the name of the current package.)
The <code>DocFiles</code> command then puts a copy of the documentation into 
<filename>%i/share/doc/barN-shlibs</filename>.
</p><p>
Notice that we have included the exact current version of barN-shlibs as a 
dependency of the main package barN (which can be abbreviated 
%N-shlibs (= %v-%r) ).
This ensures that the versions match, and also guarantees that barN
automatically "inherits" all the dependencies of barN-shlibs.
</p>
<p><em>The BuildDependsOnly field</em>
</p><p>
When libraries are being upgraded over time, it is often necessary to have
two versions of the header files available during a transition period,
with one version used for compiling some things and the other version
used for compiling others.  For this reason, the packages containing
header files must be constructed with some care.  If both foo-dev and
bar-dev contain overlapping headers, then foo-dev should declare
</p>
<codeblock>
  Conflicts: bar-dev
  Replaces: bar-dev
</codeblock>
<p>and similarly bar-dev declares Conflicts/Replaces on foo-dev.
</p><p>
In addition, both packages should declare
</p>
<codeblock>
  BuildDependsOnly: True
</codeblock>
<p>This inhibits others from writing packages which depend on foo-dev or
bar-dev, since any such dependency will prevent the smooth operation of the
Conflicts/Replaces method.
</p><p>
There are some packages containing header files for which it's not
appropriate to declare BuildDependsOnly to be true.  In that case,
the package should declare
</p>
<codeblock>
  BuildDependsOnly: False
</codeblock>
<p>and the reason must be given in the DescPackaging field.
</p><p>
The BuildDependsOnly field should only be mentioned in the package's .info
file if the package contains header files, installed into 
<filename>%i/include</filename> (or subdirectories thereof).
</p><p>
As of fink 0.20.5, "fink validate" will issue a warning for any .deb
which contains header files and at least one dylib, and does not declare
BuildDependsOnly to be either true or false.  (It is possible that in
future versions of fink, this warning will be expanded to cover the case of
a .deb with header files and a static library as well.)
</p>

<p>
  The goal of the Shared Library Policy is to allow assure
  compatibility between libraries supplied by one package and
  libraries or programs that use them in a different package. Some
  packages may have shared libraries that are not designed to be used
  by other packages. Common situations include a suite of programs
  that come with a back-end library of utility functions or a program
  that comes with plugins to handle various features. Because these
  libraries are "private" to the package that has them, they do not
  require being packaged with separate -shlibs
  or <code>BuildDependsOnly</code> SplitOffs.
</p>
<p><em>The Shlibs field</em>
</p><p>
In addition to putting the shared libraries in the correct package, as of
version 4 of this policy, you must also declare all of the shared libraries
using the <code>Shlibs</code> field.  This field has one line for each
shared library, which contains the <code>-install_name</code> of the
library. If the library is public, its <code>Shlibs</code> entry also
lists the <code>-compatibility_version</code>, versioned
dependency information specifying the Fink package which provides
this library at this compatibility version, and the library
architecture.  (The library architecture may either be "32", "64", or
"32-64", and may be absent. If the library architecture is not
explicitly listed, it defaults to the standard value for the current
architecture of Fink; these standard values are "32" for the powerpc 
and i386 architectures, and "64"
for the x86_64 architecture.)
The dependency should
be stated in the form <code> foo (>= version-revision)</code> where 
<code>version-revision</code> refers to
the <em>first</em> version of a Fink package which made
this library (with this compatibility version) available.  For example,
a declaration</p>
<codeblock>
  Shlibs: &lt;&lt;
    %p/lib/libbar.1.dylib 2.1.0 bar1 (>= 1.1-2) 32
  &lt;&lt;
</codeblock>
<p>indicates that a (32-bit)
library with <code>-install_name</code> %p/lib/libbar.1.dylib
and <code>-compatibility_version</code> 2.1.0 has been installed since
version 1.1-2 of the <em>bar1</em> package.  In addition, this declaration
amounts to  a promise
from the maintainer that a 32-bit
library with this name and a compatibility-version
of at least 2.1.0 will always be found in later versions of the <em>bar1</em> 
package.
</p><p>
Note the use of %p in the name of the library, which allows the correct
<code>-install_name</code> to be found by all users of Fink, no matter
what prefix they have chosen.
</p>
<p>When a package is updated, usually the <code>Shlibs</code> field can simply
be copied to the next version/revision of the package.  The exception to
this is if the <code>-compatibility_version</code> increases: in that
case, the version number in the dependency information should be changed
to the current version/revision (which is the first version/revision to
provide the library with the new compatibility version number).
</p>
<p>
The <code>Shlibs</code>
entry for a private library uses a different syntax:
</p>
<codeblock>
  Shlibs: &lt;&lt;
    !%p/lib/%N/libbar.1.dylib
  &lt;&lt;
</codeblock>
<p>The leading exclamation point indicates that this is a private library,
and since the other information is not relevant in this case, it is 
not included.</p>
<p>Note that in this example, the private shared library has been placed
in its own subdirectory <filename>%N</filename> of the 
<filename>%i/lib</filename> directory (which was named after the
package).  This is a recommended procedure for private libraries,
as an additional safety measure, to prevent other packages from accidentally
linking to this library.
</p>
<p>
<em>What to do when the major version number changes:</em>
</p><p>
If the major version number changes from N to M, you will create two new
packages barM and barM-shlibs.  The package barM-shlibs can have no
overlap with the package barN-shlibs, since many users will have both of
these installed simultaneously.  In package barM, you should use dependencies
</p>
<codeblock>
  Conflicts: barN
  Replaces: barN
</codeblock>
<p>
and similarly, you should revise barN to include dependencies
</p>
<codeblock>
  Conflicts: barM
  Replaces: barM
</codeblock>
<p>
Users will then see barN and barM shuffling in and out as various other
packages are built which depend on one version or another of the shared
library, while barN-shlibs and barM-shlibs remain permanently installed.
</p>
<p>
<em>Packages containing both binary files and libraries:</em>
</p><p>
When an upstream package contains both binary files and public libraries, some
care must be exercised in constructing fink packages.  In some cases,
the only binary files will be things like <code>foo-config</code> which
are presumably only used at build time and never at run time.  In these
cases, the binaries can go with the header files in the <code>foo</code>
package.
</p><p>
In other cases, the binary files will be needed by other packages at
runtime, and they must be split off into a separate fink package with
a name something like <code>foo-bin</code>.  The <code>foo-bin</code>
package should depend on the <code>foo-shlibs</code> package, and
maintainers of other packages should be encouraged to use
</p>
<codeblock>
  Depends: foo-bin
  BuildDepends: foo
</codeblock>
<p>
which will take care of foo-shlibs implicitly.
</p><p>
Upgrading presents a problem in this situation, however, since users won't
be prompted to install <code>foo-bin</code>.  To work around this, until
all other package maintainers have revised their packages as above,
your <code>foo</code> package can say
</p>
<codeblock>
  Depends: foo-shlibs (= exact.version), foo-bin
</codeblock>
<p>
This will force the installation of foo-bin on most users' systems, until
such time as the other package maintainers have upgraded their packages
which depend on <code>foo</code>.
</p>
<p>
  As of fink-0.28.0 (released in January 2008), the format of
  the <code>Shlibs</code> entry for a "private" shared library has
  changed (see earlier discussion of the difference between a public
  and a private shared library). Note that the Shared Library Policy
  has always required all shared libraries to be listed; the change
  here is only in the syntax of the <code>Shlibs</code> field. Because
  this type of shared library is not designed to be used by external
  packages, there is no need to document its compatilibity or other
  versioning. Instead, an exclamation-mark is used.  For example,
  if <filename>libquux.3.dylib</filename> is
  the <code>install_name</code> of a private shared library, it would
  be listed as follows:
</p>
<codeblock>
  Shlibs: &lt;&lt;
    !%p/lib/libquux.3.dylib
  &lt;&lt;
</codeblock>

</section>

<section name="perlmods"><title>Perl Modules</title>
<p>Fink's policy about perl modules, originally implemented in
May 2003,  has been revised as of April 2004.
</p>
<p>
Traditionally, the Fink packages for perl modules had the suffix 
<code>-pm</code>, and were built using the <code>Type: perl</code> 
directive, which stores the perl module's files in <filename>/opt/sw/lib/perl5</filename> and/or
<filename>/opt/sw/lib/perl5/darwin</filename>.  Under the policy
now in place, this storage location is only 
permitted for perl modules which are independent of the version of perl 
being used to compile them (and which do not depend on other perl modules
that lack this independence-of-version).
</p>
<p>
The perl modules which are version-dependent are the so-called XS modules,
which frequently contain compiled C code as well as pure perl routines.
There are a number of ways of recognizing these, including the presence
of a file with a suffix <code>.bundle</code>.
</p>
<p>
A version-dependent perl module must be built using a versioned binary
of perl, such as <code>perl5.12.3</code>, and must store its files in
versioned subdirectories of the standard perl directories, such as
<filename>/opt/sw/lib/perl5/5.12.3</filename> and <filename>/opt/sw/lib/perl5/5.12.3/darwin</filename>.  By convention, package names
use the suffix <code>-pm5123</code> for
a perl module of version 5.12.3.  Similar storage and naming conventions
are in force for other versions of perl, which include 
perl 5.10.0 (in the 10.6 tree only), perl 5.12.4 (in the 10.7 tree only), and 
perl 5.16.2 (in the 10.7 tree only).
</p>
<p>
The directive <code>Type: perl 5.12.3</code> automatically uses the
versioned perl binary and stores the files in the correct subdirectories. 
(This directive is available starting with version 0.13.0 of fink.)
</p>
<p>
Under the May 2003 policy, it was permitted to create a 
<code>-pm</code> package which is essentially 
a "bundle" package that loads the <code>-pm560</code> variant or any
others which may be exist.  Under the April 2004 policy this is discouraged,
and after a transitional period was outlawed entirely.
</p>
<p>
As of fink 0.20.2, the system-perl virtual package automatically
"Provides" certain perl modules depending on the system-perl version. The
code generating the list of provided perl modules is found in the 
<code>VirtPackage.pm</code> file that is part of the <code>fink</code> package.
</p>
<p>
As different system perls provide different modules, package maintainers are
encouraged to check to be sure that they are assuming the correct list when
using provided perl modules.
</p>
<p>
Effective with version 0.13.0 of fink, the <code>fink validate</code>
command when applied to a <code>.deb</code> file will check to see if
the fink package is an XS module which has been installed in a non-versioned 
directory, and will issue a warning if so.
</p>
<p>
Users may have more than one version of perl installed at a time, so
any perl-versioned module packages must be written to allow more than
one version of themselves to be installed concurrently. One must use
care when installing manpages and binary or other script executables
in these packages in order to prevent installation conflicts due to
filename collisions. 
You are not allowed to have any files in a package whose name ends
with -pm<em>XYZ</em> that would have an identical pathname across
different <em>XYZ</em>. Using <code>Replaces</code> to allow the
same-named files to overwrite each other in different perl-versions of
these perl-module packages is no longer acceptable.
As a simple solution for manpages, starting in
March 2005, Fink has defined alternate locations in MANPATH:
<filename>%p/lib/perl5/X.Y.Z/man</filename> for each perl-X.Y.Z. You
no longer need to create mutually-exclusive -man or -doc SplitOff
packages. For
example, to avoid conflicts between uri-pm5124 and uri-pm5162, the
same-named <filename>URI.3pm</filename> manpage is installed
as <filename>%p/lib/perl5/5.12.4/man/man3/URI.3pm</filename> and
<filename>%p/lib/perl5/5.16.2/man/man3/URI.3pm</filename>,
respectively. Note that the default scripts provided by <code>Type:
perl X.Y.Z</code> have not changed, so you will have to locate the
manpages here manually in your <code>InstallScript</code>. If you
don't have a highly customized script, you can still use the default
one, and then simply move the files manually:
</p>
<codeblock>
%{default_script}
mv %i/share/man %i/lib/perl5/5.12.4
</codeblock>
<p>
That will move all manpages. If you wish to move only one section of
manpages (for example, only section 3, the module manpages, not script
manpages in section 1), a similar approach works:
</p>
<codeblock>
%{default_script}
mkdir -p %i/lib/perl5/5.12.4/man
mv %i/share/man/man3 %i/lib/perl5/5.12.4/man
</codeblock>
<p>
If you have executables, for example, demo or utility scripts
in <filename>%p/bin</filename>, you have several options. One example
is to put these files (and their associated manpages and/or other
related files) in a %N-bin splitoff package. Use of
<code>Conflicts</code> and <code>Replaces</code> fields ensures that
installation of different perl-version forms of these packages, which
contain files of the same name, is mutually exclusive. The user can
install many different perl-versions of the runtime modules, and then
choose whichever one perl-version of the scripts he wants at a given
time. For example, Tk.pm comes with an
executable <filename>ptksh</filename>, so the set of tk-pm* packages
could be constructed as follows:
</p>
<codeblock>
Info2: &lt;&lt;
Package: tk-pm%type_pkg[perl]
Type: perl (5.12.3 5.12.4 5.16.2)
InstallScript: &lt;&lt;
  %{default_script}
  mkdir -p %i/lib/perl5/%type_raw[perl]/man
  mv %i/share/man/man3 %i/lib/perl5/%type_raw[perl]/man
&lt;&lt;
SplitOff: &lt;&lt;
  Package: %N-bin
  Depends: %N
  Conflicts: %{Ni}5.12.3, %{Ni}5.12.4, %{Ni}5.16.2
  Replaces: %{Ni}5.12.3, %{Ni}5.12.4, %{Ni}5.16.2
  Files: bin share/man/man1
&lt;&lt;
&lt;&lt;
</codeblock>
<p>
An alternative arrangement is to rename the scripts and their manpages
to include perl-version information. This method means there is no
naming conflict at all, so one does not need the mutually-exclusive
%N-bin splitoffs:
</p>
<codeblock>
Info2: &lt;&lt;
Package: tk-pm%type_pkg[perl]
Type: perl (5.12.3 5.12.4 5.16.2)
InstallScript: &lt;&lt;
  %{default_script}
  mkdir -p %i/lib/perl5/%type_raw[perl]/man
  mv %i/share/man/man3 %i/lib/perl5/%type_raw[perl]/man
  mv %i/bin/ptksh %i/bin/ptksh%type_raw[perl]
  mv %i/share/man/man1/ptksh.1 %i/share/man/man1/ptksh%type_raw[perl].1
&lt;&lt;
&lt;&lt;
</codeblock>
<p>
The user accesses ptksh for whichever perl she wants. For convenience,
one could use <code>update-alternatives</code> to allow users to be
able to access these by their generic (no perl-version) names as well.
</p>
<p>
Also as of March 2005, the location of manpages and modules installed
by fink packages for perl itself (packages perlXYZ and perlXYZ-core
other than the perl-version provided by Apple) has changed. As a
result of this relocation, other fink packages that supply updated
versions of core perl modules should not list any perlXYZ or
perlXYZ-core packages in the <code>Replaces</code> field.
</p>


</section>
<section name="emacs"><title>Emacs Policy</title>
<p> The Fink project has chosen to follow the Debian project's policy
regarding emacs, with a few small differences.
(The Debian policy document can be found at
<link 
url="http://www.debian.org/doc/packaging-manuals/debian-emacs-policy">
http://www.debian.org/doc/packaging-manuals/debian-emacs-policy</link>.)
There are two differences in the Fink policy.  First, 
this policy only applies to the <filename>emacs21</filename>, <filename>emacs22</filename>, and
<filename>emacs23</filename> packages in fink at the moment, not to the xemacs package.  (This
may change some day in the future.)    And second, unlike the Debian policy,
 Fink packages are allowed to install things directly into 
/opt/sw/share/emacs/site-lisp.
</p>

</section>

<section name="sources"><title>Source Policy</title>
    <p>Sources should normally be downloaded from the location(s) that the upstream
    developer(s) use, and any modifications for Fink should be done through the use
    of a PatchFile and/or a PatchScript.  Do not make changes manually and use a changed
    source archive as a <code>Source</code> in your Fink packaging.</p>
    <p>If a VCS checkout (e.g. from <em>git</em> or <em>svn</em>) is to be used, e.g.
    because a project doesn't do formal releases, or a fix for a particular issue has
    been added between releases of a package, an acceptable source can be generated
    via the following method:</p>
    <ol>
        <li>Check out the package, preferably at a definite revision of the VCS.</li>
        <li>Make an archive from the VCS checkout (e.g. <em>zip</em>, <em>tar</em>, <em>tar.gz</em>,
        or <em>tar.bz2</em>).
            <p>Give the tarball a unique version.  For example, you can include the VCS revision in the archive name, e.g.
            <filename>foo-0svn1234.tar.gz</filename> for a package that doesn't make releases, or
            <filename>bar-1.2.3+svn4567.tar.bz2</filename> for a Fink package which is between
            upstream releases.</p></li>
        <li>Use the same <code>Version</code> in your <filename>.info</filename> file.</li>
        <li>It is also useful to put the commands that you ran to generate the source tarball in the
        <code>DescPackaging</code> field.</li>
        <li>Upload the tarball to a public download site where users can use <code>fink</code> to download it.
        If you don't have ready access to one, ask on the
        <link url="mailto:fink-devel@lists.sourceforge.net">Fink developers mailing list</link> or
        <link url="https://web.libera.chat/#fink">the #fink IRC channel</link>,
        and someone should be able to help.</li>
    </ol>
</section>

<section name="downloading"><title>File Download Policy</title>
    <p>Packages are not to download any files during the unpack, patch, compile, install,
    or build phases of the <xref chapter="reference" section="build">build process</xref>.  Any large patches (i.e.
    larger than can be accommodated conveniently in a PatchFile) that need to be applied should
    set up as additional Sources in accordance with the <xref chapter="policy" section="sources">
    Source Policy.</xref></p>
    <p>Packages may download data in a PostInstScript after they have been installed on the system,
    under some limited circumstances:</p>
    <ul>
        <li>No updates to the package itself are allowed.</li>
        <li>The nature of the data is such that it couldn't easily be packaged for Fink.  E.g.
        virus definitions for <filename>clamav</filename> can be downloaded during this phase,
        because they change continually.</li>
    </ul>
    <p>If you are unsure, contact <link url="mailto:fink-core@lists.sourceforge.net">the Fink Core
    Team</link>.</p> 
</section>

</chapter>


<chapter filename="fslayout">
<title>Filesystem Layout</title>
<shorttitle>FS Layout</shorttitle>


<preface>
<p>
The following file system layout guidelines are part of the Fink
packaging policy.
</p>
</preface>


<section name="fhs"><title>The Filesystem Hierarchy Standard</title>
<p>
Fink follows the spirit of the <link
url="http://www.pathname.com/fhs/">Filesystem Hierarchy
Standard</link>, or FHS for short.
It can only follow it in spirit because the FHS was created for system
vendors that have control over the <filename>/</filename> and
<filename>/usr</filename> hierarchies.
Fink is an add-on distribution that controls only its install
directory (or prefix).
The examples use the default prefix of <filename>/opt/sw</filename>.
</p>
</section>

<section name="dirs"><title>The Directories</title>
<p>
Files should go into the following subdirectories of the hierarchy:
</p>

<itemtable>

<item><itemt><filename>/opt/sw/bin</filename></itemt>
<itemd>
<p>
This directory is for general executable programs.
There are no subdirectories.
</p>
</itemd></item>

<item><itemt><filename>/opt/sw/sbin</filename></itemt>
<itemd>
<p>
This directory is for executable programs that are intended to be used
by administrators only.
Background daemons go here.
There are no subdirectories.
</p>
</itemd></item>

<item><itemt><filename>/opt/sw/include</filename></itemt>
<itemd>
<p>
This directory is for C and C++ header files.
Subdirectories can be created as necessary.
If a package installs header files that can be confused with standard
C headers, those headers <em>must</em> go to a subdirectory.
</p>
</itemd></item>

<item><itemt><filename>/opt/sw/lib</filename></itemt>
<itemd>
<p>
This directory is for architecture-dependent data files and
libraries.
Static and shared libraries should be placed directly in
<filename>/opt/sw/lib</filename> unless there is a good reason not to.
This is also the place for executables that should not be executed
directly by the user (which would otherwise be placed in libexec).
</p>
<p>
A package is free to create a subdirectory to store private data or
loadable modules.
Make sure to use directory names that make sense for compatibility.
It is wise to use the package major version in the directory name or
as an additional hierarchy level, e.g. <filename>/opt/sw/lib/perl5</filename>
or <filename>/opt/sw/lib/apache/1.3</filename>.
Care should be taken when the host type is used to create
directories.
A <code>powerpc-apple-darwin1.3.3</code> directory is bad for
compatibility, <code>powerpc-apple-darwin1.3</code> or just
<code>powerpc-apple-darwin</code> are better choices.
</p>
</itemd></item>

<item><itemt><filename>/opt/sw/lib/ppc64</filename>
<filename>/opt/sw/lib/x86_64</filename></itemt>
<itemd>
<p>
This directory is for 64-bit libraries on 32-bit systems, 
with <filename>/opt/sw/lib/ppc64</filename>
being used under powerpc architecture, and
<filename>/opt/sw/lib/x86_64</filename> being used under i386 architecture.
Libraries which have been built 'fat' should be stored in
<filename>/opt/sw/lib</filename> instead, and should be so indicated by
using '32-64' in the corresponding Shlibs entry.  Note that under
the x86_64 architecture, 64-bit
libraries are to be stored in <filename>/opt/sw/lib</filename>.
</p>
</itemd></item>


<item><itemt><filename>/opt/sw/share</filename></itemt>
<itemd>
<p>
This directory is for architecture-independent data files.
The same rules as for <filename>/opt/sw/lib</filename> apply.
Some common subdirectories are described below.
</p>
</itemd></item>

<item><itemt><filename>/opt/sw/share/man</filename></itemt>
<itemd>
<p>
This directory contains manual pages.
It is organized into the usual section tree.
Every program in <filename>/opt/sw/bin</filename> and
<filename>/opt/sw/sbin</filename> should have an associated manual page here.
</p>
</itemd></item>

<item><itemt><filename>/opt/sw/share/info</filename></itemt>
<itemd>
<p>
This directory contains documentation in the Info format (produced
from Texinfo sources).
Maintenance of the <code>dir</code> file is automated through Debian's
version of <code>install-info</code> (part of the <code>dpkg</code>
package).
Use the <code>InfoDocs</code> description field to automatically
generate appropriate code for the <code>postinst</code> and
<code>prerm</code> package scripts.
Fink makes sure that no package installs a <code>dir</code> file of
its own.
There are no subdirectories.
</p>
</itemd></item>

<item><itemt><filename>/opt/sw/share/doc</filename></itemt>
<itemd>
<p>
This directory contains documentation that is neither a man page nor
an Info document.
README, LICENSE and COPYING files go here.
Every package must create a subdirectory here, named after the
package.
The subdirectory name must not contain any version numbers (unless
they are a part of the package name proper).
Hint: Just use <code>%n</code>.
</p>
</itemd></item>

<item><itemt><filename>/opt/sw/share/locale</filename></itemt>
<itemd>
<p>
This directory contains message catalogs for internationalization.
</p>
</itemd></item>

<item><itemt><filename>/opt/sw/opt</filename></itemt>
<itemd>
<p>
The <filename>opt</filename> directory stores "add-on" software packages,
which for some reason cannot use the standard <filename>/opt/sw/bin</filename>,
<filename>/opt/sw/lib</filename>, <filename>/opt/sw/include</filename>, etc. 
directories.
A package to be installed in <filename>/opt/sw/opt</filename>
 must locate its static files in a separate 
<filename>/opt/sw/opt/&lt;package&gt;</filename>
 directory tree, where <filename>&lt;package&gt;</filename> 
is a name that describes the software package.
(Available in fink 0.29.7 or later.)
</p>
</itemd></item>

<item><itemt><filename>/opt/sw/var</filename></itemt>
<itemd>
<p>
The <filename>var</filename> directory stores variable data.
This includes spool directories, lock files, state databases, game
high scores and log files.
</p>
</itemd></item>

<item><itemt><filename>/opt/sw/etc</filename></itemt>
<itemd>
<p>
This directory holds configuration files.
For packages that have more than one or two files here a subdirectory
should be made.
The subdirectory must have the name of the package or program in it so
that it is identifiable.
</p>
</itemd></item>

<item><itemt><filename>/opt/sw/src</filename></itemt>
<itemd>
<p>
This directory is for storing and building source code.
Nothing should be installed here by a package.
</p>
</itemd></item>

<item><itemt><filename>/opt/sw/Applications</filename></itemt>
<itemd>
<p>
This directory is for storing OS X-style applications which are
launched by double-clicking rather than from the command line.
</p>
</itemd></item>

<item><itemt><filename>/opt/sw/Library/Frameworks</filename></itemt>
<itemd>
<p>
This directory is for storing OS X-style frameworks, sometimes
used by OS X-style applications.
</p>
</itemd></item>

</itemtable>
</section>


<section name="avoid"><title>Things to Avoid</title>
<p>
No other directories than the ones mentioned above should exist in
<filename>/opt/sw</filename>.
In particular, the following should not be used:
<filename>/opt/sw/man</filename>, <filename>/opt/sw/info</filename>,
<filename>/opt/sw/doc</filename>, <filename>/opt/sw/libexec</filename>,
<filename>/opt/sw/lib/locale</filename>.
</p>
</section>


</chapter>

<chapter filename="compilers">
<title>Compilers</title>
<shorttitle>Compilers</shorttitle>

<preface>
<p>
Fink uses the gcc family of compilers, as provided by Apple computer
through the Apple Developer Connection. Different versions of gcc exist,
and usually more than one is available on a Mac OS X system.
</p><p>
This section explains some of the ways Fink deals with these different versions
of gcc. An email to the Fink mailing list has <link 
url="http://www.mail-archive.com/fink-devel@lists.sourceforge.net/msg11877.html"
>more explanation</link>.
</p>
</preface>

<section name="versions"><title>Compiler Versions</title>
<p>
As GCC has evolved,
there have been different fink "distributions" to cope with the changes.
</p>
<p>
Each Fink distribution has had certain default values for the gcc and g++
compilers, which any user compiling from source is expected to have
installed.  You can expect that direct calls to "gcc" and "g++" from
within your package will use these default values.  If you need to use
a different value (for example, during a transition to a new distribution,
your packages .info file must specify this using the versioned binaries
provided by Apple.  Exactly how you will do this depends on the build
system of your software, but for many packages, the <code>SetCC</code>
and <code>SetCXX</code> fink fields can be used for this purpose.
For example, you might change the g++ compiler to version 3.3 by the setting
<code>SetCXX: g++-3.3</code>.  Examine the output when building your
package to make sure that the correct compiler is being used.
</p><p>
The 10.1 distribution assumes that the compiler version is 2.95; the
10.2 distribution assumes that the compiler version is 3.1; the 10.2-gcc3.3
and 10.3 distributions assume that the compiler version is 3.3.   The compiler
for the 10.4-transitional distribution is complicated: g++-3.3 is being
used along with gcc-4.0.  The 10.4 and 10.5 distributions use both gcc-4.0 
and g++-4.0.  The 10.6 distribution uses gcc-4.2, while the 10.7 through 10.9 
distributions use clang and clang++ as the default compilers.  The 10.9 
distribution has a further change in that it has migrated from libstdc++ to 
libc++.
</p>
<p>A new method for ensuring the correct g++ compiler was introduced with the 
10.4-transitional distribution.  During compilation, a directory
<code>/opt/sw/var/lib/fink/path-prefix-g++-XXX</code> (where XXX is the version
number) is added to the PATH during compilation.  This directory contains
shell scripts which ensure that the correct compiler and version of g++ is used.
</p>

</section>
<section name="abi"><title>The g++ ABI</title>
<p>
The g++ ABI has changed 3 times during the lifetime of OS X: the ABI is
different for versions 2.95, 3.1, 3.3 and 4.0.  These different ABIs
are not compatible with each other, and any libraries which use C++
code and are linked to by your project must be compiled with the same
ABI as the one currently being used.
</p>
<p>
Fink keeps track of the g++ ABI by means of the GCC field.  This field
should be defined for any package which invokes the g++ or c++ compilers.
(It should NOT be defined for packages which don't invoke those compilers.)
Whenever an ABI upgrade occurs, all the dependencies of the packages must
be checked for their own GCC field.  When all of the dependencies have
been upgraded, the package itself may be upgraded.  The versions of the
dependencies must be changed to guarantee that users will have the correct,
updated, dependencies in place before they attempt to build the new version
of your package.
</p>
<p>
A small group of packages which depend only on each other can be left 
at the previous version of the ABI when the distribution changes, if they
are not ready to be upgraded.  When the upgrade is eventually done, they
must be all upgraded together with the correct versioning on all the
packages.  For this reason, it is best to upgrade most packages at
the time the distribution changes.
</p>
<p>
Fink uses the GCC field to ensure that users have the correct version of
the g++ compiler installed.  If the GCC field is defined by the package,
fink checks to see if the value matches that expected for the OS X version.
The correct value is 3.3 for the 10.2 and 10.3 versions of OS X, and 4.0 
for OS X 10.4 through OS X 10.9.
</p>

</section>

</chapter>

<chapter filename="reference">
<title>Reference</title>
<shorttitle>Reference</shorttitle>


<section name="build"><title>The Build Process</title>

<p>To understand some of the fields, you need some knowledge of the
build process Fink uses. It consists of five phases: unpack, patch,
compile, install and build. The example paths below are for an
installation in <filename>/opt/sw</filename> and the package gimp-1.2.1-1.</p>
<p>In the <em>unpack phase</em> the directory <filename>/opt/sw/src/fink.build/gimp-1.2.1-1</filename> is created
and the source tarball(s) are unpacked there. In most cases, this will
create a directory gimp-1.2.1 with the source in it; all following
steps will be executed in that directory
(i.e. <filename>/opt/sw/src/fink.build/gimp-1.2.1-1/gimp-1.2.1</filename>). Details can be controlled with
the SourceDirectory, NoSourceDirectory and Source<em>N</em>ExtractDir
fields.</p>
<p>In the <em>patch phase</em> the source is patched so that it will
build on Darwin. The actions specified by the UpdateConfigGuess,
UpdateLibtool, Patch and PatchScript fields will be executed, in that
order.</p>
<p>In the <em>compile phase</em> the source is configured and
compiled. Usually this means calling the <code>configure</code> script
with some parameters and then issuing a <code>make</code> command. See the
CompileScript field description for details.  If test suites are enabled
for the build (a new feature in fink 0.25, currently achieved by building in
maintainer mode), the TestScript will be run immediately after the
CompileScript.</p>
<p>In the <em>install phase</em> the package is installed to a temporary
directory, <filename>/opt/sw/src/fink.build/root-gimp-1.2.1-1</filename> (= %d). (Note the "root-" part.)
All files that would normally be installed to <filename>/opt/sw</filename> are installed in
<filename>/opt/sw/src/fink.build/root-gimp-1.2.1-1/opt/sw</filename> (= %i = %d%p) instead. See the
InstallScript field description for details.</p>
<p>(<em>Introduced in fink 0.9.9.</em> It is possible to generate several
packages from a single package description using the <code>SplitOff</code>
field.  Towards the end of the install phase, separate install directories
are created for each package being created, and files are moved to
the appropriate directory.)</p>
<p>In the <em>build phase</em> a binary package file (.deb) is built
from the temporary directory. You can't influence this step directly,
but various information from the package description is used to
generate a <filename>control</filename> file for dpkg.</p>
</section>

<section name="fields"><title>Fields</title>

<p>We have divided the list of fields into several categories.
The list of fields is not necessarily complete. <code>:-)</code></p>
<p><em>Initial Data:</em></p>
<itemtable>
<item><itemt>Package</itemt>
<itemd>
<p>
The package name.
May contain lowercase letters, numbers and the special characters '.',
'+' and '-'.
No underscores ('_'), no capital letters.
Required field.
</p>
<p>Percent expansion is applied to this field for %N, %{Ni}, %type_raw[],
and %type_pkg[] only.</p>
<p>
As per Fink packaging policy, a given package must always
compile with the same options enabled. If you have multiple variants
for a package (see documentation for the <code>Type</code> field), you
must encode the specific variant info into the <code>Package</code>
field (see documentation for the %type_pkg[] percent expansion). That
way each variant has a unique name the package name indicates which
variant option(s) are included. Note that use of the %type_pkg[] and
%type_raw[] percent expansions in the <code>Package</code> field is
new and severely incompatible with older versions of fink, so such
package descriptions must be embedded in a <code>InfoN</code> field
with N>=2.
</p>
</itemd></item>

<item><itemt>Version</itemt>
<itemd>
<p>
The upstream version number.
Same limitations as the Package field.
Required field.
</p>
<p>
  Note that some programs use nonstandard version numbering schemes
  that may cause sorting confusion or that contain characters that are
  not allowed in this field. In these situations, when writing the
  Fink package, you must convert the upstream value to one that is
  acceptable and that allows the versions to be arranged in the
  correct order. When in doubt about how version strings will be
  sorted, you can use the <code>dpkg</code> command at a shell
  prompt. For example,
</p>
<codeblock>
  dpkg --compare-versions 1.2.1 lt 1.3 &amp;&amp; echo "true"
</codeblock>
<p>
  will print &quot;true&quot; because version string &quot;1.2.1&quot;
  is less than &quot;1.3&quot;. See the <code>dpkg</code> manpage for
  more details.
</p>
</itemd></item>

<item><itemt>Revision</itemt>
<itemd>
<p>
The package revision.
Increase this when you make a new description for the same upstream
version.
Revision numbers start at 1.
Required field.
</p>
<p>
  Fink's policy is that <em>any</em> time you make a change to the
  <filename>.info</filename> file that results in changes to the
  binary (compiled) form of a package (the <filename>.deb</filename>
  file), you <em>must</em> increase <code>Revision</code>. This
  includes changing the <code>Depends</code> or other package lists,
  and adding,
  removing, or renaming splitoff packages or shifting files among
  them. When migrating a package to a new tree (from 10.2 to 10.3, for
  example) involves such changes, you should
  increase <code>Revision</code> by 10 (or some other large number) in the newer tree in order to
  leave space for future updates to the package in the older
  tree.
</p>
</itemd></item>

<item><itemt>Architecture</itemt>
<itemd>
<p>
A comma-separated list of fink architecture(s) for which the package
(and any splitoff packages) are intended.
As of fink-0.29.5, the valid values for architecture are <code>powerpc</code>,
<code>i386</code>, and <code>x86_64</code>. 
If this field is present and not blank after
conditional handling, fink will ignore the package description(s) if
the local fink architecture is not listed. If the field is omitted
or the value is blank, all architectures are assumed.
</p>
<p>
One common use of this field will be for packages which
require a compiler earlier than gcc-4.0 (or packages which depend on such
packages), which should be declared to have architecture 
<code>powerpc</code>.
</p>
<p>
This field supports the standard conditional syntax for any value in
the value list and percent-expansions can be used (see
the <code>Depends</code> field for more information). In this manner,
certain variants can be restricted to certain architectures. For
example:
</p>
<codeblock>
  Package: foo-pm%type_pkg[perl]
  Type: perl (5.8.8 5.10.0)
  Architecture: (%type_pkg[perl] = 5100) x86_64
</codeblock>
<p>
will result in the field for the foo-pm5100 variant
being <code>x86_64</code> and the field being blank for the foo-pm588
variant. Remember that when the field is blank, all architectures
are permitted.
</p>
<p>
The example above gives a very common use of this field: since
some modules for system-perl 5.10.0 on 10.6 do not build as 32-bit (i386), 
this field allows limiting multiple-type perl packages to specific
systems.
</p>
</itemd></item>

<item><itemt>Distribution</itemt>
<itemd>
<p>
A comma-separated list of distribution(s) for which the package
(and any splitoff packages) are intended.
At present, the only valid values for distribution are
<code>10.4</code>,
<code>10.5</code>,
<code>10.6</code>,
<code>10.7</code>,
<code>10.8</code>,
<code>10.9</code>,
<code>10.10</code>,
<code>10.11</code>,
<code>10.12</code>,
<code>10.13</code>,
<code>10.14</code>,
<code>10.14.5</code>,
and <code>10.15</code>
. If this field is present and not blank after
conditional handling, fink will ignore the package description(s) if
the local machine distribution is not listed. If the field is omitted
or the value is blank, all distributions are assumed.
(Introduced in fink 0.26.0.)
</p>
<p>
Since Fink's <code>10.9</code> through <code>10.14.5</code> distributions share
a common set of finkinfo files, the most common use of this field will be for 
packages which are suitable for one of those distributions but not the
other.
</p>
<p>
This field supports the standard conditional syntax for any value in
the value list and percent-expansions can be used (see
the <code>Depends</code> field for more information). In this manner,
certain variants can be restricted to certain distributions. For
example:
</p>
<codeblock>
  Package: foo-pm%type_pkg[perl]
  Type: perl (5.12.3 5.12.4)
  Distribution: (%type_pkg[perl] = 5123) 10.7, (%type_pkg[perl] = 5123) 10.8
</codeblock>
<p>
will result in the <code>Distribution</code> field for the foo-pm5123 variant
being <code>10.7, 10.8</code> and the field being blank for the 
foo-pm5124 variant.
</p>
<p>Since python 2.5 is not available in the 10.7+ distributions, and the
available perl versions vary by distribution, these package types provide
a common use of this field.  For reference, we note the availabilty of
various perl versions in the 10.3 through 13.0 distributions
(<em>bolded</em> systems indicate system-perl at that version):
</p>
<codeblock>
    perl 5.6.0:  10.3
    perl 5.8.0:  10.3
    perl 5.8.1:  <em>10.3</em>, 10.4
    perl 5.8.4:  10.3, 10.4
    perl 5.8.6:  10.3, <em>10.4</em>, 10.5
    perl 5.8.8:        10.4, <em>10.5</em>, 10.6
    perl 5.10.0:             10.5, <em>10.6</em>
    perl 5.12.3:                         <em>10.7</em>, 10.8, 10.9
    perl 5.12.4:                         10.7, <em>10.8</em>, 10.9
    perl 5.16.2:                         10.7, 10.8, <em>10.9</em>, 10.10, 10.11, 10.12, 10.13
    perl 5.18.2:                         10.7, 10.8, 10.9, <em>10.10</em>, <em>10.11</em>, <em>10.12</em>, <em>10.13</em>, <em>10.14</em>, 10.14.5, 10.15, 11.0, 11.3, 12.0, 13.0, 14.0, 14.4, 15.0
    perl 5.18.4:                                     10.9, 10.10, 10.11, 10.12, 10.13, 10.14, <em>10.14.5</em>, <em>10.15</em>, 11.0, 11.3, 12.0, 13.0, 14.0, 14.4, 15.0
    perl 5.28.2:                                     10.9, 10.10, 10.11, 10.12, 10.13, 10.14, 10.14.5, 10.15, <em>11.0</em>, 11.3, 12.0, 13.0, 14.0, 14.4, 15.0
    perl 5.30.2:                                     10.9, 10.10, 10.11, 10.12, 10.13, 10.14, 10.14.5, 10.15, 11.0, <em>11.3</em>, 12.0, 13.0, 14.0, 14.4, 15.0
    perl 5.30.3:                                     10.9, 10.10, 10.11, 10.12, 10.13, 10.14, 10.14.5, 10.15, 11.0, 11.3, <em>12.0</em>, <em>13.0</em>, <em>14.0</em>, 14.4, 15.0
    perl 5.34.1:                                     10.9, 10.10, 10.11, 10.12, 10.13, 10.14, 10.14.5, 10.15, 11.0, 11.3, 12.0, 13.0, 14.0, <em>14.4</em>, <em>15.0</em>
</codeblock>
<p>A way to include all supported variants in a single finkinfo file is as follows.
</p>
<codeblock>
  Package: foo-pm%type_pkg[perl]
  Type: perl (5.8.8 5.10.0 5.12.3 5.12.4 5.16.2)
  Distribution: &lt;&lt;
   (%type_pkg[perl] = 588) 10.6,
   (%type_pkg[perl] = 5100) 10.6,
   (%type_pkg[perl] = 5123) 10.7, (%type_pkg[perl] = 5123) 10.8, (%type_pkg[perl] = 5123) 10.9,
   (%type_pkg[perl] = 5124) 10.7, (%type_pkg[perl] = 5124) 10.8, (%type_pkg[perl] = 5124) 10.9,
   (%type_pkg[perl] = 5162) 10.7, (%type_pkg[perl] = 5162) 10.8, (%type_pkg[perl] = 5162) 10.9
  &lt;&lt;
</codeblock>
<p>Note that we do not include old
distributions, such as 10.2 or 10.4-transitional, since the versions of
fink which are relevant for them do not recognize this field.
</p>
</itemd></item>

<item><itemt>Epoch</itemt>
<itemd>
<p>
<em>Introduced in fink 0.12.0.</em>
This optional field can be used to specify the epoch of the package
(which defaults to 0 if not specified). For more information refer to
the <link
url="http://www.debian.org/doc/debian-policy/ch-controlfields.html#s-f-Version">Debian
Policy Manual</link>.
Because Fink and some of the underlying Debian tools use
name-version-revision as the unique identifier of a package, you must
not create a package that differs from another solely by its epoch.
</p>
<p>
When used in a version string, the Epoch appears before the Version
value, separated by a colon (1:3.14-2). Note that the Epoch is not part 
of <code>%v</code> (or (<code>%f</code>). If you add an Epoch field to
a package description file, you may have to adjust versioned
dependencies on the packages in it. For example, if you
add <code>Epoch: 1</code> and foo-dev declares <code>Depends:
foo-shlibs (= %v-%r)</code>, you will need to rewrite that
as <code>Depends: foo-shlibs (= %e:%v-%r)</code>.
</p>
</itemd></item>

<item><itemt>Description</itemt>
<itemd>
<p>
A short description of the package (what is it?). This is a one-line
description that will be displayed in lists, so it must be short and
informative. It should be less than 45 chars and must be less than
60. It is not necessary to repeat the package name in this field - it
will always be displayed in proper context. Required field.
</p>
</itemd></item>

<item><itemt>Type</itemt>
<itemd>
<p>
This can be set to <code>bundle</code>.
Bundle packages are used to group a set of related packages together.
They only have dependencies, but no code and no installed files.
The fields Source, PatchScript, CompileScript, InstallScript and
related ones are ignored for bundle packages.
</p>
<p>
<code>nosource</code> is a very similar type.
It indicates that there is no source tarball, so nothing is fetched
and the unpack phase creates just an empty directory.
However, the patch, compile and install phases are executed normally.
This way you can bring in all the code with a patch, or just create
some directories in the InstallScript.
Since fink 0.18.0, you can get the same behavior by setting
<code>Source: none</code>. This allows you to use "Type" for other
purposes (<code>Type: perl</code>, etc.)
</p>
<p>
Since fink 0.9.5 there is type <code>perl</code> which causes
alternate default values for the compile and install scripts to be used. 
Beginning in fink 0.13.0, there is a new variant of this type,
<code>perl $version</code>, where $version is a specific version of perl 
consisting of three numbers separated by periods, e.g., 
<code>perl 5.6.0</code>.
</p>
<p>
Beginning in a CVS version of fink after fink-0.19.2, the language/language-version use has
been generalized to allow any Maintainer-defined types and associated
subtypes and more than a single type for a given package. The type and
subtype are each arbitrary strings of non-whitespace characters (but
parentheses, commas, braces, and percent signs should not be used); no
percent-expansion is performed, and the type (not subtype) values
are converted to all-lowercase.  Multiple type values (each with an
optional whitespace-separated subtype) are specified in a
comma-separated list.
</p>
<p>
In addition, the concept of &quot;variants&quot; exists, where a
single .info file describes a family of related packages with various
options enabled. The key to this whole process is the use of a list of
subtypes. Instead of a single string, one uses a space-separated list
of strings in parentheses. Fink clones the package description file
for each subtype in the list and replaces this list with that single
subtype. For example:
</p>
<codeblock>Type: perl (5.12.3 5.12.4)</codeblock>
<p>
yields two package descriptions, one that behaves as if <code>Type:
perl 5.12.3</code> and the other <code>Type: perl 5.12.4</code>. The special
subtype list &quot;(boolean)&quot; stands for a list containing the
type itself and a period, so the following two forms are identical:
</p>
<codeblock>
Type: -x11 (boolean)
Type: -x11 (-x11 .)
</codeblock>
<p>
Subtype list expansion/package cloning is recursive; if there are
multiple types with subtype lists, you will get all combinations:
</p>
<codeblock>Type: -ssl (boolean), perl (5.12.3 5.12.4)</codeblock>
<p>
One can access the specific variant subtype in other fields using the
%type_raw[] and %type_pkg[] pseudo-hashes. Here are two example .info
fragments:
</p>
<codeblock>
Info2: &lt;&lt;
Package: foo-pm%type_pkg[perl]
Type: perl (5.12.3 5.12.4)
Depends: perl%type_pkg[perl]-core
 &lt;&lt;
</codeblock>
<codeblock>
Info2: &lt;&lt;
Package: bar%type_pkg[-x11]
Type: -x11 (boolean)
Depends: (%type_raw[-x11] = -x11) x11
CompileScript:  &lt;&lt;
  #!/bin/bash -ev
  if [ &quot;%type_raw[-x11]&quot; == &quot;-x11&quot; ]; then
    ./configure %c --with-x11
  else
    ./configure %c --without-x11
  fi
  make
&lt;&lt;
&lt;&lt;
</codeblock>
<p>
Starting in fink 0.26.0, there is a special <code>Type: -64bit</code>
which controls a new percent expansion <code>%lib</code> and also
changes the default value of <code>LDFLAGS</code>.  When combined
with the new construction %type_num[], this allows a single .info file
to build both a 32-bit version of a library and a 64-bit version.
Here's some sample code:
</p>
<codeblock>
Info2: &lt;&lt;
Package: foo%type_pkg[-64bit]
Type: -64bit (boolean)
Depends: (%type_raw[-64bit] = -64bit) 64bit-cpu
ConfigureParams: --libdir='${prefix}/%lib'
SplitOff: &lt;&lt;
 Package: %N-shlibs
 Files: %lib/libfoo.*.dylib
 Shlibs: &lt;&lt;
    %p/%lib/libfoo.1.dylib 1.0.0 %n (>= 1.0-1) %type_num[-64bit]
  &lt;&lt;
&lt;&lt;
&lt;&lt;
</codeblock>
<p>Note that <code>Type: -64bit</code> is generally not appropriate for
the x86_64 architecture, since in that case
libraries are being built 64-bit by default
and stored in <filename>%i/lib</filename>.
</p>

</itemd></item>

<item><itemt>License</itemt>
<itemd>
<p>
This field gives the nature of the license under which the package is
distributed.
The value must be one of the values described in <xref
chapter="policy" section="licenses">Package Licenses</xref> earlier in
this document.
Additionally, this field must only be given if the package actually
complies to the packaging policy in these respects, i.e. a copy of the
license is installed in the doc directory for the package.
</p>
</itemd></item>

<item><itemt>Maintainer</itemt>
<itemd>
<p>
The name and e-mail address of the person responsible for the package.
This field is required, and there must be exactly one name and address
in the following format:
</p>
<codeblock>Firstname Lastname &lt;user@host.domain.com&gt;</codeblock>
</itemd></item>

<item><itemt>InfoN</itemt>
<itemd>
<p>
This field allows fink to implement backward-incompatible syntax
changes in package description files. A given version of fink is
configured with the maximum integer "N" that it can handle. Any
package in a higher InfoN field will be ignored, so this mechanism
should only be used when necessary, lest people with older versions of
fink be needlessly alienated. To use this mechanism, embed
the entire package description in the desired InfoN field. See the
"File Format" section earlier in this document for a description of
the syntax for multiline fields.
Here are the features added for each InfoN level, along with the
earliest version of fink that supports it:
</p>
<ul>
<li>
<code>Info2</code> (fink>=0.20.0): Ability to use percent-expansions
in the main <code>Package</code> field of the .info file and the
ability to use the <code>%type_*</code> percent-expansions in
the <code>Package</code> field of <code>SplitOff</code>
(and <code>SplitOff<em>N</em></code>) packages.
</li>
<li>
<code>Info3</code> (fink>=0.25.0): Can indent nicely in .info files,
no more support for RFC-822 multi-lines, and can put comments in
pkglist fields.
</li>
<li>
<code>Info4</code> (fink>=0.26.2): adds %V expansion, and permits
<code>%lib</code> in <code>ConfigureParams</code> field.
</li>
</ul>
</itemd></item>

</itemtable>
<p><em>Dependencies:</em></p>
<itemtable>

<item><itemt>Depends</itemt>
<itemd>
<p>
A list of packages which must be installed before this package can be
built. Percent expansion is performed on this field (as well as the
other package list fields in this section: BuildDepends, RuntimeDepends, 
Provides, Conflicts, Replaces, Recommends, Suggests, and Enhances.
Usually, this is just a comma-separated list for plain package names,
but Fink now supports alternatives and version clauses with the same
syntax as dpkg.
A fully featured example:
</p>
<codeblock>Depends: &lt;&lt;
	daemonic (&gt;= 20010902-1),
	emacs | xemacs
&lt;&lt;</codeblock>
<p>
The layout above is the preferred format for the <code>Depends</code>
and similar fields. The field uses the multi-line field declarators
<code>&lt;&lt;</code> and each package is placed in alphabetical order
on its own indented line. If the field only has a single entry, the
simplified <code>Field: value</code> format may be used.
</p>
<p>
Note that there is no way to express real optional dependencies.
If a package works both with and without another package, you must
either make sure that the other package is not used even when it is
present or add it to the Depends field.
If you want to offer the user both options, make two separate
packages, e.g. wget and wget-ssl.
</p><p>
Order of operations: logical &quot;OR&quot; (list of alternatives) has
a higher precedence (binds more tightly) than the logical
&quot;AND&quot; between each package (or set of alternatives) in the
comma-separated list. Unlike the use of parentheses in arithmetic,
there is no way to specify alternative groups of packages or otherwise
change the order of operations in <code>Depends</code> and related
fields.
</p><p>
Starting with a post-0.18.2 CVS version of fink, you can have
conditional dependencies. These are specified by placing
<code>(string1 op string2)</code> before a package name. Percent
expansion is performed as usual and then the two strings
(neither of which can be null) are compared
according to the <code>op</code> operator: &lt;&lt;, &lt;=, =, !=,
&gt;&gt;, &gt;=. The immediately-following package is only considered
as a dependency if the comparison is true.
</p><p>
You can use this format to simplify maintaining several similar
packages. For example, the packages elinks and elinks-ssl could both list:
</p>
<codeblock>Depends: &lt;&lt;
	expat-shlibs,
	(%n = elinks-ssl) openssl097-shlibs
&lt;&lt;</codeblock>
<p>
would have the same effect as having elinks list:
</p>
<codeblock>Depends: expat-shlibs</codeblock>
<p>
and elinks-ssl list:
</p>
<codeblock>Depends: expat-shlibs, openssl097-shlibs</codeblock>
<p>
As an alternative syntax, you can also specify <code>(string)</code>,
which is &quot;true&quot; if <code>string</code> is non-null. For example:
</p>
<codeblock>
Package: nethack%type_pkg[-x11]
Type: -x11 (boolean)
Depends: (%type_pkg[-x11]) x11
</codeblock>
<p>
would set the package x11 as a dependency for the nethack-x11 variant
but not for the nethack variant.
</p>
<p>
  Note that when using Depends/BuildDepends for shared library packages
  for which more than one major-version is available, you must
  <em>not</em> do the following:
</p>
<codeblock>
  Package: foo
  Depends: id3lib3.7-shlibs | id3lib4-shlibs
  BuildDepends: id3lib3.7-dev | id3lib4-dev
</codeblock>
<p>
  even if your package could work with either library. Pick one
  (preferably the highest version that can be used successfully) and
  use it consistently in your package.
</p>
<p>
  As explained in the <xref chapter="policy"
  section="sharedlibs">Shared Library Policy</xref>, only one of the
  -dev packages can be installed at a time, and each has links of the
  same name that could point to different filenames in the associated
  -shlibs package. When compiling package foo, the actual filename (in
  the -shlibs package) gets hard-coded into the foo binary. That means
  the resulting package needs the specific -shlibs package associated
  with the -dev that was installed at compile-time. As a result, one
  cannot have a <code>Depends</code> that indicates that either one
  will suffice.
</p>
<p>
In the past, non-essential packages implicitly depended on the
essential ones; this is no longer true.
</p>
</itemd></item>

<item><itemt>BuildDepends</itemt>
<itemd>
<p>
<em>Introduced in fink 0.9.0.</em>
A list of dependencies that is applied at build time only.
This can be used to list tools (e.g. flex) that must be present to
build the package, but which are not used at run time.
Supports the same syntax as Depends.  If a build is being done
with test suites enabled, the dependencies in the <code>TestDepends</code>
field will be added to this list.
</p>
</itemd></item>

<item><itemt>RuntimeDepends</itemt>
<itemd>
<p>
<em>Introduced in fink 0.32.0.</em>
A list of dependencies that is applied at run time only,
that is, when the package is being installed.
This can be used to list packages that must be present to
run the package, but which are not used at build time.
Supports the same syntax as Depends.
</p>
</itemd></item>

<item><itemt>Provides</itemt>
<itemd>
<p>
A comma-separated list of package names that this package is
considered to "provide".
If a package named "pine" specifies <code>Provides: mailer</code>,
then any dependency on "mailer" is considered satisfied when "pine" is
installed.
You'll usually also want to name these packages in the "Conflicts" and
the "Replaces" field.
</p>
<p>
Note that there is no versioning data associated with Provides
items. They do not inherit from the parent package that contains the
Provides list nor is there a syntax for specifying an arbitrary version
in the Provides field itself. Further, a dependency that contains a
version specification is not satisfied by a package that Provides that
needed package name. As a result, having many variants provide a common surrogate package may be harmful, because it precludes the use of versioned dependencies. For example, if foo-gnome and foo-nognome both have "Provides: foo", another package with "Depends: foo (> 1.1)" will not work.
</p>
</itemd></item>

<item><itemt>Conflicts</itemt>
<itemd>
<p>
A comma-separated list of package names that must not be installed at
the same time as this package.
For virtual packages it is allowed to list the names of the provided
packages here; they will be handled appropriately.
This fields also supports versioned dependencies like the Depends
field, but not alternatives (wouldn't make sense).
If a package is listed in its own Conflicts, it will be (silently)
removed from that list. (Introduced in a post-0.18.2 CVS version of
fink.)
</p>
<p>
<em>Note:</em> Fink itself currently ignores this field.
However, it is passed on to dpkg and will be handled accordingly.
In summary, it only effects run-time, not build-time.
</p>
</itemd></item>

<item><itemt>BuildConflicts</itemt>
<itemd>
<p>
A list of packages that must not be installed while this package is
being compiled. This can be used to prevent <code>./configure</code>
or the compiler from seeing undesired library headers or to avoid use
of a version of a tool that is known to be broken (for example, a bug
in a certain version of sed).  If a build is being done
with test suites enabled, the packages in the <code>TestConflicts</code>
field will be added to this list.
</p>
</itemd></item>

<item><itemt>Replaces</itemt>
<itemd>
<p>
This is used together with "Conflicts", when this package not only
takes over the function of the conflicting package, but also has some
common files.
Without this field, dpkg may generate errors when installing the
package because files are still owned by the other package.
It is also a hint that the two packages involved are genuine
alternatives and one can be removed in favor of the other.
If a package is listed in its own Replaces, it will be (silently)
removed from that list. (Introduced in a post-0.18.2 CVS version of
fink.)
</p>
<p>
<em>Note:</em> Fink itself currently ignores this field.
However, it is passed on to dpkg and will be handled accordingly.
In summary, it only effects run-time, not build-time.
</p>
</itemd></item>

<item><itemt>Recommends, Suggests, Enhances</itemt>
<itemd>
<p>
These fields specify additional package relations in the same style as
the other dependency fields.
These three relations don't affect actual installation via
<code>dpkg</code> or <code>apt-get</code>.
However, they are used by <code>dselect</code> and other frontends to
help the user make sensible choices.
</p>
</itemd></item>

<item><itemt>Pre-Depends</itemt>
<itemd>
<p>
A special variation of the Depends field with more strict semantics.
This field must only be used after the case has been discussed on the
developer mailing list and a consensus has been reached that it is
necessary.
</p>
</itemd></item>

<item><itemt>Essential</itemt>
<itemd>
<p>
A boolean value that denotes essential packages. Essential
packages are installed as part of the bootstrap process. <code>dpkg</code>
will refuse to remove essential packages from the system unless
special flags are used to override this.
In the past, non-essential packages implicitly depended on the
essential ones; this is no longer true.
</p>
</itemd></item>

<item><itemt>BuildDependsOnly</itemt>
<itemd>
<p>
<em>Introduced in fink 0.9.9.</em>
A boolean value which indicates that no other packages should Depend on
this one, they should only BuildDepend.
Unlike usual boolean fields, <code>BuildDependsOnly</code> is
tri-state: leaving it undefined (not specifying it at all) is
different than defining it as logically false. See the <xref
chapter="policy" section="sharedlibs">Shared Library Policy</xref> for
more information.
</p>
<p>As of fink 0.20.5, the presence or absence of this field, and its value
if present, are recorded into the .deb
file when the package is built.  Therefore, <em>if you change the value of
BuildDependsOnly or if you add or remove it,
you must increase the revision number</em> of the package.
</p>
</itemd></item>

</itemtable>
<p><em>Unpack Phase:</em></p>
<itemtable>

<item><itemt>CustomMirror</itemt>
<itemd>
<p>
A list of mirror sites. Each mirror site appears on a separate line,
in the following format: <code>&lt;location&gt;: &lt;url&gt;</code>.
<em>location</em> can be a continent code (e.g. <code>nam</code>), a
country code (e.g. <code>nam-us</code>), or anything else;
mirrors are tried in that order.
Example:
</p>
<codeblock>CustomMirror: &lt;&lt;
nam-US: ftp://ftp.fooquux.com/pub/bar
asi-JP: ftp://ftp.qiixbar.jp/pub/mirror/bar
eur-DE: ftp://ftp.barfoo.de/bar
Primary: ftp://ftp.barbarorg/pub/
&lt;&lt;</codeblock>
<p>
  The standard continent and country codes are listed in
  <filename>/opt/sw/lib/fink/mirror/_keys</filename>, which is part of the
  fink or fink-mirrors package.
</p>
</itemd></item>

<item><itemt>Source</itemt>
<itemd>
<p>
An URL to the source tarball. It should be a HTTP or FTP URL, but
Fink doesn't really care - it just passes the URL to wget. This field
supports a special URL scheme for mirrors:
<code>mirror:&lt;mirror-name&gt;:&lt;relative-path&gt;</code>. This will
look up the mirror setting for <em>mirror-name</em> in Fink's
configuration, append the <em>relative-path</em> part and use that as
the actual URL. The known <em>mirror-name</em>s are listed in
<filename>/opt/sw/lib/fink/mirror/_list</filename>, which is part of the fink or fink-mirrors
package. Alternatively, using <code>custom</code> as the
<em>mirror-name</em> will cause Fink to use the <code>CustomMirror</code>
field.
Before the URL is used, percent expansion takes place. Remember that
%n includes all %type_ variant data, so you may want to use %{ni} here
(perhaps with some specific %type_ expansions).
</p>
<p>
Since fink 0.18.0, <code>Source: none</code> has the special meaning
that there is no source to fetch. See the description of the
<code>Type</code> field for more information.
The value <code>gnu</code> is a shorthand for
<code>mirror:gnu:%n/%n-%v.tar.gz</code>; <code>gnome</code> is a shorthand for
<code>mirror:gnome:stable/sources/%n/%n-%v.tar.gz</code>. The
default is <code>%n-%v.tar.gz</code> (i.e. a manual
download).
This implicitly-defined <code>Source</code> form is deprecated
(explicitly-stated simple filename/manual download is still okay).
</p><p>
Sources that are only needed in order to run test suites should
use <code>TestSource</code> and related fields, inside the
<code>InfoTest</code> block.
</p>
</itemd></item>

<item><itemt>Source<em>N</em></itemt>
<itemd>
<p>
If a package consists of several tarballs, name them with these
additional fields, starting with N = 2. So, the first tarball (which
should be some kind of "main" tarball) goes into <code>Source</code>, the
second tarball in <code>Source2</code> and so on. The rules are the same
as for Source, only that the "gnu" and "gnome" shortcuts are not
expanded - that would be useless anyway. Starting with a CVS version
of fink after 0.19.2, you may use arbitrary (not necessarily
consecutive) integer values of N >= 2. However, you still may not have
duplicates.
</p>
</itemd></item>

<item><itemt>SourceDirectory</itemt>
<itemd>
<p>
Must be used when the tarball expands to a single directory, but
the directory's name is different from the basename of the tarball.
Usually, a tarball named "foo-1.0.tar.gz" will produce a directory
named "foo-1.0". If it produces a directory with a different name,
specify it with this parameter. Percent expansion is performed on this
field.
</p>
</itemd></item>

<item><itemt>NoSourceDirectory</itemt>
<itemd>
<p>
Set this boolean parameter to a true value if the tarball does not
expand to a single directory. Usually, a tarball named "foo-1.0.tar.gz"
will produce a directory named "foo-1.0". If it just unpacks the files
to the current directory, use this parameter and set it to a boolean
true value.
</p>
</itemd></item>

<item><itemt>Source<em>N</em>ExtractDir</itemt>
<itemd>
<p>
Normally, an auxiliary tarball will be extracted in the same
directory as the main tarball. If you need to extract it in a
specific subdirectory instead, use this field to specify
it. Source2ExtractDir corresponds to the Source2 tarball, as one would
expect. See ghostscript, vim and tetex for examples of usage.
</p>
</itemd></item>

<item><itemt>SourceRename</itemt>
<itemd>
<p>
This field can rename a source tarball on the fly. This is useful
if for example the version of the source is encoded in the directory name on
the server, but the tarball itself has the same name for all versions, e.g.
<filename>http://www.foobar.org/coolapp/1.2.3/source.tar.gz</filename>. To circumvent the problems
caused by this, you would then use something like
</p>
<codeblock>SourceRename: %n-%v.tar.gz</codeblock>
<p>
In the above example this would result in the tarball being stored under
<filename>/opt/sw/src/coolapp-1.2.3.tar.gz</filename> as one would expect.
</p>
</itemd></item>

<item><itemt>Source<em>N</em>Rename</itemt>
<itemd>
<p>
This is just the same as the <code>SourceRename</code> field, except that it
is used to rename the tarball specified by the corresponding <code>Source<em>N</em></code>
field. See context or hyperref for examples of usage.
</p>
</itemd></item>

<item><itemt>Source-MD5</itemt>
<itemd>
<p>
<em>Introduced in fink 0.10.0.</em>
With this field you can specify the MD5 checksum of the source file. This
information is then used by Fink to detect incorrect source files, that is,
tarballs not matching the one the package creator used. Common causes for this
problem include: incompletely downloaded tarballs; upstream maintainers silently
replaced a tarball; a trojan or similar attacks; and so on.
</p>
<p>
A typical usage example looks like this:
</p>
<codeblock>Source-MD5: 4499443fa1d604243467afe64522abac</codeblock>
<p>
To compute the checksum, the <code>md5sum</code> tool is used. If you want to
determine the checksum of the tarball <filename>/opt/sw/src/apache_1.3.23.tar.gz</filename>,
you run the following command (displayed with output here):
</p>
<codeblock>fingolfin% md5sum /opt/sw/src/apache_1.3.23.tar.gz 
4499443fa1d604243467afe64522abac  /opt/sw/src/apache_1.3.23.tar.gz</codeblock>
<p>
As you can see, the value to the left is exactly the value you need.
</p>
</itemd></item>

<item><itemt>Source<em>N</em>-MD5</itemt>
<itemd>
<p>
<em>Introduced in fink 0.10.0.</em>
This is just the same as the <code>Source-MD5</code> field, except that it
is used to specify the MD5 checksum of the tarball specified by the
corresponding <code>Source<em>N</em></code> field.
</p>
</itemd></item>

<item><itemt>Source-Checksum</itemt>
<itemd>
<p>
Alternative method to list the checksum for a source file. This field
takes a hash type, followed by the actual checksum. For example:
</p>
<codeblock>Source-Checksum: SHA256(5048f1c8fc509cc636c2f97f4b40c293338b6041a5652082d5ee2cf54b530c56)</codeblock>
<p>
Current valid checksums are <code>MD5</code>, <code>SHA1</code>, and
<code>SHA256</code>. The <code>shasum</code> tool can be used to
calculate SHA checksums:</p>
<codeblock>$ shasum -a 256 /opt/sw/src/libexif-0.6.22.tar.xz 
5048f1c8fc509cc636c2f97f4b40c293338b6041a5652082d5ee2cf54b530c56  /opt/sw/src/libexif-0.6.22.tar.xz
</codeblock>
<p>
The <code>Source-Checksum</code> field should only be used once per
.info file. If both the <code>Source-MD5</code> and
<code>Source-Checksum</code> fields are present,
<code>Source-Checksum</code> takes precedence.
</p>
</itemd></item>

<item><itemt>Source<em>N</em>-Checksum</itemt>
<itemd>
<p>
This is just the same as the <code>Source-Checksum</code> field, except that it
is used to specify the checksum of the tarball specified by the
corresponding <code>Source<em>N</em></code> field.
</p>
</itemd></item>

<item><itemt>TarFilesRename</itemt>
<itemd>
<p>
<em>Introduced in fink 0.10.0.</em>
This field only applies to source files that are using the tar format
</p>
<p>
With this field you can rename files in the given source tarball during
the extraction of the tarball. This is very useful to work around
the fact that the HFS+ file system is not case sensitive, as files like
<filename>install</filename> and <filename>INSTALL</filename> will
collide on a standard Mac OS X system. With this field you can avoid
these issues without having to repackage the tarball (as was done in
the past in such cases).
</p>
<p>
In this field you simply specify a list of files that are to be renamed. You
can make use of wildcards. By default any given file will be renamed to its
current name with <code>_tmp</code> appended. You can override this default
by using the same syntax as in the <code>Files</code> and <code>DocFiles</code>
fields, namely by writing the old filename followed by a : and then followed by
the new filename.
Example:
</p>
<codeblock>TarFilesRename: foo bar.* qux:quux
Tar2FilesRename: directory/INSTALL:directory/INSTALL.txt</codeblock>
</itemd></item>

<item><itemt>Tar<em>N</em>FilesRename</itemt>
<itemd>
<p>
<em>Introduced in fink 0.10.0.</em>
This is just the same as the <code>TarFilesRename</code> field, except that it
is used for the tarball specified by the corresponding
<code>Source<em>N</em></code> field.
</p>
</itemd></item>

</itemtable>

<!-- Patch Phase -->
<p><em>Patch Phase:</em></p>
<itemtable>

<item><itemt>UpdateConfigGuess</itemt>
<itemd>
<p>
A boolean value. If true, the files config.guess and config.sub
in the build directory will be replaced with versions that know about
Darwin. This happens in the patch phase and before the PatchScript
is run. <em>Only</em> use this when you know it is necessary,
i.e. when the configure script fails with a "unknown host"
message.
</p>
</itemd></item>

<item><itemt>UpdateConfigGuessInDirs</itemt>
<itemd>
<p>
<em>Introduced in a post-0.9.0 CVS version.</em>
A list of subdirectories.
This does the same as UpdateConfigGuess, but is useful for packages
that have outdated config.guess files in several directories
throughout the source tree.
Previously you had to copy/move the files there manually in the
PatchScript.
With this new field you can just list the directories.
Use <code>.</code> to update files in the build directory itself.
</p>
</itemd></item>

<item><itemt>UpdateLibtool</itemt>
<itemd>
<p>
A boolean value. If true, the files ltconfig and ltmain.sh in the
build directory will be replaced with versions that know about
Darwin. This happens in the patch phase and before the PatchScript
is run. <em>Only</em> use this when you know that the package needs
it. Some packages can be broken by overwriting the libtool scripts
with mismatching versions. See the <link
url="/doc/porting/libtool.php">libtool
page</link> for further information.
</p>
</itemd></item>

<item><itemt>UpdateLibtoolInDirs</itemt>
<itemd>
<p>
<em>Introduced in a post-0.9.0 CVS version.</em>
A list of subdirectories.
This does the same as UpdateLibtool, but is useful for packages
that have outdated libtool 1.3.x scripts in several directories
throughout the source tree.
Previously you had to copy/move the files there manually in the
PatchScript.
With this new field you can just list the directories.
Use <code>.</code> to update files in the build directory itself.
</p>
</itemd></item>

<item><itemt>UpdatePoMakefile</itemt>
<itemd>
<p>
A boolean value.
If true, the file <filename>Makefile.in.in</filename> in the
subdirectory <filename>po</filename> is replaced with a patched version.
This happens in the patch phase and before the PatchScript is run.
</p>
<p>
The patched version respects DESTDIR and makes sure that message
catalogs end up in <filename>/opt/sw/share/locale</filename>, not
<filename>/opt/sw/lib/locale</filename>.
Before using this field, make sure that you won't break the package
and that it's really required.
You can run <code>diff</code> to find the differences between the
package's version and Fink's version (in
<filename>/opt/sw/lib/fink/update</filename>).
</p>
</itemd></item>

<item><itemt>Patch</itemt>
<itemd>
<p>
The filename of a patch to be applied with <code>patch -p1
&lt;<em>patch-file</em></code>. This should be just a filename; the
appropriate path (the same directory where the <code>.info</code> file
is located) will be prepended automatically. Percent expansion is
performed on this field, so a typical value is simply
<code>%f.patch</code> or <code>%n.patch</code>. The patch is applied
in a separate step before the PatchScript is run (if any).
</p>
<p>
Remember that %n includes all %type_ variant data, so you may want to
use %{ni} here (perhaps with some specific %type_ expansions). It's
easier to maintain a single patchfile and then make variant-specific
changes in <code>PatchScript</code> than to have a separate patchfile
for each variant.
</p>
<p>
As of fink-0.29.0, this field should not be used.
Use <code>PatchFile</code> instead. Support for <code>Patch</code>
will be removed in the future.
</p>


</itemd></item>

<item><itemt>PatchFile</itemt>
<itemd>
<p>
The same syntax as the <code>Patch</code> field. The full path to this
file is available using the <code>%{PatchFile}</code> percent
expansion--do not use <code>%a</code> to access this file.
Unlike <code>Patch</code>, <code>PatchFile</code> is applied as part
of <code>PatchScript</code>. Fink checks that the listed file exists,
is readable, and that its checksum matches
the <code>PatchFile-MD5</code> field.
</p>
<p>
You may not use both <code>Patch</code> and <code>PatchFile</code> in
the same package description. Any package that
uses <code>PatchFile</code> must declare at least
<code>BuildDepends: fink (>= 0.24.12)</code>. Giving a higher version
requirement is allowed if it is necessary for other reasons.
</p>
</itemd></item>

<item><itemt>PatchFile<em>N</em></itemt>
<itemd>
<p>
If a package has several patch files, name them with these additional 
fields, starting with N = 2. So, the first patch file goes into 
<code>PatchFile</code>, the second patch file in <code>PatchFile2</code> 
and so on.  Any package that uses <code>PatchFile<em>N</em></code> must 
declare at least <code>BuildDepends: fink (&gt;= 0.30.0)</code>. Giving 
a higher version requirement is allowed if it is necessary for other 
reasons.
</p>
</itemd></item>

<item><itemt>PatchFile-MD5</itemt>
<itemd>
<p>
The MD5 checksum of the file given in the <code>PatchFile</code>
field. This field is required if <code>PatchFile</code> is used.
(Introduced in fink-0.24.12)
</p>
</itemd></item>

<item><itemt>PatchFile<em>N</em>-MD5</itemt>
<itemd>
<p>
The MD5 checksum of the file given in the <code>PatchFile<em>N</em></code>
field. This field is required if <code>PatchFile<em>N</em></code> is used.
(Introduced in fink-0.30.0)
</p>
</itemd></item>

<item><itemt>PatchScript</itemt>
<itemd>
<p>
A list of commands that are run in the patch phase. This is the place
to put commands that patch or otherwise modify the package source. See
the <xref chapter="reference" section="scripts">note on scripts</xref>
below. Before the commands are executed, <xref chapter="format"
section="percent">percent expansion</xref> takes place. If
a <code>PatchFile</code> field exists, the
default <code>PatchScript</code> is:
</p>
<codeblock>
patch -p1 &lt; %{PatchFile}
</codeblock>
<p>
If one or more <code>PatchFile<em>N</em></code> fields are used, the 
following is appended as needed to the default script:
</p>
<codeblock>
patch -p1 &lt; %{PatchFile<em>N</em>}
</codeblock>
<p>
If there is no <code>PatchFile</code>, the default is blank. If you
have an explicit <code>PatchScript</code>, you must apply
the <code>PatchFile(s)</code> explicitly.
</p>
</itemd></item>

</itemtable>
<p><em>Compile Phase:</em></p>
<!--
insert DefaultScript here ?
-->

<itemtable>

<item><itemt>Set<em>ENVVAR</em></itemt>
<itemd>
<p>
Causes certain environment variables to be set in the
compile and install phases. This can be used to pass compiler flags
etc. to configure scripts and Makefiles. Currently supported variables
are:
CC, CFLAGS, CPP, CPPFLAGS, CXX, CXXFLAGS, DYLD_LIBRARY_PATH, JAVA_HOME,
LD, LDFLAGS, LIBRARY_PATH, LIBS, MACOSX_DEPLOYMENT_TARGET, MAKE, 
MFLAGS, MAKEFLAGS.
The value you specify is subject to the
percent expansion described in the last section. A common example:
</p>
<codeblock>SetLDFLAGS: -Wl,-strip_dead_dylibs</codeblock>
<p>
Some environment variables have default preset values.
If you specify a value for one of these, it will be
prepended to the default value.
The preset variables (and their default values) are:
</p>
<codeblock>
CPPFLAGS: -I%p/include
LDFLAGS: -L%p/lib
</codeblock>
<p> Starting in fink 0.26.0, there is one exception to these defaults:
if <code>Type: -64bit</code> is set to <code>-64bit</code>, then the
default value of <code>LDFLAGS</code> is <code>-L%p/%lib -L%p/lib</code> 
instead.
</p>
<p>
Finally, MACOSX_DEPLOYMENT_TARGET is set to a default value depending
on which version of OSX is being run, but setting a value for it for 
a package will override (rather than prepend to) the default value.
</p>

</itemd></item>

<item><itemt>NoSet<em>ENVVAR</em></itemt>
<itemd>
<p>
When set to a true value, deactivates the default values for the preset
variables (such as
CPPFLAGS, LDFLAGS, CXXFLAGS  mentioned above). For 
example, if you want LDFLAGS to
remain unset, specify <code>NoSetLDFLAGS: true</code> .
</p>
</itemd></item>
<item><itemt>UseMaxBuildJobs</itemt>
<itemd>
<p>
When set to a true value, appends <code>-j<em>N</em></code>, where <em>N</em> 
is the value from the <filename>fink.conf</filename> field MaxBuildJobs, 
to the environment variable MAKEFLAGS during CompileScript and TestScript. 
This value is added to MAKEFLAGS even if the field <code>NoSetMAKEFLAGS: 
true</code> is used. As of fink > 0.31.2, if the field is not present or 
blank, the default is <code>True</code>.
</p>
</itemd></item>

<item><itemt>BuildAsNobody</itemt>
<itemd>
<p>
In fink &gt;= 0.33.0, when set to a <code>false</code> value, causes fink
to build as <code>root</code> rather than as the underprivileged <code>fink-bld</code> user.
If this field is not present, its value defaults to <code>true</code>, indicating
that the package should be built as <code>fink-bld</code>.
</p>
<p>In earlier fink versions, this field does nothing.</p>
</itemd></item>

<item><itemt>ConfigureParams</itemt>
<itemd>
<p>
Additional parameters to pass to the configure script. (See
CompileScript for details.)  
For packages not of <code>Type: Perl</code>, the parameter
<code>--prefix=%p</code> is prepended to this value.
As of fink > 0.13.7, this field will also work with perl modules
<code>Type: Perl</code>; the default perl Makefile.PL
string is prepended to the value supplied for <code>ConfigureParams</code>.
</p><p>
If a build is being done
with test suites enabled, the value of the <code>TestConfigureParams</code>
field will be appended to the normal <code>ConfigureParams</code> value.

</p>
<p>
  Starting in fink-0.22.0, this field supports conditionals. The
  syntax is the same as that used in the <code>Depends</code> and
  other package-list fields. The conditional expression only applies
  to the whitespace-delimited &quot;word&quot; immediately following
  it. For example
</p>
<codeblock>
Type: -x11 (boolean)
ConfigureParams: --mandir=%p/share/man (%type_pkg[-x11]) --with-x11 --disable-shared
</codeblock>
<p>
  will always pass the <code>--mandir</code> and <code>--disable-shared</code> flags, but only pass <code>--with-x11</code> in the -x11 variant.
</p>
<p>
This field supports placing parameters into multiple lines using multi-line field declarators. The field is handled as a shell command line and uses <code>\</code> to separate lines:
</p>
<codeblock>
ConfigureParams: &lt;&lt;
	--mandir=%p/share/man \
	(%type_pkg[-x11]) --with-x11 \
	--disable-shared
&lt;&lt;
</codeblock>
<p>
Note: do not place conditional parameters as the last line when using the multi-line field format. In instances when the conditional evaluates as false, the parameter immediately following is not evaluated and this breaks the shell.
</p>
</itemd></item>

<item><itemt>GCC</itemt>
<itemd>
<p>
This field specifies the GCC-ABI used by C++ code in this package.
(It is needed because that ABI has changed twice, and any libraries
which you link to containing C++ code must be compiled with the same ABI
you are currently using.)
</p><p>
The allowed values are:
<code>2.95.2</code> (or <code>2.95</code>),
 <code>3.1</code>,
 <code>3.3</code>,
and <code>4.0</code>.
Our understanding is that the GCC authors intend to stabilize the GCC-ABI
at some point; we can hope that it won't change again.
</p><p>
The GCC field does not have a default value, per se, since it is ignored
if it is not set.  However, for each tree, there is an expected value
for GCC corresponding to the default g++ compiler for that tree.
The expected values for the various package trees are:
<code>2.95</code> in the 10.1 tree, <code>3.1</code> in the 10.2 tree,
 <code>3.3</code> in the 10.2-gcc3.3, 10.3, and 10.4-transitional
trees, and <code>4.0</code> in the 10.4 and 10.7 trees.
</p><p>
Note that when the GCC value is different from the expected value, the compiler
must be specified within the package (typically by setting the CC or CXX
flags), and a dependency on one of the (virtual) gcc packages should be
specified.
</p>
<p>As of fink 0.13.8, when this flag is present, the version of gcc
is tested using <code>gcc_select</code>, and fink exits with an error
if the wrong version is present.
</p>
<p>
This field was added to fink to aid maintainers
in tracking the transition between the gcc
compilers, which introduced a binary incompatibility between libraries
that involve C++ code which is not reflected in the versioning
scheme.
</p>
</itemd></item>

<item><itemt>CompileScript</itemt>
<itemd>
<p>
A list of commands that are run in the compile phase. This is the
place to put commands that configure and compile the package. See
the <xref chapter="reference" section="scripts">note on scripts</xref>
below. Before the commands are executed, <xref chapter="format"
section="percent">percent expansion</xref> takes place. Normally the
default is:
</p>
<codeblock>./configure %c
make</codeblock>
<p>
This is appropriate for packages that use GNU autoconf.
For packages with of type perl (as specified via the Type field)
with the perl version not specified,
the default instead (as of fink 0.13.4) is:
</p>
<codeblock>perl Makefile.PL PREFIX=%p \
 INSTALLPRIVLIB=%p/lib/perl5 \
 INSTALLARCHLIB=%p/lib/perl5/darwin \
 INSTALLSITELIB=%p/lib/perl5 \
 INSTALLSITEARCH=%p/lib/perl5/darwin \
 INSTALLMAN1DIR=%p/share/man/man1 \
 INSTALLMAN3DIR=%p/share/man/man3 \
 INSTALLSITEMAN1DIR=%p/share/man/man1 \
 INSTALLSITEMAN3DIR=%p/share/man/man3 \
 INSTALLBIN=%p/bin \
 INSTALLSITEBIN=%p/bin \
 INSTALLSCRIPT=%p/bin
make
make test</codeblock>
<p>If the type is <code>perl $version</code> with the version specified
(e.g., <code>$version</code> might be 5.6.0),
then the default becomes:
</p>
<codeblock>perl$version Makefile.PL \
 PERL=perl$version PREFIX=%p \
 INSTALLPRIVLIB=%p/lib/perl5/$version \
 INSTALLARCHLIB=%p/lib/perl5/$version/$perlarchdir \
 INSTALLSITELIB=%p/lib/perl5/$version \
 INSTALLSITEARCH=%p/lib/perl5/$version/$perlarchdir \
 INSTALLMAN1DIR=%p/share/man/man1 \
 INSTALLMAN3DIR=%p/share/man/man3 \
 INSTALLSITEMAN1DIR=%p/share/man/man1 \
 INSTALLSITEMAN3DIR=%p/share/man/man3 \
 INSTALLBIN=%p/bin \
 INSTALLSITEBIN=%p/bin \
 INSTALLSCRIPT=%p/bin
make
make test</codeblock>
<p>where <code>$perlarchdir</code> is "darwin" for versions 5.8.0 and 
earlier, and is 
"darwin-thread-multi-2level" for versions 5.8.1 and later.</p>
</itemd></item>

<item><itemt>NoPerlTests</itemt>
<itemd> 
<p>
<em>Introduced in fink > 0.13.7.</em>
A boolean value, specific for perl module packages.
If true, the <code>make test</code> portion
of the <code>CompileScript</code> will be ignored
for that specific perl module package.
</p>
</itemd></item>

</itemtable>
<p><em>Test Suites:</em></p>
<itemtable>

<item><itemt>InfoTest</itemt>
<itemd>
<p>
<em>Introduced in fink 0.25.</em>
This field encapsulates information that will only be used when performing
a build with test suites enabled.  It contains other fields.
If present, this field <em>must</em> contain a <code>TestScript</code>.
All other fields are optional.  The following fields are allowed inside
<code>InfoTest</code>:
</p><ul>
<li><code>TestScript</code>: A script which runs the test suite.  This script should exit
    with status 0 if the suite passes, 1 to indicate warnings, or any other
    value to indicate failures serious enough to be considered fatal.
    Because of this tri-state logic, you should explicitly set an exit value in
    this script.  For instance, <code>make check</code> is a bad script,
    since it will exit with status 1 if the check target doesn't exist.
    <code>make check || exit 2</code> would be a better script.</li>
<li><code>TestConfigureParams</code>: A value which will be appended to <code>ConfigureParams</code>.</li>
<li><code>TestDepends</code> and <code>TestConflicts</code>: Lists of packages that will be added to the <code>BuildDepends</code> or <code>BuildConflicts</code> lists.</li>
<li><code>TestSource</code>: Extra sources necessary to run the test suite.  All of the
    affiliated fields are also supported, so you <em>must</em> also specify
    <code>TestSource-MD5</code> or <code>TestSource-Checksum</code>, and you may also have
    <code>TestSourceN</code> and corresponding <code>TestSourceN-MD5</code>, <code>TestSourceN-Checksum</code>,
    <code>TestTarFilesRename</code>, etc.</li>
<li><code>TestSuiteSize</code>: Describes approximately how long the test suite takes to
    run.  Valid values are <code>small</code>, <code>medium</code>, and <code>large</code>.
    This field is currently ignored.</li>
<li>Any other standard field.  If a field is specified both inside and outside
<code>InfoTest</code>, the value inside <code>InfoTest</code> will replace
the other value when test suites are active.</li>
</ul><p>Here's an example:
</p><codeblock>InfoTest: &lt;&lt;
    TestScript: make check || exit 2
    TestConfigureParams: --enable-tests
&lt;&lt;</codeblock>
</itemd></item>
</itemtable>
<p><em>Install Phase:</em></p>
<itemtable>

<item><itemt>UpdatePOD</itemt>
<itemd>
<p>
<em>Introduced in fink 0.9.5.</em>
A boolean value, specific for perl module packages.
If true, this will add code to the install, postrm and postinst
scripts that maintains the .pod files provided by perl packages.
This includes adding and removing the .pod date from the central
<filename>/opt/sw/lib/perl5/darwin/perllocal.pod</filename> file.
(If the type has been given as <code>perl $version</code> with a
specific version of perl such as 5.6.0,
then these scripts are adapted to deal with the central .pod file
<filename>/opt/sw/lib/perl5/$version/perllocal.pod</filename>.)
</p>
</itemd></item>

<item><itemt>InstallScript</itemt>
<itemd>
<p>
A list of commands that are run in the install phase. This is the
place to put commands that copy all the necessary files into the
temporary dpkg directory for the package. See the <xref
chapter="reference" section="scripts">note on scripts</xref>
below. Before the commands are executed, <xref chapter="format"
section="percent">percent expansion</xref> takes place. Normally the
default is:
</p>
<codeblock>make install prefix=%i</codeblock>
<p>
The default is appropriate for packages that use GNU autoconf.
For packages with of type perl (as specified via the Type field)
with the perl version not specified,
the default instead (as of fink 0.13.4) is:
</p>
<codeblock>make install INSTALLPRIVLIB=%i/lib/perl5 \
 INSTALLARCHLIB=%i/lib/perl5/darwin \
 INSTALLSITELIB=%i/lib/perl5 \
 INSTALLSITEARCH=%i/lib/perl5/darwin \
 INSTALLMAN1DIR=%i/share/man/man1 \
 INSTALLMAN3DIR=%i/share/man/man3 \
 INSTALLSITEMAN1DIR=%i/share/man/man1 \
 INSTALLSITEMAN3DIR=%i/share/man/man3 \
 INSTALLBIN=%i/bin \
 INSTALLSITEBIN=%i/bin \
 INSTALLSCRIPT=%i/bin
</codeblock>
<p>If the type is <code>perl $version</code> with the version specified
(e.g., <code>$version</code> might be 5.6.0),
then the default becomes:
</p>
<codeblock>make install INSTALLPRIVLIB=%i/lib/perl5/$version \
 INSTALLARCHLIB=%i/lib/perl5/$version/$perlarchdir \
 INSTALLSITELIB=%i/lib/perl5/$version \
 INSTALLSITEARCH=%i/lib/perl5/$version/$perlarchdir \
 INSTALLMAN1DIR=%i/share/man/man1 \
 INSTALLMAN3DIR=%i/share/man/man3 \
 INSTALLSITEMAN1DIR=%i/share/man/man1 \
 INSTALLSITEMAN3DIR=%i/share/man/man3 \
 INSTALLBIN=%i/bin \
 INSTALLSITEBIN=%i/bin \
 INSTALLSCRIPT=%i/bin
</codeblock>
<p>where <code>$perlarchdir</code> is "darwin" for versions 5.8.0 and 
earlier, and is 
"darwin-thread-multi-2level" for versions 5.8.1 and later.</p>
<p>
If the package supports it, it is preferably to use <code>make install
DESTDIR=%d</code> instead.
</p>
</itemd></item>

<item><itemt>AppBundles</itemt>
<itemd>
<p>
<em>Introduced in a post-0.23.1 version.</em>
This field installs the specified application bundle(s) into
<filename>%p/Applications</filename>.  It will also create a
symlink to the <filename>/Applications/Fink</filename> directory.
Example:
</p>
<codeblock>AppBundles: build/*.app Foo.app</codeblock>
</itemd></item>

<item><itemt>JarFiles</itemt>
<itemd>
<p>
<em>Introduced in fink 0.10.0.</em>
This field is somewhat similar to DocFiles. It installs the specified jar
files into <filename>%p/share/java/%n</filename>.
Example:
</p>
<codeblock>JarFiles: lib/*.jar foo.jar:fooBar.jar</codeblock>
<p>
This will install all the jars that were in the lib directory and will install
foo.jar as fooBar.jar.
</p>
<p>
It also ensures that these jar files (specifically: all files in
<filename>%p/share/java/%n</filename> that end in .jar)
are added to the CLASSPATH environment variable. This allows tools like
configure or ant to properly detect the installed jar files.
</p>
</itemd></item>

<item><itemt>DocFiles</itemt>
<itemd>
<p>
This field provides a convenient way to install README or COPYING
files in the doc directory for the package,
<filename>%p/share/doc/%n</filename>.
The value is a space-separated list of files.
You can copy files from subdirectories of the build directory, but
they will end up in the doc directory itself, not in a subdirectory.
Shell wildcards are allowed.
It is also possible to rename single files on the fly by appending the
new name separated by a colon (:),
e.g. <code>libgimp/COPYING:COPYING.libgimp</code>.
This field works by appending appropriate <code>install</code>
commands to the InstallScript.
</p>
</itemd></item>

<item><itemt>Shlibs</itemt>
<itemd>
<p>
<em>Introduced in fink 0.11.0.</em>
This field declares the shared libraries which are installed in the
package.  There is one line for each
shared library, which contains the <code>-install_name</code> of the
library and information about its binary compatibility. Shared
libraries that are "public" (i.e., provided for use by other packages)
have, separated by whitespace after the filename,
the <code>-compatibility_version</code>, versioned package
dependency information specifying the Fink package which provides
this library at this compatibility version, and the
library architecture.  (The library architecture may either be "32", "64", or
"32-64", and may be absent; if absent, 
the value defaults to "32" under the powerpc and i386 machine architectures,
and to "64" under the x86_64 machine architecture.)  
The dependency should
be stated in the form <code> foo (>= version-revision)</code> where 
<code>version-revision</code> refers to
the <em>first</em> version of a Fink package which made
this library (with this compatibility version) available.
The Shlibs declaration amounts to a promise
from the maintainer that a library with this name and a 
<code>-compatibility_version</code>
of at least this number will always be found in later versions of this
Fink package.
Shared libraries that are "private" are denoted by an exclamation mark
preceeding the filename, and no compatilibity or versioning
information is given. See the <xref chapter="policy"
section="sharedlibs">Shared Library Policy</xref> for more
information.
</p></itemd></item>

<item><itemt>RuntimeVars</itemt>
<itemd>
<p>
<em>Introduced in fink 0.10.0.</em>
This field provides a convenient way to set environment variables to some static value at runtime (if you need more flexibility, refer to the <xref section="profile.d">profile.d scripts section</xref>). As long as your package is installed, these variables will be set via the <filename>/opt/sw/bin/init.[c]sh</filename> scripts.
</p>
<p>
The value of your variable can contain spaces (trailing ones are trimmed); also, percent expansion takes place. For example:
</p>
<codeblock>RuntimeVars: &lt;&lt;
 SomeVar: %p/Value
 AnotherVar: foo bar
&lt;&lt;</codeblock>
<p>
will set two environment variables 'SomeVar' and 'AnotherVar' and their values
will be respectively '/opt/sw/Value' (or whatever your prefix is) and 'foo bar'.
</p>
<p>
This field works by appending appropriate commands to the InstallScript.
These commands add a setenv/export line for each variable to the package profile.d scripts, so you can provide your own ones, they won't be overwritten. The lines are prepended to the scripts, you can thus use these variables in your scripts.
</p>
</itemd></item>

<item><itemt>SplitOff</itemt>
<itemd>
<p>
<em>Introduced in fink 0.9.9.</em>
Generate a second package from the same compile/install run.
For details about how this works, see the separate
<link url="#splitoffs">splitoff section</link> below.
</p>
</itemd></item>

<item><itemt>SplitOff<em>N</em></itemt>
<itemd>
<p>
<em>Introduced in fink 0.9.9.</em>
This is the same as <code>SplitOff</code>, used to generate a third,
fourth, etc. package from the same compile/install run. Starting with a
CVS version of fink after 0.19.2, you may use arbitrary (not
necessarily consecutive) integer values of N >= 2. However, you still
may not have duplicates.
</p>
</itemd></item>

<item><itemt>Files</itemt>
<itemd>
<p>
<em>Introduced in fink 0.9.9.</em>
Used <em>only</em>
within a <code>SplitOff</code> or <code>SplitOff<em>N</em></code> field,
this designates which files and directories
should be moved from the parent package's  installation
directory %I to the current installation directory %i.  Note that this
is executed after the InstallScript and the DocFiles of the parent package,
but before the InstallScript and Docfiles of the current package.
</p>
</itemd></item>

</itemtable>
<p><em>Build Phase:</em></p>
<itemtable>

<item><itemt>PreInstScript, PostInstScript, PreRmScript, PostRmScript</itemt>
<itemd>
<p>
These fields specify pieces of shell scripts that will be called when
the package is installed, upgraded or removed.
Fink automatically adds the shell script header
<code>#!/bin/sh</code>, and calls <code>set -e</code> so any command
that fails will result in instant termination of the script.
Fink also adds an <code>exit 0</code> at the end.
To indicate an error, exit from the script with a non-zero exit code.
The first parameter (<code>$1</code>) is set to a value indicating
what action is being performed.
Some possible values are <code>install</code>, <code>upgrade</code>,
<code>remove</code> and <code>purge</code>.
Note that there are more values, used during error rollback or when
removing a package in favor of another one.
</p>
<p>
The scripts are called at the following times:
</p>
<ul>
<li>PreInstScript: When the package is installed for the first time
and before upgrading the package to this version.</li>
<li>PostInstScript: After unpacking and setting up the package.</li>
<li>PreRmScript: Before the package is removed or upgraded to a later
version.</li>
<li>PostRmScript: After the package was removed or upgraded to a later
version.</li>
</ul>
<p>
To make it more clear, an upgrade invokes both the ...Inst scripts of
the new version and the ...Rm scripts of the old version.
Details can be found in the Debian Policy Manual,
<link url="http://www.debian.org/doc/debian-policy/ch-maintainerscripts.html">Chapter 6</link>.
</p>
<p>
Percent expansion is performed on the scripts.
Commands can generally be called without giving a full path.
</p>
</itemd></item>

<item><itemt>ConfFiles</itemt>
<itemd>
<p>
A space-separated list of files that are user-modifiable configuration
files.
Percent expansion  is performed on this field.
The files must be specified with an absolute path,
e.g. <filename>%p/etc/%n.conf</filename>. 
The named files will receive special treatment by dpkg.
When a package is upgraded and the file has changed both on disk and
in the package, the user is asked which version to use and backups
of the file will be made.
When a package is "remove"d, the configuration files will remain on
disk.
Only a "purge" also removes the configuration files.
</p>
</itemd></item>

<item><itemt>InfoDocs</itemt>
<itemd>
<p>
Lists the names of Info documents that the package installs in
%p/share/info.
This will add appropriate code to the postinst and prerm scripts to
maintain the Info directory file, <code>dir</code>.</p>
<p><em>Note:</em>  Only use the un-numbered file in the case of split Info
documents. E.g. if a package has:</p>
<codeblock>
foo.info
foo.info-1
foo.info-2
</codeblock>
<p>you should only use:</p>
<codeblock>
InfoDocs:  foo.info
</codeblock>
<p>This feature is still in flux, more fields for finer control may be
added in the future.
</p>
</itemd></item>

<item><itemt>DaemonicFile</itemt>
<itemd>
<p>
Gives a service description for <code>daemonic</code>.
<code>daemonic</code> is used by Fink to create and remove
StartupItems for daemon processes (e.g. web servers).
The description will be added to the package as a file named
<code>%p/etc/daemons/<em>name</em>.xml</code>, where <em>name</em> is
specified by the DaemonicName field and defaults to the package
name.
Percent expansion is performed on the contents of this field.
Note that you must add <code>daemonic</code> to the dependency list if
your package uses it.
</p>
</itemd></item>

<item><itemt>DaemonicName</itemt>
<itemd>
<p>
A name for the <code>daemonic</code> service description file.
See the description of DaemonicFile for details.
</p>
</itemd></item>

</itemtable>
<p><em>Additional Data:</em></p>
<itemtable>

<item><itemt>Homepage</itemt>
<itemd>
<p>
The URL of the upstream home page of the package.
</p>
</itemd></item>


<item><itemt>DescDetail</itemt>
<itemd>
<p>
A more detailed description than the one in the <code>Description</code>
field (what is it, what can I use it for?).
Multiple lines allowed. Because this field will be displayed without
the benefit of word-wrap, you should manually insert line breaks in
order to keep lines less than 79 chars (if possible).
</p>
</itemd></item>

<item><itemt>DescUsage</itemt>
<itemd>
<p>
This is for information that is needed to use the package (how do
I use it?). As in "run wmaker.inst once before using WindowMaker".
Multiple lines allowed. Because this field will be displayed without
the benefit of word-wrap, you should manually insert line breaks in
order to keep lines less than 79 chars (if possible).
</p>
</itemd></item>

<item><itemt>DescPackaging</itemt>
<itemd>
<p>
Notes about the packaging. Stuff like "patches the Makefile to put
everything in place" goes here. Multiple lines allowed.
</p>
</itemd></item>

<item><itemt>DescPort</itemt>
<itemd>
<p>
Notes that are specific to porting the package to Darwin. Stuff
like "config.guess and libtool scripts are updated, -no-cpp-precomp
is necessary" goes here. Multiple lines allowed.
</p>
</itemd></item>

</itemtable>
</section>

<section name="splitoffs"><title>SplitOffs</title>
<p>Beginning with fink 0.9.9, a single .info file can be used to build
multiple packages.  
The install phase begins as usual, with the execution of the 
<code>InstallScript</code> and <code>DocFiles</code> commands.
A <code>SplitOff</code> or <code>SplitOff<em>N</em></code> field, if present, then triggers the
creation of an
additional install directory.  Within the 
<code>SplitOff</code> or <code>SplitOff<em>N</em></code> field, the new install directory is referred to as %i,
while the original install directory of the parent 
package is referred to as %I.
</p>
<p>
Each <code>SplitOff</code> and <code>SplitOff<em>N</em></code> field must contain a number of fields of its
own.  In fact, it resembles a complete package description, but with
certain fields missing.  Here is what belongs in the sub-description
(by category):
</p>
<ul>
<li>Initial Data: Only the <code>Package</code> needs to be specified,
everything else is inherited from the parent package.  You may modify
<code>Type</code> and <code>License</code> by declaring the field
within the <code>SplitOff</code> or <code>SplitOff<em>N</em></code>.  Percent expansion can be used, and
it is often convenient to refer to the name %N of the parent
package.</li>
<li>Dependencies: All of these are allowed.</li>
<li>Unpack Phase, Patch Phase, Compile Phase: These fields are irrelevant
and will be ignored.</li>
<li>Install Phase, Build Phase: Any of these fields are allowed (except
that SplitOffs cannot themselves contain additional SplitOffs).</li>
<li>Additional Data: These are inherited from the parent package but may
be modified by declaring the field within the <code>SplitOff</code> or <code>SplitOff<em>N</em></code>.</li>
</ul>
<p>
Because %n-%v-%r is treated as the unique identifier of a package, you
must not have the same <code>Package</code> (at the
same <code>Version</code> and <code>Revision</code>) listed as
a <code>SplitOff</code> (or <code>SplitOff<em>N</em></code>) of
multiple packages. If you use variants, remember that each variant is
considered an independent package, so the following package layout is
forbidden:
</p>
<codeblock>
Package: mime-base64-pm%type_pkg[perl]
Type: perl (5.12.3 5.12.4)
SplitOff: &lt;&lt;
  Package: mime-base64-pm-bin
&lt;&lt;
</codeblock>
<p>
During the install phase, the <code>InstallScript</code> and 
<code>DocFiles</code> of the parent package are executed first.
Next comes processing of the <code>SplitOff</code> and
<code>SplitOff<em>N</em></code> fields. For each such field in turn,
the <code>InstallScript</code> of that field is run, and then the
<code>Files</code> command causes the listed files and directories
to be moved from the parent's installation directory %I to the
current installation directory %i.  Then the <code>DocFiles</code>
and other Installation Phase fields of the given <code>SplitOff</code>
or <code>SplitOff<em>N</em></code> package are
executed.  
</p><p>
At this time, the <code>SplitOff</code> is processed first (if
present), followed by each <code>SplitOff<em>N</em></code> in
numerical order by N. However, this may change in the future, so, for
example, instead of:
</p>
<codeblock>
SplitOff: &lt;&lt;
  Description: Some header files
  Files: include/foo.h include/bar.h
&lt;&lt;
SplitOff2: &lt;&lt;
  Description: All other header files
  Files: include/*
&lt;&lt;
</codeblock>
<p>
which only works correctly if <code>SplitOff</code> is processed
before <code>SplitOff2</code> it's safer to list explicitly the files
for each (or use more specific filename globs).
</p><p>
During the build phase, the pre/post install/remove scripts for each of
the packages is constructed by using the build phase commands which
were specified for that package.
</p><p>
Each package being built is required
to document the licensing arrangement in %i/share/doc/%n (and of course
%n takes a different value for each package).  Note that
<code>DocFiles</code> copies files rather than moving them, so it is
possible to install identical copies of the documentation into each 
of the packages by using <code>DocFiles</code> several times.
</p>


</section>

<section name="scripts"><title>Scripts</title>

<p>The PatchScript, CompileScript and InstallScript fields allow you
to specify shell commands to be executed. The build directory
(<filename>%b</filename>) is the current directory when scripts are
executed. You should always use relative pathnames or
percent-expansions for files and directories in the fink hierarchy,
not complete absolute pathnames. Two forms are supported.
</p><p>
This field can be a simple list of commands. This is sort of like a
shell script. However, the commands are executed via system(), one
line at a time, so setting variables or changing the directory only
affects commands on that same line. Starting in a CVS version of fink
after 0.18.2, you can wrap long lines similar to normal shell scripts:
a backslash (<code>\</code>) at the end of a line indicates that the
next line is a continuation.
</p><p>
Alternately, you can embed a complete script here, using the
interpreter of your choice. As with any Unix script, the first line
must begin with <code>#!</code> followed by the full pathname of to
the interpreter and any needed flags (e.g., <code>#!/bin/csh</code>,
<code>#!/bin/bash -ev</code>, etc.). In this situation, the whole
*Script field is dumped into a temporary file that is then executed.
</p>
</section>

<section name="patches"><title>Patches</title>

<p>If your package needs a patch to compile on Darwin (or to work with
fink), name the patch with the same name as the package description,
using the extension ".patch" instead of ".info" and put it in the same
directory as the .info file. 
Specify the filename of the patchfile with a line such as:</p>
<codeblock>PatchFile: %n.patch</codeblock>
<p>(For packages with variants, it may be better to use 
<code>%{ni}.patch</code> .)
You must also give the MD5 sum of the patchfile in the 
<code>PatchFile-MD5</code> field, and specify 
<code>BuildDepends: fink (&gt;= 0.24.12)</code> (or a later version of fink).
</p>

<p>When a <code>PatchFile<em>N</em></code> field is used, general custom 
is to name the file <filename>%n-purpose-of-patch.patch</filename> to make it easy to keep 
track of. You must also use the field <code>PatchFile<em>N</em>-MD5</code> 
and specify <code>BuildDepends: fink (&gt;= 0.30.0)</code> (or a later 
version of fink).
</p>

<p>When a <code>PatchFile</code> declaration is present, there is a
default <code>PatchScript</code> equivalent to:</p>
<codeblock>PatchScript: patch -p1 &lt; %{PatchFile}</codeblock>
<p>Using <code>PatchFile<em>N</em></code> appends the following to the 
default <code>PatchScript</code> above:</p>
<codeblock>patch -p1 &lt; %{PatchFile<em>N</em>}</codeblock>
<p>This will be overridden if you supply a <code>PatchScript</code>
of your own (for example, to perform a substitution on the patch file
before applying it).</p>
<p>If you  need to have the user's chosen prefix in the patch file
it is recommended that you have a variable such as <code>@PREFIX@</code> 
instead of <code>/opt/sw</code> in the patch and then use:</p>
<codeblock>PatchScript: sed 's|@PREFIX@|%p|g' &lt; %{PatchFile} | patch -p1</codeblock>
<p>Patches should be in unidiff format and are normally generated by using:</p>
<codeblock>diff -urN &lt;originalsourcedir&gt; &lt;patchedsourcedir&gt;</codeblock>
<p>If you have used emacs to edit files, you can add <code>-x'*~'</code> to the diff command above in order to exclude automatically-generated backup files.</p>
<p>It must also be noted that extremely large patches should not be put in cvs.
They should be put on a web/ftp server and specified using the
<code>SourceN:</code> field. If you don't have a website, fink project
admins can make the file available from fink's own website. If your
patch is larger than about 30Kb, you should consider making it a
separate download.
</p>
</section>

<section name="profile.d"><title>Profile.d scripts</title>

<p>
If your package needs some run-time initialization  (e.g. to setup environment variables), you can use profile.d scripts.
These script fragments are sourced by the <filename>/opt/sw/bin/init.[c]sh</filename> scripts. Normally, all fink users will load these scripts in their shell startup files (<filename>.cshrc</filename> and comparable files).
Your package must provide each script in two variants: one for sh compatible shells (sh, zsh, bash, ksh, ...) and one for csh compatible shells (csh, tcsh). They have to be installed as <filename>/opt/sw/etc/profile.d/%n.[c]sh</filename> (where %n as usual stands for the package name).
Also, their executable and read bits have to be set (i.e. install them with -m 755), otherwise they will not be loaded correctly.
</p>
<p>
If you just need to set some environment variables (for example, QTDIR to '/opt/sw'), you can use the RuntimeVars field which is provided as a convenient way to achieve exactly this.
</p>
</section>


</chapter>


</document>
