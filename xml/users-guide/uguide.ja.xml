<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE document SYSTEM "../finkdoc.dtd">
<document filename="index" lang="ja" >
<title>Fink ユーザーガイド</title>
<shorttitle>ユーザーガイド</shorttitle>
<cvsid>$Id: uguide.ja.xml,v 1.31 2019/01/19 10:11:12 nieder Exp $</cvsid>
<preface>
<p>
このドキュメントは、 Fink の全ての機能を概説します。
(以下のドキュメントはより広範囲なことについて書かれています:
<link url="/doc/install/index.php" >インストール</link>,
<link url="/doc/usage/index.php" >使用方法</link>
およびバイナリのディスクイメージにある ReadMe.rtf 。)
ウェブサイト中の <link url="/doc/" >文書 セクション</link> も併せて参照ください。
ここに書かれていること以上の内容を含んでいます。
</p>
<p>
Fink ユーザーズガイドへようこそ。
このガイドでは、ソースからとバイナリからの両方について、初めてのインストールとアップグレードの仕方について書かれています。
パッケージインストールとメンテナンスのことも書かれています。
</p>
</preface>
<chapter filename="intro" >
<title>はじめに</title>
<shorttitle>はじめに</shorttitle>
<section name="what" >
<title>Fink とは何ですか?</title>
<p>
Fink は Unix オープンソース・ソフトウェアを Mac OS X と Darwin 向けに提供するものです。
Linux や同様のオペレーティングシステム向けに開発された、たくさんのコマンドラインやグラフィカルなフリーソフトウェアを Mac で使えるようにするものです。
</p>
</section>
<section name="req" >
<title>必要条件</title>
<p>
必須:
</p>
<ul>
<li>
<p>
インストール済みの Mac OS X システム、バージョン 10.2 またはそれ以降、あるいは同等の Darwin リリース。
これより前のバージョンでは<em>動作しなくなります</em>。
サポート対象システムの詳細は、以下を御覧ください。
</p>
</li>
<li>
<p>
インターネット接続。
ソースコードとバイナリの両方とも、インターネットのダウンロードサイトからダウンロードされます。
</p>
</li>
</ul>
<p>
ソースディストリビューション (下記参照) を使用する場合、以下も必要です:
</p>
<ul>
<li>
<p>
Developer tools。
Mac OS X では、Developer Tools (10.3 と 10.4 では XCode) CD 
(10.4 では DVD) から、あるいは
最新版を<link url="http://connect.apple.com">ダウンロード</link>して、 
Developer.pkg をインストールします。
最新版のダウンロードの方が、様々な課題を修正しているので望ましいです
(時々、何かが壊れていることもありますが)。
ツールは、 Mac OS X のバージョンと合ったものを使用してください。
Darwin 場では、デフォルトインストールでツールがインストールされます。
</p>
<p>
ソースからパッケージをビルドする予定がなくても、 Developer Tools をインストールしておくと良いでしょう。
パッケージがインストールするプログラムの中には、一般的なコマンドラインツールもありますし、パッケージによっては必要なこともあります。
</p>
</li>
<li>
<p>
忍耐。
大きなパッケージをコンパイルするのは時間がかかります。
ここでいう時間は、文字通り数時間から数日かかることもあります。
</p>
</li>
</ul>
</section>
<section name="supported-os" >
<title>サポートされているシステム</title>
<p>
<em>Mac OS X 10.4</em> は、最新のプラットフォームで、<quote>完全にサポートとテストされている</quote>と考えられますが、
新しいオペレーティングシステムとして課題も残っています。
開発者のほとんどはこれを用い、10.3 を使用している人は 10.4 ユーザーにテストしてもらっています。
注意、しかし intel ハードウェア上での fink は、まだ <em>beta</em> 品質と考えられています。
</p>
<p>
<em>Mac OS X 10.3</em> は、最新のプラットフォームで、<quote>完全にサポートとテストされている</quote>と考えられますが、
パッケージに酔ってはコンパイルに問題があるものもあります。
多くの開発者はこれを使用しますが、所有していない場合は 10.3 ユーザーにテストをしてもらっています。
</p>
<p>
<em>Mac OS X 10.2</em> は、現在でも制限付きでサポートされています。
Fink 0.6.4 が使用できる最新バージョンです。
</p>
<p>
<em>Mac OS X 10.1</em> は、現在でも制限付きでサポートされています。
Fink 0.4.1 が使用できる最新バージョンです。
</p>
<p>
<em>Darwin 8.x</em> が Mac OS X 10.4 に、 <em>Darwin 7.x</em> が Mac OS X 10.3 に、 <em>Darwin 6.x</em> が Mac OS X 10.2 相当する Darwin のバージョンです。
基本的には動作するはずですが、ほとんどの人は Mac OS X を使用しているので、テストされていません。
Mac OS X 固有の機能を使っているパッケージでは問題が発生するかも知れません。
影響するパッケージは、 XFree86 と、おそらく esound です。
</p>
</section>
<section name="src-vs-bin" >
<title>ソース vs. バイナリ</title>
<p>
ソフトウェアは、人間が読めるプログラム言語で書かれて (&quot;開発されて&quot;) います。
この形式は &quot;ソースコード&quot; と呼ばれるもので、低レベルの (大抵の人間は読めない) コンピュータが実行するには、これを機械語に変換する必要があります。
このプロセスは &quot;コンパイル&quot; といい、できたものを &quot;実行可能ファイル&quot; や &quot;バイナリ&quot;といいます。
(このプロセスは、コンパイル以外のステップも含むので、ビルドと呼ぶこともあります)
</p>
<p>
商業用ソフトウェアを購入する際はソースコードを見ることはありません。
企業は秘密として扱っています。
入手するのは実行可能ファイルだけですので、プログラムを変更することや、実行時に何が起こっているのか知ることはできません。
</p>
<p>
これは <link url="http://www.opensource.org/" >オープンソース</link> の場合は当てはまりません。
名称が示すように、ソースコードは公開されていて、読むことも変更することも可能です。
事実、ほとんどのオープンソース・ソフトウェアは、作者からはソースコードの形式で配布されているだけで、実行するには自分のコンピュータ上でコンパイルする必要があります。
</p>
<p>
Fink では、二つの選択肢があります。
&quot; ソース &quot; ディストリビューションでは元のソースをダウンロードし、 Mac OS X と Fink ポリシーに対応させてコンパイルします。
このプロセスは全て自動的に実行されますが、多少時間がかかります。
他方、 &quot; バイナリ &quot; ディストリビューションでは、コンパイル済みのパッケージを Fink サイトからダウンロードし、インストールします。
コンパイルに要する時間を節約できます。
この二つを組み合わせることも可能です。
このマニュアルでは、両方の使用方法について説明します。
</p>
</section>
</chapter>
<chapter filename="install" >
<title>初めてのインストール</title>
<shorttitle>インストール</shorttitle>
<preface>
<p>
初めてインストールする間、マシンには基本システムとパッケージ管理ツールがインストールされます。
これの後には、 Fink からインストールされたソフトウェアを使えるようにするため、シェルの環境変数を設定します。
この作業は一度だけで十分です。
Fink のアップグレードは、再インストールなしで行なうことができます (リリース 0.2.0 以降)。
<xref chapter="upgrade" >アップグレードの章</xref>を参照してください。
</p>
<p>
パッケージ管理ツールをインストールしたら、これを使ってさらにソフトウェアをインストールすることができます。
<xref chapter="packages" >パッケージインストールの章</xref>を参照してください。
</p>
</preface>
<section name="bin" >
<title>バイナリディストリビューションのインストール</title>
<p>
バイナリディストリビューションは、ディスクイメージ (.dmg) の中に、 Mac OS X インストーラパッケージ形式 (.pkg) で配布されています。
ディスクイメージを<link url="/download/bindist.php" >ダウンロードページ</link>からダウンロードし、ダブルクリックしてマウントします。
&quot;Fink 0.x.x Installer&quot; を開きます。
Disk Copy がファイルを点検した後にデスクトップに出てくるディスクアイコンのことです。
この中には、ドキュメンテーションとインストーラパッケージが入っています。
インストーラパッケージをダブルクリックし、説明に従って下さい。
</p>
<p>
管理者パスワードを聞かれ、文章が表示されます。
このユーザーガイドよりも新しいこともあるので、なるべく読んでください。
インストーラがインストール先のドライブを聞いてきたら、システムボリューム (Mac OS X をインストールしたボリューム) を選択してください。
もし間違ったボリュームを選択すると、インストールはできますが、 Fink は動作しません。
インストールが終了したら、<xref section="setup" >環境の設定</xref>節を参照してください。
</p>
</section>
<section name="src" >
<title>ソースディストリビューションのインストール</title>
<p>
ソースディストリビューションは標準的な Unix tarball (.tar.bz) で提供されます。
これは <code>fink</code> パッケージマネージャとパッケージ記述だけが含まれていて、パッケージ用のソースをダウンロードするものです。
<link url="/download/srcdist.php" >ダウンロードページ</link>から入手することができます。
tar アーカイブを解凍する際に、 StuffIt Expander を使わないように注意してください。
StuffIt はまだ長いファイル名を扱うことができないようです。
StuffIt Expander が解凍してしまっている場合、作成されたフォルダごと捨ててください。
</p>
<p>
ソースリリースはコマンドラインからインストールする必要があります。
まずターミナル.app を開き、 fink-0.x.x-full.tar.gz アーカイブをインストールしたディレクトリに移動します。
(注記: もし、OS X 10.4 を XCode 2.1 を使っている場合は、
<filename>fink-0.8.0-full-XCode-2.1.tar.gz</filename> 
を代わりに用い、下記の説明も適切に変えてください。)
次のコマンドでアーカイブを解凍します。
</p>
<codeblock>tar -xzf fink-0.x.x-full.tar.gz</codeblock>
<p>
これによってアーカイブと同名のディレクトリが作成されます。
以下も <code>fink-0.x.x-full</code> を使います。
このディレクトリ内に入り、ブートストラップコマンドを入力します:
</p>
<codeblock>cd fink-0.x.x-full
./bootstrap.sh</codeblock>
<p>
スクリプトがシステムをチェックし、 sudo を使って root になります。
この時、パスワードを聞いてきます。
次に、インストールパスを聞いてきます。
特に理由がない限り、デフォルトのパス /sw を使ってください。
このドキュメントでは、このパスを例として使いますので、パスを換えた場合は適宜置き換えてください。
</p>
<p>
次にくるのは Fink の設定です。
プロキシ、ミラーの設定や verbose メッセージにするかどうか聞かれます。
質問が理解できない場合、リターンキーを押してデフォルト値を選択してください。
このプロセスは、後でも <code>fink configure</code> コマンドで再実行することができます。
</p>
<p>
ブートストラップスクリプトには、必要な情報が全てあり、ソースコードをダウンロードしてコンパイルを始めます。
この時点ではこれ以上のインタラクションは必要ありません。
また、パッケージが二度コンパイルされることがありますが、心配しないでください。
パッケージマネージャのバイナリパッケージをビルドするのにパッケージマネージャが必要なためです。
</p>
<p>
ブートストラップが終ったら、<xref section="setup" >環境の設定</xref> 節へ進んでください。
</p>
</section>
<section name="setup" >
<title>環境の設定</title>
<p>
Fink ディレクトリ階層にインストールされたソフトウェア、パッケージ管理プログラムを含めて、を使用するには、 PATH 環境変数などをそれぞれ設定しなければなりません。
これはターミナル上で、
</p>
<codeblock>/sw/bin/pathsetup.sh</codeblock>
<p>
と入力します。
古いバージョンの fink の場合、ファイル名が <filename>pathsetup.command</filename> ですので、次のように入力します。
<code>open /sw/bin/pathsetup.command</code>
として下さい。
これが効かない場合は手動で設定することができますが、シェルによってやり方が異なります。
現在のシェルを知るには、ターミナルを開き:
</p>
<codeblock>echo $SHELL</codeblock>
<p>
と入力します。
この中に &quot;csh&quot; か &quot;tcsh&quot; とあったら、 C シェルを使っています。
bash, zsh, sh または似たようなものであれば、 bourne シェルの派生を使っています。
</p>
<ul>
 <li>
  <p><strong>Bourne シェル</strong> (Mac OS X 10.3 以降のデフォルト) </p>
  <p>
   Bourne シェル系 (sh, bash, zsh など) を使っている場合、以下の行をホームディレクトリ内の <code>.profile</code> ファイルに追加して下さい (あるいは、 <code>.bash_profile</code> がある場合、こちらを使って下さい):
  </p>
  <codeblock>. /sw/bin/init.sh</codeblock>
  <p>
   行追加の方法を知らない場合、以下のコマンドを実行して下さい:
  </p>
  <codeblock>cd pico .profile</codeblock>
<p>
フルスクリーン (フル・ターミナルウィンドウ) テキストエディタになり、 
<code>. /sw/bin/init.sh</code> 行をタイプできるようになります。
&quot;New file&quot; という文字が出ていても大丈夫です。
行を追加したら、最低一回はリターンキーを押して下さい。
その後、 Control-O, Return, Control-X と押して、エディタから抜けて下さい。
</p>
 </li>
 <li>
  <p><strong>C シェル</strong> (Mac OS X 10.2 までのデフォルト) </p>
  <p>
   tcsh を使っている場合、以下の行をホームディレクトリ内の 
   <filename>.cshrc</filename> ファイルに追加して下さい:
  </p>
  <codeblock>source /sw/bin/init.csh</codeblock>
  <p>
   行追加の方法を知らない場合、以下のコマンドを実行して下さい:
  </p>
<codeblock>cd
pico .profile</codeblock>
<p>
フルスクリーン (フル・ターミナルウィンドウ) テキストエディタになり、 
<code>source /sw/bin/init.csh</code> 行をタイプできるようになります。
&quot;New file&quot; という文字が出ていても大丈夫です。
行を追加したら、最低一回はリターンキーを押して下さい。
その後、 Control-O, Return, Control-X と押して、エディタから抜けて下さい。
</p>
  <p>状況によっては、さらに数行編集する必要がある場合もあります:</p>
  <ol>
  <li>
  <p><code>~/.tcshrc</code> があります。</p>
  <p>このファイルはサードパーティーのソフトウェアによって作られることがあります。
  あなたが自分で作ったのかも知れません。
  いずれの場合も、 <code>~/.tcshrc</code> が読まれて、 <code>~/.cshrc</code> は無視されてしまいます。
  <code>~/.tcshrc</code> を <code>~/.cshrc</code> と同じように編集することをお勧めします:
  </p>
  <codeblock>source ~/.cshrc</codeblock>
  <p>こうすることで、 <code>~/.tcshrc</code> を削除することなく Fink を使うことができます。</p>
  </li>
  <li>
  <p> <code>/usr/share/tcsh/examples/README</code> に書かれていることを実行した。</p>
  <p>ここに書かれていることは、 <code>~/.tcshrc</code> と <code> ~/.login</code> を作るように指示しています。
  ここで問題は、 <code>~/.login</code> が <code>~/.tcshrc</code> の後で実行され、 <code>/usr/share/tcsh/examples/login</code> を source することです。
  後者は、あなたの設定した PATH を上書きする行を含んでいます。
  <code>~/Library/init/tcsh/path</code> を作成するのがよいでしょう:</p>
<codeblock>mkdir -p ~/Library/init/tcsh
pico ~/library/init/tcsh/path</codeblock>
  <p>としてから:</p>
  <codeblock>source ~/.cshrc</codeblock>
  <p>を加えて下さい。
  また、 .tcshrc も項目１のように編集して下さい。
  <code>~/.login</code> が読まれない状況で、PATH が正しく設定されたか確認して下さい。</p>
  </li>
  </ol>
  <p>
  .cshrc (と、他の起動ファイル) の編集は、新規シェル (新しくターミナルウィンドウを開いた時) から有効になります。
   このため、ファイルを変更する前から開いていたターミナルウィンドウは、それぞれこのコマンドを実行する必要があります。
  また、 <code>rehash</code> を実行する必要もあります。
  これで tcsh は使用できるコマンドを内部にキャッシュします。
  </p>
 </li>
</ul>
<p>
<filename>init.sh</filename> と <filename>init.csh</filename> スクリプトは <filename>/usr/X11R6/bin</filename> と <filename>/usr/X11R6/man</filename> をパスに追加することに注意して下さい。
これで X11 がインストールされた時に使えるようになります。
Fink のパッケージはそれぞれ設定を追加することができます。
例えば、 qt パッケージは QTDIR 環境変数を設定します。
</p>
<p>
環境を整えたら、次の<xref chapter="packages" >パッケージのインストール</xref>の章に進み、 Fink のパッケージ管理ツールを使ったパッケージのインストール方法をお読み下さい。
</p>
</section>
</chapter>
<chapter filename="packages" >
<title>パッケージのインストール</title>
<shorttitle>パッケージ</shorttitle>
<preface>
<p>
この時点で、 Fink というものがインストールされました。
この章では実際に、好きなソフトウェアパッケージをインストールする方法を解説します。
パッケージのインストールを説明する前に、ソースとバイナリディストリビューションの両方に当てはまる重要事項を説明します。
</p>
</preface>
<section name="bin-dselect" >
<title>dselect によるバイナリパッケージのインストール</title>
<p>
<code>dselect</code> は、入手可能なパッケージの一覧を表示し、インストールするものを選択できるプログラムです。
これはターミナル.app 内で動作しますが、 &quot;スクリーン&quot; 全体を簡単なキーボードナビゲーションで使います。
他のパッケージ管理ツールと同様、 <code>dselect</code> はルート権限を必要とするので、sudo を使い:
</p>
<codeblock>sudo dselect</codeblock>
<p>
とします。
<em>注記：</em>
<code>dselect</code> は Mac OS X ターミナル上では問題があります。
これを避けるには以下のコマンドを先に実行するか、起動ファイル (例 <code>.cshrc</code> | <code>.profile</code>) に書いておく必要があります。
</p>
<p>tcsh の場合:</p>
<codeblock>setenv TERM xterm-color</codeblock>
<p>bash の場合:</p>
<codeblock>export TERM=xterm-color</codeblock>
<p>メインメニューは:</p>
<ul>
<li>
<p>
<em>[A]ccess</em> - 使用するネットワークのアクセス手段を設定します。
<em>これを実行する必要はありません</em>。
Fink があらかじめ全てを設定します。
これを選択すると、デフォルトの設定を使えない設定に書き換えるおそれがあるので、使用は避けて下さい。
</p>
</li>
<li>
<p>
<em>[U]pdate</em> - パッケージ一覧を Fink サイトからダウンロードします、
パッケージをインストールや更新することはありません。
パッケージブラウザが使用する一覧を更新するだけです。
Fink をインストール後、最低一回は実行して下さい。
</p>
</li>
<li>
<p>
<em>[S]elect</em> - 選択、非選択可能なパッケージ一覧を表示します。
詳細は後に書かれています。
</p>
</li>
<li>
<p>
<em>[I]nstall</em> - これが実際にインストールします。
上のメニュー項目は dselect のパッケージ一覧とステータスデータベースを書き換えるだけでしたが、これは実際に選択されたパッケージのダウンロードとインストールをします。
それだけではなく、非選択したパッケージを取り除くこともします。
</p>
</li>
<li>
<p>
<em>[C]onfig</em> と <em>[R]emove</em> - これらは apt 以前からの遺物です。
使う必要はなく、害もありません。
</p>
</li>
<li>
<p>
<em>[Q]uit</em> - 説明の必要はないでしょう。
</p>
</li>
</ul>
<p>
実際は、&quot;[S]elect&quot; メニュー項目を選択後、パッケージブラウザ内にいることが多いでしょう。
パッケージ一覧を表示する前に dselect はヘルプ画面を表示します。
'k' キーを押すとキーボードコマンドの一覧が表示され、スペースキーでパッケージ一覧が表示されます。
</p>
<p>
一覧の中では、上と下のキーで移動します。
選択は、 '+' と '-' でします。
他のパッケージに依存するパッケージを選択した場合、 dselect は影響するパッケージのサブリストを表示します。
ほとんどの場合、リターンキーを押すだけで dselect に従えば大丈夫ですが、サブリスト内で変更もできます (例、バーチャルパッケージ依存のため他を選択する)。
あるいは、 'R' (Shift-R) を押して元の状態に戻せば、サブリストとパッケージ一覧はそのままです。
選択が終了したなら、一覧から出て &quot;[I]nstall&quot; を選択し、実際にパッケージをインストールします。
</p>
</section>
<section name="bin-apt" >
<title>apt-get を使ったバイナリインストール</title>
<p>
<code>dselect</code> は実際にはパッケージをダウンロードせず、 apt を実行します。
コマンドラインでの作業がしたい場合、 <code>apt-get</code> コマンドを使って apt の機能を直接実行することができます。
</p>
<p>
dselect のと同じく、まずパッケージ一覧をダウンロードします:
</p>
<codeblock>sudo apt-get update</codeblock>
<p>
dselect の &quot;[U]pdate&quot; メニュー項目と同じく、コンピュータ上のファイルではなく、パッケージ一覧を更新するだけです。
パッケージをインストールするには、 apt-get に名前を渡します:
</p>
<codeblock>sudo apt-get install lynx</codeblock>
<p>
パッケージが他のパッケージのインストールを必要としていると判断した場合、リストを表示して確認をとります。
その後、パッケージをダウンロード、インストールします。
パッケージを取り除くのも簡単です:
</p>
<codeblock>sudo apt-get remove lynx</codeblock>
<p>
<!-- [FIXME: using apt-cache to search for packages] --></p>
</section>
<section name="bin-exceptions" >
<title>バイナリディストリビューションにない依存パッケージのインストール</title>
<p>バイナリインストールをしている時、依存しているパッケージがインストールできないというメッセージがでることがあります。例えば:</p>
<codeblock>Sorry, but the following packages have unmet
dependencies:
foo: Depends: bar (&gt;= version) but it is
not installable
E: Sorry, broken packages</codeblock>
<p>何が起こったかというと、インストールしようとしているパッケージが、ライセンス上バイナリとして配布されない他のパッケージに依存しているのです。
この場合、ソースからインストールして下さい (次の節を参照)。
</p>
</section>
<section name="src" >
<title>ソースからのパッケージインストール</title>
<p>まず、適切なバージョンの Development Tools が必要となります。
<link url="http://connect.apple.com" >http://connect.apple.com</link>
から最新版を入手して下さい。
</p>
<p>
ソースからインストールできるパッケージの一覧を取得するには、 <code>fink</code> ツールに聞きます:
</p>
<codeblock>fink list</codeblock>
<p>
最初の列はインストール状態 (空白は未インストール, <code>i</code> はインストール済, <code>(i)</code> はインストール済だが最新ではない) を示します。
次がパッケージ名、最新バージョン、短い説明です。
特定パッケージの詳細を見るには、&quot;describe&quot; コマンド (&quot;info&quot; はエイリアスです) を使います:
</p>
<codeblock>fink describe xmms</codeblock>
<p>
インストールしたいパッケージが見つかったら、 &quot;install&quot; コマンドを使います:
</p>
<codeblock>fink install wget-ssl</codeblock>
<p>
<code>fink</code> コマンドは最初に必要なもの (&quot;依存性&quot;) があるか確認し、無いものがあればインストールしていいか聞いてきます。
次に、ソースコードをダウンロード、解凍、パッチ当て、コンパイル、インストールをします。
この作業は時間がかかります。
この作業中にエラーが発生した場合、まず <link url="/faq/" >FAQ</link> を確認して下さい。
</p>
<p>
<code>fink</code> のバージョン 0.23.0 以降では、コンパイル済みバイナリパッケージを優先的にダウンロードするように指定することができます。
使い方は、
<xref chapter="usage" section="options">--use-binary-dist (or -b) option</xref>
というオプションを<code>fink</code> に指定します。
これによって時間を大幅に節約することができます。
例えば、
</p>
<codeblock>fink --use-binary-dist install wget-ssl</codeblock>
<p>あるいは</p>
<codeblock>fink -b install wget-ssl</codeblock>
<p>
とすることで、 wget-ssl が依存しているものをバイナリディストリビューションから最初にダウンロードし、
能古炉だけをソースからビルドします。
このオプションは、
<xref chapter="conf">Fink 設定ファイル</xref> (<filename>fink.conf</filename>)
あるいは <code>fink configure</code> を実行することで、常に使用するように指定することができます。
</p>
<p>
<code>fink</code> ツールの詳細は、
<xref chapter="usage">&quot;コマンドライン fink ツールの使用方法&quot;</xref>
の章を参照してください。
</p>
</section>
<section name="fink-commander"> 
<title>Fink Commander</title> 
<p>
Fink Commander は <code>apt-get</code> と <code>fink</code> の Aqua インターフェイスです。
Binary メニューはバイナリディストリビューションの、 Source メニューはソースディストリビューションの操作を行います。
</p>
<p>
Fink Commander は Fink バイナリインストーラに付属しています。
Fink をソースからインストールした場合など、別にダウンロードしたい場合や詳しい情報は、
<link url=" http://finkcommander.sourceforge.net " >Fink Commander website</link> リンクを辿って下さい。
</p>
</section>
<section name="available-versions">
<title>用意されているバージョン</title>
<p>パッケージをインストールする場合、まず<link url="http://pdb.finkproject.org/pdb/index.php" >Package Database</link>を確認して Fink にあるかどうか確認して下さい。
用意されているバージョンは次の行に書かれてあります:</p>
      <ul>
        <li>Binary Distribution
		  <ol>
            <li>
              <p>
                <em>0.4.1:</em> OS 10.1 用で、バイナリからインストールできるバージョン。
              </p>
            </li>
            <li>
              <p>
                <em>0.6.4:</em> OS 10.2 用で、バイナリからインストールできるバージョン。
              </p>
            </li>
            <li>
              <p>
                <em>0.7.2:</em> OS 10.3 用で、バイナリからインストールできるバージョン。
                もし、Fink を<xref chapter="install" section="bin">更新</xref>
                したなら、パッケージによっては新しいバージョンがあるかもしれません。
              </p>
            </li>
            <li>
              <p>
                <em>&fink_version;:</em> OS 10.5 用で、バイナリからインストールできるバージョン。
                もし、Fink を<xref chapter="install" section="bin">更新</xref>
                したなら、パッケージによっては新しいバージョンがあるかもしれません。
              </p>
            </li>
          </ol>
          
        </li>
      </ul>
      <ul>
        <li>CVS/rsync Distributions
          <ol>
            <li>
          <p>
            <em>10.2-gcc3.3 stable:</em>
            これは、OS 10.2 と Developer Tools の <code>gcc 3.3</code> アップデートの組み合わせにむけた、
            stable ソースツリーからインストールされる最新の安定バージョンです。
            このバージョンをインストールするには、 <link url="/doc/cvsaccess/index.php">CVS</link>
            または rsync　でのアクセスが必要です。
            <code>gcc 3.3</code> アップデートを当てていない場合、このバージョン (あるいはパッケージも) は見えないかもしれません。
          </p>
          <p>
            注記: 他のプロジェクトの場合と異なり、 Fink はパッケージの最新の安定板を、テストが必要なバージョン
            (下記を参照) と同様に、CVS で配布しています。
            CVS または rsync 更新をすることで、最新の安定板を、バイナリ配布が更新される前に
            使うことができます。
          </p>
            </li>
            <li>
          <p>
            <em>10.3 stable:</em>
            これは、OS 10.3 用に stable ソースツリーからインストールされる最新の安定バージョンです。
          </p>
            </li>
            <li><p><em>10.4/powerpc stable:</em>  
            これは、新規にインストールされた OS 10.4 ユーザ用に stable ソースツリーからインストールされる最新の安定バージョンです。PowerPC のみ。
		  </p>
		    </li>
            <li><p><em>10.4/intel stable:</em>
            これは、Intel ハードウェアの OS 10.4 ユーザ用に stable ソースツリーからインストールされる最新の安定バージョンです。
          </p>
            </li>
			<li>
          <p>
            <em>10.2-gcc3.3 unstable:</em>
            <code>gcc 3.3</code>. これは、OS 10.2 と <code>gcc 3.3</code> 用の unstable ソースツリーからインストールされる最新の unstable バージョンです。 
            このバージョンをインストールするには、unstable パッケージの
            <link url="/faq/usage-fink.php#unstable">インストール手順</link> 
            をご覧ください。
          </p>
          <p>
            注記:  unstable は必ずしも不安定な訳ではありませんが、自己責任で使用してください。
          </p>
            </li>
            <li>
          <p><em>10.3 unstable:</em>  
            これは、OS 10.3 用に unstable ソースツリーからインストールされる最新の unstable バージョンです。
          </p>
            </li>
            <li><p><em>10.4/powerpc stable:</em>  
            これは、新規にインストールされた OS 10.4 ユーザ用に unstable ソースツリーからインストールされる最新の安定バージョンです。PowerPC のみ。
		  </p>
		    </li>
            <li><p><em>10.4/intel stable:</em>
            これは、Intel ハードウェアの OS 10.4 ユーザ用に unstable ソースツリーからインストールされる最新の安定バージョンです。
          </p>
            </li>
          </ol>
        </li>
      </ul>
</section>
<section name="x11" >
<title>X11 を使う</title>
<p>
Mac OS X には、 X11 が数種類 (Apple X11, XFree86, X.org) あり、インストール方法も数種類 (手動、 Fink を使う) あるため、パッケージも数種類あります。
このため、 X11 アプリケーションをインストールする前に正しいものを選ぶことが重要になります。
以下がパッケージと X11 のインストール方法の一覧です:
</p>
<ul>
        <li>
          <p>
            <em>xfree86, xfree86-shlibs:</em>
            XFree86 4.3.0 (OS 10.2 のみ), 4.4.0 (10.2 または 10.3), または 4.5.0 (10.3 または 10.4) のため、両パッケージをインストール。
          </p>
        </li>
        <li>
          <p>
            <em>xorg, xorg-shlibs</em>(10.3 or 10.4)  
            X.org X11 ディストリビューションの 6.8.2 リリースは、この両パッケージをインストール。
          </p>
        </li>
        <li>
          <p>
            <em>system-xfree86 + -shlibs, -dev:</em>
            これらのパッケージは、 (Fink 0.6.2 以降では) Apple X11 や、手動でインストールした
            XFree86 や X.org が存在する場合に、自動的に生成されます。
            これらは依存性の代替物として機能します。
          </p>
        </li>
        <li>
          <p>
            <em>xfree86-base, xfree86-rootless [-threaded] + -shlibs, -dev</em>
            (10.1 または 10.2 のみ) これらのパッケージは、XFree86 4.2.1.1 (10.1 上では 4.2.0)
            を全てインストールします。
            <code>-threaded</code> 亜種は、これを必要とするアプリケーションのために提供され、
            後の XFree86 では標準的な機能です。
            <code>-rootless</code> は XDarwin ディスプレイサーバを含んでいます。
            --名称は歴史的なものです。
          </p>
          <p>
            X11 ベースのパッケージをソースからインストールするためには、
            これら６つのパッケージを全てインストールしなければなりません。
          </p>
        </li>
<!-- OBSOLETE <li>
<p>
system-xtools:
Tenon Xtools をインストールした場合、このパッケージをインストールして下さい。
system-xfree86 と同様、有効性を確認するだけでファイルはそのままにします。
</p>
</li>
-->
</ul>
<p>
X11 のインストールと使用の詳細は、
<link url="/doc/x11/" >X11 on Darwin and Mac OS X ドキュメント</link>
を参照して下さい。
</p>
</section>
</chapter>
<chapter filename="upgrade" >
<title>Fink のアップグレード</title>
<shorttitle>アップグレード</shorttitle>
<preface>
<p>
この章は、 Fink を最新かつ最高に更新する方法を解説します。
</p>
</preface>
<section name="bin" >
<title>バイナリパッケージでのアップグレード</title>
<p>
バイナリディストリビューションだけを使っている場合、特にすることはありません。
最新の一覧に更新し、全てのパッケージを更新するだけです。
</p>
<p>
dselect の場合、&quot;[U]pdate&quot; を押して &quot;[I]nstall&quot; するだけです。
もちろん、この間に &quot;[S]elect&quot; を実行して選択されたものと新しいパッケージを確認することもできます。
</p>
<p>
apt では、 <code>apt-get update</code> を実行して最新の一覧を取得し、 <code>apt-get upgrade</code> を実行して全てのパッケージを最新に更新します。
</p>
<p>
Fink Commander では、
Binary->Update descriptions 
を選択してパッケージリストを更新し、
Binary->Dist-Upgrade 
で新しいバージョンに更新します。
</p>
<p>
詳細、特に 0.3.0 より前のバージョンの Fink からアップグレードする場合は、
<link url="/download/upgrade.php" >アップグレード表</link>
を御覧下さい。
</p>
</section>
<section name="src" >
<title>ソースディストリビューションのアップグレード</title>
<p>
アップグレードは２ステップあります。
1. パッケージ記述をダウンロードします。
2. このパッケージ記述を使って新しいパッケージをコンパイルします。
必要に応じてソースコードもダウンロードします。
</p>
<p>
Fink 0.2.5 以降であれば、最初のステップは <code>fink selfupdate</code> を実行します。
このコマンドは Fink ウェブサイトを新しいリリースが用意されているか確認し、自動的にパッケージ記述をダウンロード、インストールします。
最近のバージョンの <code>fink</code> コマンドでは、 CVS または rsync から直接パッケージ記述を取得する選択肢もあります。
CVS はバージョン管理レポジトリで、パッケージ記述が保存・管理されています。
CVS には連続して更新できる利点がありますが、CVS サーバーが一つしかなく、トラフィック量に依って不安定になりやすい欠点があります。
このため、一般ユーザーは rsync を使うことをおすすめします。
rsync にはミラーが複数あり、欠点は CVS からのパッケージ記述の更新に１時間かかることです。
</p>
<p>(ソースインストールで問題がある場合、<link url="/download/fix-upgrade.php" >特殊な方法</link>を参照して下さい)</p>
<p>
0.2.5 より古いバージョンの Fink の場合、手動でパッケージ記述をダウンロードして下さい。
<link url="http://sourceforge.net/project/showfiles.php?group_id=17203" >ダウンロードエリア</link>で最新の packages-0.x.x.tar.gz tarball を &quot;distribution&quot; モジュール内で探します。
ダウンロード後、以下のようにインストールします:
</p>
<codeblock>tar -xzf packages-0.x.x.tar.gz
cd packages-0.x.x
./inject.pl</codeblock>
<p>
パッケージ記述をダウンロード後 (どのような方法であれ)、全てのパッケージを <code>fink
update-all</code> で一括更新します。
</p>
<p>
Fink Commander を使ってソースディストリビューションを更新する場合、
Source-&gt;Selfupdate 
を選択して新しいパッケージ情報ファイルをダウンロードし、
Source-&gt;Updata-all
を選択して古いパッケージを更新します。
</p> 
</section>
<section name="mix" >
<title>バイナリとソースの混在</title>
<p>
もし、コンパイル済みパッケージとソースからビルドしたものを使っている場合、両方のアップグレード方法をする必要があります。
最初に <code>dselect</code> か <code>apt-get</code> を使ってバイナリで提供されているパッケージの最新バージョンを取得し、次に <code>fink selfupdate</code> と <code>fink update-all</code> で現在のパッケージ記述を取得し、残りのパッケージを更新します。
</p>
<p>
fink 0.23.0 からは、 UseBinaryDist オプション (
<xref chapter="usage" section="options">--use-binary-dist (or -b) オプション</xref>
あるいは <xref chapter="conf">Fink 設定ファイル</xref>で設定可能) 
を使用することで、 <code>fink selfupdate</code> 実行時にソースとバイナリ記述を更新します。
これにより、 <code>apt-get</code> の実行は必要なくなりました。
</p>
<p>
Fink Commander を使用している場合、 Binary-&gt;Update descriptions を選択してパッケージ一覧を更新し，
Binary-&gt;Dist-Upgrade packages でパッケージを更新します。
この後、 Source-&gt;Selfupdate で新しい情報ファイルをダウンロードし、
Source-&gt;Update-all を行います(詳細は前の節を参照)。
</p>
</section>
</chapter>
<chapter filename="conf" >
<title>Fink 設定ファイル</title>
<shorttitle>fink.conf</shorttitle>
<preface>
<p>
この章では、 Fink 設定ファイル (fink.conf) で提供されている設定と、 Fink にどのように影響するか、特に <code>fink</code> コマンドラインツール (とソースディストリビューション) について説明します。
</p>
</preface>
<section name="about" >
<title>fink.conf について</title>
<p>
最初に Fink がインストールされた時、設定ファイルの設定でいくつか質問をします。
例えば、どの <xref section="mirrors" >ミラー</xref> を使ってダウンロードをするか、どのように super-user 権限を使うかなどです。
このプロセスは <code>fink configure</code> コマンドでいつでも再実行することができます。
オプションを設定するには <em>fink.conf</em> ファイルを編集する必要があるものもあります。
一般的に、こういった設定は上級者専用のオプションです。
</p>
<p>
<em>fink.conf</em> ファイルは <code>/sw/etc/fink.conf</code> にあります。
自分の好きなテキストエディタで編集することができますが、スーパーユーザー権限が必要です。
</p>
</section>
<section name="syntax" >
<title>fink.conf 文法</title>
<p>
fink.conf にはたくさんの行がありますが、形式は:</p>
<codeblock>OptionName: Value</codeblock>
<p>と、行ごとになっています。
オプション名と値は : と空白ひとつで区切られています。
値の中身はオプションによりますが、通常はブール値 (&quot;True&quot; または &quot;False&quot;)、文字列、空白で区切られた文字列などです。
例えば:
</p>
<codeblock>
BooleanOption: True
StringOption: Something
ListOption: Option1 Option2 Option3
</codeblock>
</section>
<section name="required" >
<title>必須設定</title>
<p>
<em>fink.conf</em> の設定には、必須項目で、設定されていないと Fink が動作しないものがあります。
以下の設定はこのカテゴリーに入ります。
</p>
<ul>
<li>
<p>
<em>Basepath:</em> path</p>
<p>
Fink がインストールされている場所を知らせます。
Fink の最初のインストール時に変更していない限り、デフォルトでは <em>/sw</em> です。
この値を変更しては<em>いけません</em>。
<em>fink</em> が混乱します。
</p>
</li>
</ul>
</section>
<section name="optional" >
<title>ユーザー設定</title>
<p>
ユーザーが Fink の動作をカスタマイズするためのオプション設定があります。
</p>
<ul>
<li>
<p>
Fink はスーパーユーザー権限が必要な時があります。
有効な値は <em>sudo</em> か <em>su</em> です。
<em>none</em> を設定することもできますが、この場合 Fink を root で実行して下さい。
デフォルト値は <em>sudo</em> で、ほとんどの場合そのまま使用して下さい。
</p>
</li>
<li>
<p>
<em>Trees:</em> list of trees</p>
<p>使用できるツリーは:</p>
<codeblock>
local/main      - インストールしたいローカルパッケージ
local/bootstrap - Fink のインストール時に必要なパッケージ
stable/crypto   - 安定版の暗号パッケージ
stable/main     - 他の安定版パッケージ
unstable/crypto - 非安定版の暗号パッケージ
unstable/main   - 他の非安定版パッケージ
</codeblock>
<p>
独自のツリーを <code>/sw/fink/dists</code> ディレクトリに追加することもできますが、通常は必要ありません。
デフォルトのツリーは &quot;local/main local/bootstrap
stable/main&quot; です。
この一覧は <code>/sw/etc/apt/sources.list</code> ファイルと同期を保つようにして下さい。
(fink 0.21.0 より、 <code>fink</code> が自動的に行うようになりました)
</p>
<p>ツリーの順序には意味があります。後のツリーにあるパッケージが前のツリーのパッケージを書き換えます。</p>
</li>
<li>
<p>
<em>Distribution:</em> 10.1, 10.2, 10.2-gcc3.3, 10.3, 10.4</p>
<p>Fink はどのバージョンの Mac OS X を使っているか知る必要があります。
10.0 以前はサポートされていません。
10.1 は現バージョンからサポート対象外となりました。
10.2 は August 2003 Developer Tools に更新している場合のみサポートされています。
このフィールドは <code>/sw/lib/fink/postinstall.pl</code> を実行することで設定されます。
ユーザーがこの値を変えてはいけません。
</p>
</li>
<li>
<p>
<em>FetchAltDir:</em> path</p>
<p><code>fink</code> は通常、ソースを <code>/sw/src</code> に保存します。
この値を変えることで、他の場所にダウンロードしたソースコードを探させることもできます。
例えば:
</p>
<codeblock>FetchAltDir: /usr/src</codeblock>
</li>
<li>
<p>
<em>Verbose:</em> 0 から 3 の数値</p>
<p>
このオプションは、現在何をしているかをどの程度報告するかを設定します。
例えば:
<em>0</em>
<tt>Quiet</tt> (ダウンロード状況を報告しない)
<em>1</em>
<tt>Low</tt> (tarball の展開を報告しない)
<em>2</em>
<tt>Medium</tt> (ほとんど全て報告する)
<em>3</em>
<tt>High</tt> (全て報告する)
デフォルト値は 1 です。
</p>
</li>
        <li><p><em>SkipPrompts:</em> コンマで区切られた一覧</p>
        <p>(<code>fink-0.25</code> 以降) 
        このオプションに設定された項目に関し、<code>fink</code> は利用者に聞かなくなります。
        各プロンプトはいずれかのカテゴリに属し、そのカテゴリが SkipPrompts 一覧に指定されている場合、
        直ちに既定値が洗濯されます。</p>
        <p>現在、以下のプロンプトカテゴリがあります。:</p>
        <p><em>fetch</em> - Downloads と mirrors</p>
        <p><em>virtualdep</em> - 代替パッケージの選択</p>
        <p>既定値としてスキップされるプロンプトはありません。</p></li>
<li>
<p>
<em>NoAutoIndex:</em> ブール値</p>
<p>Fink は、パッケージ記述ファイルを /sw/var/db/fink.db にキャッシュし、実行するたびに読み込んでパースする時間をセーブします。
この値が &quot;True&quot; でない限り、 Fink はパッケージインデックスを更新する必要があるか確認します。
デフォルト値は &quot;False&quot; で、変更することは勧めません。
変更した場合、 <code>fink index</code> コマンドを手動で実行してインデックスを更新する必要があります。
</p>
</li>
<li>
<p>
<em>SelfUpdateNoCVS:</em> ブール値</p>
<p><code>fink selfupdate</code> コマンドは、 Fink パッケージマネージャーを最新版にアップグレードします。
このオプションは <tt>True</tt> の時、 Concurrent Version System (CVS) を使わないことを保証します。
これは <code>fink selfupdate-cvs</code> コマンドが自動的に設定するので、手動では変更しないで下さい。
</p>
</li>
<li>
<p>
<em>Buildpath:</em> パス</p>
<p>
Fink はソースからコンパイルする場合、パッケージごとに仮ディレクトリを作成します。
デフォルトでは Panther 以前では <filename>/sw/src</filename> 内に、Tiger からは <filename>/sw/src/fink.build</filename> 内に、
置かれていますが、別の場所を使いたい場合はここでパスを指定します。
仮ディレクトリについては、本文書中<xref section="developer">Developer Settings</xref> 節の
の <code>KeepRootDir</code> と <code>KeepBuildDir</code> のフィールドの解説をご覧下さい。
</p>
	    <p>
          Tiger では、BuildPath は <filename>.noindex</filename> または <filename>.build</filename> とつけることをお勧めします。
          こうしなければ、Spotlight が BuildPath 内にある仮ファイルをすべてインデックスしようとし、ビルドを遅くします。
    	</p>
</li>
</ul>
</section>
<section name="downloading" >
<title>ダウンロード設定</title>
<p>Fink がダウンロードする手段を変える設定はいくつかあります。</p>
<ul>
<li>
<p>
<em>ProxyPassiveFTP:</em> ブール値</p>
<p>このオプションを設定すると、 Fink は FTP ダウンロード時に &quot;passive&quot; モードを使います。
FTP サーバーやネットワークによっては、このオプションが <tt>True</tt> になっている必要があります。
アクティブ FTP 自体が廃止予定なので、常に設定しておくことを勧めます。
</p>
</li>
<li>
<p>
<em>ProxyFTP:</em> url</p>
<p>FTP プロキシを使う場合、アドレスを入力します。
例えば:
</p>
<codeblock>ProxyFTP: ftp://yourhost.com:2121/</codeblock>
<p>FTP プロキシを使わない場合は空欄にしておいて下さい。</p>
</li>
<li>
<p>
<em>ProxyHTTP:</em> url</p>
<p>HTTP プロキシを使う場合、アドレスを入力します。
例えば:</p>
<codeblock>ProxyHTTP: http://yourhost.com:3128/</codeblock>
<p>HTTP プロキシを使わない場合は空欄にしておいて下さい。</p>
</li>
<li>
<p>
<em>Download Method:</em> wget または curl または axel または axelautomirror</p>
<p>Fink はインターネットからファイルをダウンロードするのに３種類のアプリケーションを使うことができます - <em>wget</em>, <em>curl</em>, または <em>axel</em>。
<em>axelautomirror</em> は、 <em>axel</em> アプリケーションの実験的モードで、特定のファイルがある最も近いサーバーからダウンロードします。
<em>axelmirror</em> の使用は現時点では勧められません。
デフォルト値は <em>curl</em> です。
<em>DownloadMethod に選択したアプリケーションはインストールされている必要があります!</em>
          (i.e. もし存在しないダウンロードアプリケーションを指定しても、<code>fink</code> は <em>curl</em> を使うことはありません。)
</p>
</li>
<li>
<p>
<em>SelfUpdateMethod:</em> point, rsync または git</p>
<p>
<code>fink</code> は、数種類の手段でパッケージ情報ファイルを更新することができます。
<em>rsync</em> が推奨される設定で、 rsync を用いて、ユーザーにより指定されたツリー中の、変更されたファイルだけをダウンロードします。
<code>stable</code> や <code>unstable</code> <xref section="optional">trees</xref> 中のファイルを編集したり、新たに追加していた場合、削除されることに注意してください。
これらのファイルを必ず事前にバックアップしてください。
<em>git</em> では、 anonymous か Github アクセスを使用して fink レポジトリから ダウンロードします。
git はミラーを使えないという欠点があるため、 git サーバーに接続することができない時は更新できません。
<em>point</em> は最近リリースされたものだけをダウンロードします。
ユーザのパッケージがかなり古い場合は更新されないので、おすすめはできません。
</p>
</li>
        <li><p><em>SelfUpdateCVSTrees:</em> ツリーの一覧</p>
        <p>(<code>fink-0.25</code> 以降) 
		既定では、 <em>cvs</em> selfupdate は現在の distribution ツリーのみ更新します。
		このオプションは、selfupdate 時に後進する distribution の一覧を書き換えます。
		
		もし CVS/ ディレクトリの存在しないディレクトリも更新したい場合は、最近の "cvs" バイナリが、
		完全パス中 (例 dists/local/main など) に必要ですので、
		ご注意ください。</p></li>
<li>
<p>
<em>UseBinaryDist:</em> ブール値</p>
<p>
<code>fink</code> に、バイナリ版があり、まだシステム上にバイナリない場合はバイナリをダウンロードするように指示します。
これによりインストール時間を短縮できるので、このオプションを設定することをおすすめします。
<xref chapter="usage">--use-binary-dist オプション</xref>を使用しても同じですが、これは一度だけ有効です。 
<em>fink バージョン 0.23.0 から有効</em>。
</p>
<p>注記：このモードは、選択されたパッケージのバイナリバージョンが最新バージョンに一致する場合にのみ適用されます。
入手可能な最新バージョンを <code>fink</code> が選択するようにはなっていません。</p>
</li>
</ul>
</section>
<section name="mirrors" >
<title>ミラー設定</title>
<p>インターネットからソフトウェアを取得するのは退屈なことで、イライラすることが多いです。
ミラーサーバーは他のサーバーにあるファイルをコピーしますが、インターネット回線が速かったり、地理的に近いなど、ダウンロードが速い場合があります。
また、 <em>ftp.gnu.org</em> などの主サーバーの負荷を減らす役割もあります。
サーバーが落ちている時に代わりになる場合もあります。
</p>
<p>Fink が最適なミラーを選ぶためには、どの大陸のどの国にいるのかを知らせなければなりません。
サーバーからのダウンロードに失敗した場合、同じミラーを再度試すか、同じ国か大陸の別のミラーを試すか、あるいは世界中から他のミラーを試すかを聞いてきます。
</p>
<p><em>fink.conf</em> ファイルにはどのミラーを使いたいかの設定が書かれています。</p>
<ul>
<li>
<p>
<em>MirrorContinent:</em> 3 字のコード</p>
<p>この値を変えるには、 <code>fink configure</code> コマンドを使います。
3 字のコードは <code>/sw/lib/fink/mirror/_keys</code> にあるものから選択します。
例えば、アジアの場合:
</p>
<codeblock>MirrorContinent: asi</codeblock>
</li>
<li>
<p>
<em>MirrorCountry:</em> 6 字のコード</p>
<p>この値を変えるには、 <code>fink configure</code> コマンドを使います。
6 字のコードは <code>/sw/lib/fink/mirror/_keys</code> にあるものから選択します。
例えば、日本の場合:</p>
<codeblock>MirrorCountry: asi-JP</codeblock>
</li>
<li>
<p>
<em>MirrorOrder:</em> MasterFirst または MasterLast または MasterNever または ClosestFirst</p>
<p>
Fink は 'Master' ミラーをサポートしています。
これは、全ての Fink パッケージのソース tarball のレポジトリミラーです。
Master ミラーを使うと、ソースダウンロード URL が壊れないことが利点です。
ユーザーは、 Fink チームによってメンテナンスされているミラーを使うか、オリジナルソース URL と gnome, KDE, Debian などのミラーサイトだけを使うか、を選択できます。
この他、両者を組み合わせて、上で述べたように近い順に探して使うこともできます。
MasterFirst か MasterLast を使う場合、ダウンロードに失敗したら Master (あるいは Master 以外) に'スキップする'こともできます。
オプションは:
</p>
<codeblock>
MasterFirst - &quot;Master&quot; ソースミラーを最初に探す。
MasterLast - &quot;Master&quot; ソースミラーは最後に探す。
MasterNever - &quot;Master&quot;  ソースミラーは使用しない。
ClosestFirst - 最も近いソースミラーを最初に探す (全てのミラーを一緒にする)。
</codeblock>
</li>
        <li><p><em>Mirror-rsync:</em></p>
        <p>(<code>fink-0.25.2</code> 以降)
           <code>fink selfupdate</code> 時に <em>SelfupdateMethod</em> を 
           <code>rsync</code> 賭した場合、
           ここで指定された URL から rsync します。
           ここで指定する URL は、fink の全ての Distribution と Tree を含んだ anonymous rsync 用でなければなりません。</p></li>
</ul>
</section>
<section name="developer" >
<title>開発者用設定</title>
<p><em>fink.conf</em> のオプションには、開発者にのみ有用なものがあります。
一般的な Fink ユーザーがこれを変更することは勧めません。
以下のオプションがこれに該当します。</p>
<ul>
<li>
<p>
<em>KeepRootDir:</em> ブール値</p>
<p>パッケージのビルド後に <em>BuildPath</em> 内の <filename>root-[name]-[version]-[revision]</filename> ディレクトリを削除しません。
デフォルトは false です。
<em>注意、このオプションはハードディスクをいっぱいにします!</em>
一度だけ使いたい場合、 <em>fink</em> に <em>-K</em> フラグを渡して同じ効果が得られます。
</p>
</li>
<li>
<p>
<em>KeepBuildDir:</em> ブール値</p>
<p>パッケージのビルド後に <em>BuildPath</em> 内の <filename>[name]-[version]-[revision]</filename> ディレクトリを削除しません。
デフォルトは false です。
<em>注意、このオプションはハードディスクをいっぱいにします!</em>
一度だけ使いたい場合、 <em>fink</em> に <em>-K</em> フラグを渡して同じ効果が得られます。
</p>
</li>
</ul>
</section>
<section name="advanced" >
	<title>高度な設定</title>
		<p>この他にも有益なオプションがありますが、正しく使うには知識が必要です。</p>
		<ul>
			<li>
				<p><em>MatchPackageRegEx:</em> </p>
				<p>
					perl 正規表現的に適合するパッケージが一つしかない場合、 fink が尋ねてこないようになります。
					例:
				</p>
				<codeblock>MatchPackageRegEx: (.*-ssl$|^xfree86$|^xfree86-shlibs$)</codeblock>
				<p>'-ssl' で終わるパッケージ、 'xfree86'、および 'xfree86-shlibs' に正確に適合する。
				</p>
			</li>
			<li>
				<p><em>CCacheDir:</em> パス</p>
				<p>
					Fink パッケージ <code>ccache-default</code> がインストールされている場合、
					Fink パッケージを作成中にこれがつくるキャッシュがここに保存される。
					規定値は <filename>/sw/var/ccache</filename> 。
					<code>none</code> と設定された場合、 fink は CCACHE_DIR 環境変数を設定せず、
					ccache は <filename>$HOME/.ccache</filename> を使用する。
					ルートに所有されているファイルを自分のホームディレクトリに保存することもあり得る。
					<em>0.21.0 以降でのみ有効</em>.
				</p>
			</li>
        	<li><p><em>NotifyPlugin:</em> プラグイン</p><p>
           			パッケージがいつインストール/アンインストールされたかを答える告知プラグインを指定する。
           			規定値は Growl (<code>Mac::Growl</code> が必要)。
           			他のプラグインは、 <filename>/sw/lib/perl5/Fink/Notify</filename> にある。
				</p>
			</li>
        <li><p><em>AutoScanpackages:</em> ブール値</p>
           <p>
           <code>fink</code> が新しいパッケージをビルドしても、
           <code>apt-get</code> が直ちに検知する訳ではなりません。
           これまでは、<code>fink scanpackages</code> を実行することで
           <code>apt-get</code> に情報を提供していましたが、
           これを自動化できるようにしました。
           このオプションが <em>false</em> の場合は、パッケージビルド後に
           <code>fink scanpackages</code>
           は自動的に実行されません。
           既定値は <em>true</em> です。
           </p></li>
        <li><p><em>ScanRestrictivePackages:</em> ブール値</p>
           <p><code>apt-get</code> のためにパッケージをスキャンする際、
           <code>fink</code> は通常、現在のツリーにある全てのパッケージをスキャンします。
           しかしながら、apt レポジトリを公開するために、<code>Restrictive</code> や
           <code>Commercial</code> のパッケージを法律上含むことができないこともあるでしょう。
           このオプションが存在し、その値が <em>false</em> であれば、Fink はスキャン時にこれらのパッケージを外します。
           </p></li>
		</ul>
	</section>
	<section name="sourceslist" >
		<title>apt の sources.list ファイルを管理</title>
		<p>
			fink 0.21.0 より、 fink は apt がバイナリファイルをインストールする際に使う
			<code>/sw/etc/apt/sources.list</code> ファイルを積極的に管理します。
			デフォルトの sources.list ファイルは、以下の形式で、 Distribution と Trees が調整されています
		</p>
<codeblock># Local modifications should either go above this line, or at the end.
#
# Default APT sources configuration for Fink, written by the fink program

# Local package trees - packages built from source locally
# NOTE: this is automatically kept in sync with the Trees: line in
# /sw/etc/fink.conf
# NOTE: run 'fink scanpackages' to update the corresponding Packages.gz files
deb file:/sw/fink local main
deb file:/sw/fink stable main crypto

# Official binary distribution: download location for packages
# from the latest release
deb http://us.dl.sourceforge.net/fink/direct_download 10.3/release main crypto

# Official binary distribution: download location for updated
# packages built between releases
deb http://us.dl.sourceforge.net/fink/direct_download 10.3/current main crypto

# Put local modifications to this file below this line, or at the top.</codeblock>

		<p>
			このデフォルトファイルにより、 apt-get はまずローカルインストール状況を見て
			コンパイル済みバイナリを探します。次に、公式のバイナリディストリビューションを見ます。
			これをファイルの最初に持ってきたり (最初に検索される) 、
			ファイルの最後に持ってきる (最後に検索される) などの変更が可能です。
		</p>
		<p>
			Trees の行や Distribution を変えると、 fink はファイル中の &quot;default&quot; を新しい値に書き換えます。
			変更がファイルの先頭か末尾であれば、 Fink は、ファイルの変更をそのままにします。
		</p>
		<p>
			注記: fink 0.21.0 にアップグレードする前に <code>/sw/etc/apt/sources.list</code> を変更した場合、
			<code>/sw/etc/apt/sources.list.finkbak</code> として保存されます。
		</p>
	</section>
</chapter>
<chapter filename="usage" >
<title>コマンドライン fink ツールの使用方法</title>
<shorttitle>fink ツール</shorttitle>
<section name="using" >
<title>fink ツールの使用</title>
<p>
<code>fink</code> ツールはソースディストリビューションを操作する一連のコマンドから成り立っています。
いずれも、最低限一つのパッケージ名、あるいは複数のパッケージ名を処理します。
パッケージ名だけを指定 (例 gimp) しても、バージョン番号付の完全な名前 (例 gimp-1.2.1 または gimp-1.2.1-3) でも動作します。
バージョン番号が指定されていない時は、 Fink は自動的に最新のバージョンとリビジョンを選択します。
</p>
<p>以下は、 <code>fink</code> ツールのコマンド一覧です:</p>
</section>
<section name="options">
<title>グローバルオプション</title>
<p>
全ての fink コマンドに共通のオプションがあります。
これは、 <code>fink --help</code> を実行することで一覧が出ます:
</p>
      <p>(<code>fink-0.26.0</code> 時点で)</p>
      <p><em>-h, --help</em> - ヘルプテキストを表示します。</p>
      <p><em>-q, --quiet</em>  - <code>fink</code> を若干静かにさせます。
      反対は <em>--verbose</em>。<filename>fink.conf</filename> 中の <xref chapter="conf" section="optional">Verbose</xref> フラグを無視します。 </p>
      <p><em>-V, --version</em> - バージョン情報を表示します。</p>
      <p><em>-v, --verbose</em> - <code>fink</code> をウルサくさせます。
      反対は <em>--quiet</em>。<filename>fink.conf</filename> 中の <xref chapter="conf" section="optional">Verbose</xref> フラグを無視します。 </p>
      <p><em>-y, --yes</em> - 全ての質問に自動的に既定のオプションを適用します。</p>
      <p><em>-K, --keep-root-dir</em>   - 
                <code>fink</code> は、パッケージをビルド後に <xref chapter="conf" section="optional">Buildpath</xref> 中の <filename>root-[name]-[version]-[revision]</filename>
		        を削除せずに残します。 
		        <filename>fink.conf</filename> 内の <xref chapter="conf" section="developer">KeepRootDir</xref> フィールドに対応します。</p>
      <p><em>-k, --keep-build-dir</em>  - 
                <code>fink</code> は、パッケージをビルド後に <xref chapter="conf" section="optional">Buildpath</xref> 中の <filename>[name]-[version]-[revision]</filename>
		        を削除せずに残します。 
		        <filename>fink.conf</filename> 内の <xref chapter="conf" section="developer">KeepBuildDir</xref> フィールドに対応します。</p>
      <p><em>-b, --use-binary-dist</em> - 
    		    存在する場合、（時間とスペースを削減するために）
    		    バイナリディストリビュションからコンパイル済みパッケージをダウンロードします。
                このモードは、fink に特定のバージョンをダウンロードするよう指示します。
                バイナリが入手可能なバージョンを fink に選択させる訳ではありません。
		        <filename>fink.conf</filename> 内の <xref chapter="conf" section="downloading">UseBinaryDist</xref> フラグに対応します。</p>
      <p><em>--no-use-binary-dist</em>  - 
		        バイナリディストリビュションからコンパイル済みパッケージを使用しません。
		        --use-binary-dist フラグと逆です。
		        <filename>fink.conf</filename> 内の <xref chapter="conf" section="downloading">UseBinaryDist: true</xref> がない限り既定のアクションです。</p>
      <p><em>--build-as-nobody</em> - 
		        root でないユーザーになり、unpack, patch, compile, and install
		        を行います。このオプションでできたパッケージは機能しない可能性があります。
		        パッケージ開発およびデバッグ用途にのみご使用ください。</p>
      <p><em>-m, --maintainer</em> - 
                (<code>fink-0.25</code> 以降)
                以下に示すようにパッケージメンテナ用のアクションを行います:
                ビルド前に <filename>.info</filename> を validate、
                ビルド後に <filename>.deb</filename> を validate;
                ある種のビルド時エラーを fatal error にする;
                (<code>fink-0.26</code> 以降) フィールドで指定されたテストスイートの実行。
                これは、<em>--tests</em> と <em>--validate</em> を <code>on</code> にします。</p>
      <p><em>--tests[=on|off|warn]</em>
                (<code>fink-0.26.0</code> 以降)
                <code>InfoTest</code> を有効にし、 <code>TestScript</code> にて指定されたテストスイートを実行します
                (<varlink url="../packaging/reference.php#fields" varurl="../packaging/packaging.en.html#reference.fields">Fink パッケージかマニュアル</varlink> を参照)。
                このオプションに引数が与えられないか<code>on</code> の場合、
                ビルド時のテストスイートの失敗は fatal error 扱いになります。
                引数が <code>warn</code> であれば、失敗は warning として扱われます。</p>
      <p><em>--validate[=on|off|warn]</em> -
                ビルド時にパッケージを validate します。
                このオプションに引数が与えられないか <code>on</code> の場合、
                ビルド時の validate の失敗は fatal error 扱いになります。
                引数が <code>warn</code> であれば、失敗は warning として扱われます。</p>
      <p><em>-l, --log-output</em> - 
                それぞれのパッケージをビルド際のターミナル出力を保存します。
                既定では、ファイルは <filename>/tmp/fink-build-log_[name]-[version]-[revision]_[date]-[time]</filename> に保存されますが、
                <em>--logfile</em> でファイル名を指定することができます。</p>
      <p><em>--no-log-output</em> - 
                <em>--log-output</em> フラグとは反対に、パッケージビルド時に出力を保存しません。
                こちらが既定値です。</p>
      <p><em>--logfile=filename</em> - 
                パッケージのビルドログを、既定ファイルの代わりに <filename>filename</filename> に保存します
                (<em>--log-output</em> を参照、このフラグも自動的に設定されます)。
                特定のパッケージ情報を含めるためパーセント展開を使うこともできます。
                パーセント展開の一覧は<varlink url="../packaging" varurl="../packaging/packaging.en.html">Fink パッケージ化マニュアル</varlink> を参照してください。
                よく用いられるパーセント展開は:</p>
      <ul>
        <li><em>%n</em>    - package name</li>
        <li><em>%v</em>    - package version</li>
        <li><em>%r</em>    - package revision</li>
      </ul>
      <p><em>-t, --trees=expr</em> - 
                <em>expr</em> にマッチするツリーのパッケージのみ対象にします。
                expr の形式は、コンマ区切りのツリーリストです。
                <filename>fink.conf</filename> にあるツリー名称と <em>expr</em> を比較します。
                <code>fink</code> は、ここでマッチしたツリーのみを対象にします。
                <em>--trees</em> オプションが指定されない場合、<filename>fink.conf</filename> にあるツリーを、その順序で使用します。
                
                ツリー名称は、スラッシュ (/) を含むこともあります。
                この場合、対象のツリーの名称と正確にマッチする必要があります。
                あるいは、ツリーの最初に一致するパスのみになります。
                例えば、<em>--trees=unstable/main</em> は <em>unstable/main</em> ツリーにマッチし、
                <em>--trees=unstable</em> は unstable/main と
                <em>unstable/crypto</em> にマッチします。
                
                <em>expr</em> で使うことのできる魔法のツリー名称は以下の通り:</p>
      <ul>
        <li><em>status</em> - dpkg status データベースにあるパッケージを含む。</li>
        <li><em>virtual</em> - システムにある virtual パッケージを含む。</li>
      </ul>
      <p>現在のところ、この魔法のツリーの含まない（あるいは含めない）のは、install か remove のみ対応しています。</p>
      <p><em>-T, --exclude-trees=expr</em>
                expr にマッチしないパッケージのみ対象にします。
                expr の形式は <em>--trees</em> と同じで、魔法のツリーの名称も同じです。
                <em>--trees</em> と <em>--exclude-trees</em> の双方にマッチする場合は、除かれますので、ご注意ください。</p>
      <p><em>--trees</em> と --exclude-trees の例:</p>
      <ul>
        <li><code>fink --trees=stable,virtual,status install <em>foo</em></code> 
                <p><filename>fink.conf</filename> に unstable があっても、stable ツリーの <em>foo</em> をインストールします。</p></li>
        <li><code>fink --exclude-trees=local install <em>foo</em></code> 
                 <p>local にて作業しているバージョンではなく、 Fink の <em>foo</em> をインストールします。</p></li>
        <li><code>fink --trees=local/main list -i</code>
                 <p>local で編集し、インストールしたものを一覧表示します。</p></li>
      </ul>
<p>
ほとんどのオプションは名前から内容が推測できると思います(<xref chapter="conf" section="optional">ここ</xref>に Buildpath の定義があります)。
一回限りではなく、常に使用したいオプションは
<xref chapter="conf">Fink 設定ファイル</xref> (<filename>fink.conf</filename>)
で設定することができます。
</p>
</section>
<section name="install" >
<title>install</title>
<p><em>install</em> コマンドは、パッケージをインストールするのに使用します。
指定したパッケージをダウンロード、 configure 、ビルド、インストールを行ないます。
また、依存しているパッケージを確認をとった後で自動的にインストールします。
例:</p>
<codeblock>fink install nedit

Reading package info...
Information about 131 packages read.
The following additional package will be installed:
 lesstif
Do you want to continue? [Y/n]</codeblock>
<p>
<xref section="options">--use-binary-dist</xref> を使用することで時間を節約することができます。
</p>
<p>install コマンドのエイリアス: <em>update, enable, activate, use</em> (ほとんどは歴史的な理由による).
</p>
</section>
<section name="remove" >
<title>remove</title>
<p>
remove コマンドは、 'dpkg --remove' を呼び出してシステムからパッケージを削除します。
現在はまだ問題が残っていて、依存性は dpkg ツールに完全に任せています (通常は問題になりませんが)。
</p>
<p>
<em>remove</em> コマンドは実際のパッケージファイル (設定ファイルは除く) を削除するだけですが、 <filename>.deb</filename> 圧縮パッケージファイルはそのままにします。
これは、後で再インストールする際にコンパイルしなくても良いことを意味します。
ディスク容量が必要であれば、 <filename>/sw/fink/dists</filename> ツリーから <filename>.deb</filename> ファイルを取り除いてもかまいません。
</p>
<p><em>fink remove</em> 時に、以下のフラグを使用することができます。</p>
<codeblock>-h,--help             使用できるオプションを表示
-r,--recursive        当該パッケージに依存するパッケージを削除
                         (上述の問題を解決します)</codeblock>
<p>エイリアス: <em>disable, deactivate, unuse, delete</em>.</p>
</section>
<section name="purge">
<title>purge</title>
<p>
<em>purge</em> コマンドは、システムからパッケージを削除します。
<em>remove</em> コマンドとの違いは、こちらは設定ファイルも削除します。
</p>
</section>
<section name="update-all" >
<title>update-all</title>
<p>
このコマンドは、全てのインストール済パッケージを最新バージョンに更新します。
パッケージ一覧は必要ないので、入力するだけです:
</p>
<codeblock>fink update-all</codeblock>
<p>
<xref section="options">--use-binary-dist option</xref> はここでも使用することができます。
</p>
</section>
<section name="list" >
<title>list</title>
<p>
このコマンドは、パッケージ一覧を作成し、インストール状況、最新バージョン、短い説明を表示します。
引数なしでこれを呼んだ場合、全てのパッケージが表示されます。
パッケージ名やシェルパターンを用いて、マッチするパッケージだけ表示することもできます。
</p>
<p>
最初の列はインストール状況を表し、その意味は以下の通り:
</p>
<codeblock>     未インストール
 i   最新バージョンがインストール済
(i)  インストール済だが最新バージョンではない
 p   インストールされたパッケージにより提供されたバーチャルパッケージ</codeblock>
      <p>
        バージョン列は、常にパッケージで知られている最新 (最高) のバージョンを表示します。
        これは、インストールされているバージョンとは関係ありません。
        入手可能な全てのバージョンを知りたい場合は、 <xref section="dumpinfo">dumpinfo</xref> を実行します。
      </p>
<p>
<code>fink list</code> コマンドにはフラグがあります:
</p>
<codeblock>
-h,--help
	  利用可能なオプションを表示。
-t,--tab
	  一覧をタブ区切り形式で出力。
	  出力をスクリプトで処理する時に有効。
-i,--installed
	  インストール済パッケージのみ表示。
-o,--outdated
	  古いパッケージのみ表示。
-u,--uptodate
	  最新のパッケージのみ表示。
-n,--notinstalled
	  未インストールパッケージのみ表示。
-s expr,--section=expr
	  正規表現 expr にマッチするセクションのパッケージのみ表示。
-m expr,--maintainer=expr
	  正規表現 expr にマッチするメンテナによるパッケージのみ表示
-w=xyz,--width=xyz.
	  出力形式の幅を設定する。
	  xyz は数値か auto 。
	  auto はターミナル幅に応じて設定される。
	  デフォルトは auto 。
</codeblock>
<p>
例:
</p>
<codeblock>
fink list                 - 全てのパッケージを表示。
fink list bash            - bash があるか、どのバージョンか表示。
fink list --tab --outdated | cut -f 2     
                          - 古いパッケージのみ表示。
fink list --section=kde   - kde セクションのパッケージのみ表示。
fink --trees=unstable list --maintainer=fink-devel
                          - unstable ツリー中の、メンテナ不在のパッケージを表示。
fink list &quot;gnome*&quot;         - 'gnome' から始まるパッケージのみ表示。
</codeblock>
<p>
最後の例のクォーテーションは、シェルが解釈しないように必要です。
</p>
</section>
<section name="apropos" >
<title>apropos</title>
<p>
このコマンドはほとんど <xref section="list">fink list</xref>> と同じです。
一番顕著な違いは、 <code>fink apropos</code> がパッケージの検索にパッケージ記述を使うことです。
次に顕著なのは、検索文字列が必須で、オプションではないことです。
</p>
<codeblock>
fink apropos irc          - 名称か詳細に 'irc' が含まれるパッケージを表示。
fink apropos -s=kde irc   - 上と同様。ただし、 kde セクションに限定。
</codeblock>
</section>
<section name="describe" >
<title>describe</title>
<p>
このコマンドは、指定したパッケージの詳細を表示します。
現時点では詳細があるパッケージはまだ少ないので注意して下さい。
</p>
<p>
エイリアス: <em>desc, description, info</em>
</p>
</section>
    <section name="plugins">
      <title>plugins</title>
      <p><code>fink</code> で使用することのできるプラグインを一覧表示する。
      現在のところ、告知メカニズムとソース tarball チェックサムアルゴリズムのみ。</p>
    </section>
<section name="fetch" >
<title>fetch</title>
<p>指定したパッケージをダウンロードしますが、インストールはしません。
このコマンドは、以前ダウンロードしたかどうかに関わらず tarball をダウンロードします。</p>
      <p><code>fink fetch</code> コマンドには以下のフラグが使用できます:</p>
<codeblock>-h,--help		使用できるオプションを表示します。
-i,--ignore-restrictive	&amp;quot;License: Restrictive&amp;quot; なパッケージは fetch しません。
                      	制限には、ミラーを許可しないという制限もありますので、
                      	ミラー時に役に立ちます。
-d,--dry-run		パッケージ用にダウンロードするファイルの情報を表示するだけで、
                    実際にはダウンロードしません。
-r,--recursive		fetch するパッケージの依存するパッケージも fetch します。</codeblock>
</section>
<section name="fetch-all" >
<title>fetch-all</title>
<p>
<em>全ての</em>パッケージソースファイルをダウンロードします。
<xref section="fetch">fetch</xref> と同様、以前ダウンロードしたかどうかに関わらず tarball をダウンロードします。
</p>
<p><code>fink fetch-all</code> コマンドには以下のフラグが使用できます:</p>
<codeblock>-h,--help
-i,--ignore-restrictive
-d,--dry-run</codeblock>
</section>
<section name="fetch-missing" >
<title>fetch-missing</title>
<p>
ローカルに存在しない<em>全ての</em>パッケージソースファイルをダウンロードします。
このコマンドは、システム上に無いパッケージのみダウンロードします。</p>
<p><code>fink fetch-missing</code> コマンドには以下のフラグが使用できます:</p>
<codeblock>-h,--help
-i,--ignore-restrictive</codeblock>
</section>
<section name="build" >
<title>build</title>
<p>
パッケージをビルドしますが、インストールはしません。
ソース tarball は、なければダウンロードされます。
この結果、インストールできる .deb パッケージファイルを作成します。
すでに .deb ファイルがある場合は何もしません。
依存パッケージは、ビルドだけではなく、<em>インストールされます</em>ので注意して下さい。
</p>
<p>
<xref section="options">--use-binary-dist option</xref> はここでも使用することができます。
</p>
</section>
<section name="rebuild" >
<title>rebuild</title>
<p>パッケージをビルドします (build コマンドと同様に) が、すでにある .deb ファイルは無視し、上書きします。
パッケージがインストールされたら、新しい .deb ファイルは <code>dpkg</code> を用いてインストールされます。
パッケージの開発中にはとても役に立ちます。
</p>
</section>
<section name="reinstall" >
<title>reinstall</title>
<p>
インストールと同様ですが、インストールされていても <code>dpkg </code>を通してインストールします。
これは、誤ってパッケージファイルを消したり、設定ファイルを変えてデフォルトに戻したい場合などにも使えます。
</p>
</section>
<section name="configure" >
<title>configure</title>
<p>
<code>fink</code> を再設定します。
ミラーサイトの設定やプロキシの設定も行なうことができます。
</p>
      <p><code>fink-0.26.0</code> <em>にて登場</em>: 希望する場合、 unstable 釣り−を有効にします。</p>
</section>
<section name="selfupdate" >
<title>selfupdate</title>
<p>
このコマンドは、自動的に Fink の新リリースにアップグレードします。
Fink のウェブサイトへ新しいバージョンがあるか確認し、 <code>fink</code> 自体を含めたコアパッケージを更新します。
各種リリースのアップグレードの他、このコマンドを初めて実行した際に Git または rsync を選択した場合、<filename>/sw/fink/dists</filename> を、直接 Git または rsync でアップグレードすることもできます。
これを行なうと、全てのパッケージの最新版へアクセスできるようになります。
</p>
<p>
<xref section="options">--use-binary-dist option</xref> を使用すると、バイナリディストリビューション中の一覧も更新されます。
</p>
</section>
    <section name="selfupdate-rsync">
      <title>selfupdate-rsync</title>
      <p>
        このコマンドを使うことで、<code>fink selfupdate</code> 時にパッケージ一覧の更新に rsync を使用します。
      </p>
      <p>
        Fink をソースからのビルドで更新する場合、こちらの方法を推奨します。
      </p>
      <p>
        <em>注記:</em> rsync 更新は、使用中の<xref chapter="conf" section="optional">ツリー</xref>を更新するだけです
        (例えば、 unstable が <code>fink.conf</code> で設定されていない場合、unstable パッケージは更新されません)
      </p>
    </section>
<section name="index" >
<title>index</title>
<p>
パッケージキャッシュを再構築します。
通常は <code>fink</code> が更新の必要に応じて自動検出するので、手動で行なう必要はありません。
</p>
</section>
<section name="validate" >
<title>validate</title>
<p>
このコマンドは、 .info と .deb ファイルについていくつかの評価を行ないます。
パッケージメンテナは、 submit する前にパッケージ記述と対応するパッケージに対して実行して下さい。
</p>
<p>以下のフラグが使用できます:</p>
<codeblock>-h,--help            - 使用できるオプションを表示
-p,--prefix          - 評価対象ファイルの Fink 基本パスのプリフィックス (%p) をシミュレートする
--pedantic, --no-pedantic
                     - 形式に関する警告の表示を制御します
                      --pedantic が規定値</codeblock>
<p>
エイリアス: <em>check</em>
</p>
</section>
<section name="scanpackages" >
<title>scanpackages</title>
      <p>debs の <code>apt-get</code> データベースを更新します。
      既定では全てのツリーを更新しますが、引数を与えることでツリーを制限することもできます。</p>
</section>
<section name="cleanup" >
<title>cleanup</title>
      <p>古いファイルと一時ファイルを削除します。
      これにより、ディスクスペースが大幅に使えるようになります。
      以下のモードを指定することができます:</p>
      <codeblock>
--debs               - 現在有効なツリー、あるいは既にインストールされているどのパッケージの
                       記述ファイル (.info) にもないバージョンのパッケージに対応する .deb
                       ファイル（コンパイル済みバイナリパッケージアーカイブ）を削除します。
--sources,--srcs     - 現在有効なツリー中にあるどのパッケージ記述ファイル (.info) にも使用され
　　　　　　　　　　　　　　　ていないファイルを削除します。
--buildlocks, --bl   - 腐った buildlock パッケージを削除します。
--dpkg-status        - dpkg "status" データベース以外からインストールされたパッケージを削除。
--obsolete-packages  - 全ての古いパッケージを削除するよう試みます。(fink-0.26.0 にて登場)
--all                - 全てのモード。 (fink-0.26.0 にて登場)
</codeblock>
      <p>モードが指定されていない場合、<code>--debs --sources</code> が既定のオプションとなります。</p>
      <p>これらに加え、以下のオプションも使うことができます:</p>
      <codeblock>
-k,--keep-src        - 古いソースファイルを、削除するのではなく /sw/src/old/ に移します。
-d,--dry-run         - 削除対象のファイルを一覧表示し、実際には削除しません。
-h,--help            - 使用可能なモードとオプションを表示します。</codeblock>
</section>
    <section name="dumpinfo">
      <title>dumpinfo</title>
      <p>
	  注記: 0.21.0 以降の <code>fink</code> で有効。
	  </p>
	  <p>
	<code>fink</code> がどのようにパッケージの <filename>.info</filename> ファイルを構文解析するかを表示します。
	以下の<em>オプション引数</em>に応じて、各種フィールドとパーセント展開も表示されます。
      </p>
      <codeblock>
-h, --help           - 利用可能なオプションを一覧表示します。
-a, --all            - パッケージ記述にある全てのフィールドを表示します。これは、
                       --field または --perfect フラグが与えらない場合の
                       既定モードとなります。
-f fieldname,        - 与えられたフィールドの値を、与えられた順序に従って表示します。
  --field=fieldname
-p key,              - 与えられたパーセント展開キーの値を、与えられた順序に従って表示します。
   --percent=key
</codeblock>
    </section>
    <section name="show-deps">
      <title>show-deps</title>
      <p>fink-0.23-6 および以降。</p>
      <p>
      	コンパイル時 (ビルド) と実行時 (インストール) の依存するパッケージを人間が読める一形式で表示する。
      </p>
    </section>
</chapter>
</document>
