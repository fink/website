<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE document SYSTEM "../finkdoc.dtd">
<document filename="index" lang="zh" >
  <title>Fink 用户指南</title>
  <shorttitle>用户指南</shorttitle>
  <cvsid>$Id: uguide.zh.xml,v 1.22 2019/01/19 10:11:12 nieder Exp $</cvsid>
  <preface>
    <p translated="no">
      <!-- start translation -->
      This document gives an overview over all features of Fink.
      <!-- end translation -->
(下面的旧文档可以给你更详尽的概念：
<link url="/doc/install/index.php" >安装</link>,
<link url="/doc/usage/index.php" >使用</link>
以及包括在发行安装版本的磁盘映象中的 ReadMe.rtf 文件。)
同时也可以查阅本网站的
<link url="/doc/" >文档部分</link> ，它包括一些其它的有用资讯。
</p>
    <p>
欢迎查看 Fink 用户指南。
本指南包括从源代码或安装包来初次安装或升级 Fink 的步骤。
同时也会涉及软件包的安装和维护。
</p>
  </preface>
  <chapter filename="intro" >
    <title>介绍</title>
    <shorttitle>介绍</shorttitle>
    <section name="what" >
      <title>Fink 是什么？</title>
      <p>
Fink 是 OS X 和 Darwin 上的开放源代码的 Unix 软件。
它给你的 Mac 带来种类众多的 Linux 和其他类似系统上开发的免费命令行及图形界面软件。
</p>
    </section>
    <section name="req" >
      <title>系统要求</title>
      <p>
任何情况下你都需要：
</p>
      <ul>
        <li>
          <p>
安装了 Mac OS X 10.2 或以上的系统，或着相对应的 Darwin 版本。
两者的更早版本<em>不能</em>使用。
后面有关于支持系统的更多信息。
</p>
        </li>
        <li>
          <p>
互联网访问。
要安装的源代码或可执行安装包都需要从互联网下载站点进行下载。
</p>
        </li>
      </ul>
      <p>
如果你需要使用源代码发布的版本（详见底下），你还需要：
</p>
      <ul>
        <li>
          <p translated="no">
<!-- start translation -->
Developer tools.  
On Mac OS X, install the Developer.pkg package from the Developer
Tools (known as XCode for 10.3 and 10.4) CD (they're on the main DVD for OS 10.4), or <link url="http://connect.apple.com">download</link> the latest version--this is often desirable, as later versions frequently fix issues (though admittedly sometimes they break things).    
Note that the tools must match your Mac OS X version.
On Darwin, the tools should be present in the default install.
<!-- end translation -->
</p>
          <p>
即使你不打算从源代码编译安装软件，安装开发工具仍然是个很好的主意。
开发工具包安装的一些程序实际上是一些通用的命令行工具。
后面你要安装的一些软件包可能需要有他们才可以运行。
</p>
        </li>
        <li>
          <p>
耐心。
编译一些大的软件包需要花比较长时间。
我这里指的是按小时或者甚至是按天计算的时间。
</p>
        </li>
      </ul>
    </section>
    <section name="supported-os" >
      <title>支持的操作系统</title>
      <!-- start translation -->
      <p translated="no"><em>Mac OS X 10.4</em> is the leading-edge platform, and is considered to be <quote>fully supported and tested</quote>, though as a newer operating system there are still some issues.  Most of the developers run it, and those who are running 10.3 have 10.4 users test their work. Note, however, that
fink on intel hardware is still considered to be of <em>beta</em> quality.</p>
      <p translated="no">
        <em>Mac OS X 10.3</em> is is considered to be <quote>fully supported and tested</quote>, although there may still be stray compile problems with single packages. Many of the developers run it, and those who don't have 10.3 users test their work.
</p>
      <p translated="no"><em>Mac OS X 10.2</em> is still supported to some extent.  Fink 0.6.4 is the last distribution to suppport this OS.</p>
      <!-- end translation -->
      <p>
        <em>Mac OS X 10.1</em> 在某种程度仍然被支持。
你只能运行 Fink 0.4.1，在它上面没有更新的版本。
</p>
      <p>
Darwin 8.x 是与 Mac OS X 10.4 对应的 Darwin 版本，
而 Darwin 7.x 是与 Mac OS X 10.3 对应的 Darwin 版本，
而 <em>Darwin 6.x</em> 则是与 Mac OS X　10.2 相应的版本。
总体来讲它们都可以使用，但没有经过非常详细的测试。因为多数人都只是在 Mac OS X 上运行。
对于一些使用了 OS X 专有特性的软件你可能会碰到问题 —— 受影响的软件包包括 XFree86，可能也包括 esound。
</p>
    </section>
    <section name="src-vs-bin" >
      <title>源代码与二进制安装包的对比</title>
      <p>
软件是用人们可阅读的编程语言来编写（&quot;开发&quot;）而成的；这种形式称为 &quot;源代码&quot;。
要使得计算机能够真正运行它，它必须转换为一种底层的机器指令代码（对多数人来说，这些代码是不可读的）。
这个转换过程称为 &quot;编译&quot; 经过转换后的程序称为　&quot;可执行&quot; 或 &quot;二进制&quot;程序。
（这个过程有时候也称为 &quot;构建&quot;，因为实际上它还包括除编译以外的其它步骤）。
</p>
      <p>
当你购买商业软件的时候，你不会看到源代码。这些公司甚至把它当作商业机密。
你只能获得一个已经可以运行的可执行程序，这意味着你没有办法修改程序，甚至没有办法知道它在运行过程究竟做了什么事情。
</p>
      <p>
对于 <link url="http://www.opensource.org/" >开放源码</link>
软件（简称开源软件）则不是这样。
顾名思义，它的源代码是公开给任何人查看和修改的。
事实上，对多数的开源软件的作者只是以源代码方式发布他们的作品，你需要在你自己的计算机上进行编译以后才可以使用。</p>
      <p>
Fink 可以让你自己在两种方式中间选择。
使用 &quot;源代码&quot; 发行版本的话，你将现在原始的源程序，并在上面应用 OS X 和 Fink 的编译规则，然后在你的机器上进行编译。
整个过程是全自动的，但是会花较长的时间。
使用 &quot;二进制&quot; 发行版本的话，你将下载从 Fink 站点下载已经编译好的软件包进行安装，这可以节省你自己编译的时间。
事实上也可以按照你的需要混合这两种方式。
本指南的其余部分将介绍如何做到这一点。
</p>
    </section>
  </chapter>
  <chapter filename="install" >
    <title>首次安装</title>
    <shorttitle>安装</shorttitle>
    <preface>
      <p>
在第一次安装时，一套基本的软件包管理工具会被安装到你的计算机上。
在这之后你需要设置好你的 shell 来使用 Fink 所安装的软件。
你只需要做一次这件事情，以后你可以直接从任何 Fink 安装版本（高于 0.2.0 发布版）升级，而不需要重新安装。
这会在<xref chapter="upgrade" >如何升级</xref>一章进行介绍。
</p>
      <p>
在软件包管理工具安装好以后，你可以用它来安装更多的软件。
这会在 <xref chapter="packages" >安装软件包</xref>一章进行介绍。
</p>
    </preface>
    <section name="bin" >
      <title>安装二进制发行版</title>
      <p>
二进制发行版以 Mac OS X 安装包 (.pkg) 的形式提供，它被打包在一个磁盘映象文件(.dmg)中。
从<link url="/download/bindist.php" >下载页面</link>下载了磁盘映象文件以后（你可能需要使用你的浏览器的 &quot;保存目标为...&quot; 或 &quot;下载到磁盘&quot; 功能），双击这个磁盘文件来装载上它。
在 &quot;磁盘工具&quot; 程序（10.3以前是 &quot;磁盘拷贝&quot;）校验完你下载的文件后，在你的桌面上（或你下载到的文件夹里面）会出现一个 &quot;Fink 0.x.x Installer&quot; 的磁盘图标，打开它。
在里面你会看到一些文档和一个安装包。
双击安装包并按照屏幕上的说明完成剩下的安装。
</p>
      <p>
你会被要求输入管理员密码，同时会显示一些文本。
请阅读它们 —— 它会比这份用户指南的版本更新。
当安装程序让你选择一个宗卷进行安装时，一定要选择系统宗卷（也就是你安装 OS X 的宗卷）。
如果你选择了错误的宗卷，安装仍然可以进行，但是安装后的 Fink 不能正常工作。
当安装程序运行完毕以后，继续
<xref section="setup" >设置你的环境</xref>部分。
</p>
    </section>
    <section name="src" >
      <title>安装源代码发行版</title>
      <p>
源代码发行版以标准的 Unix tarball (.tar.gz)　方式提供。
它仅包含 <code>fink</code> 软件包管理器以及它自己的软件包描述，整个软件包的其它部分会在安装的过程中才下载。
你可以从这个
<link url="/download/srcdist.php" >下载页面</link>获得它。
很重要的是，你不能用 StuffIt Expander 来解压缩下载后的 tar 压缩档。
由于某些原因，StuffIt 仍然不能处理长文件名。
如果 StuffIt Expander 已经自动解压了你下载的压缩档，把它解压产生的文件夹删除掉。
</p>
      <p translated="no">
源代码发行版必须从命令行安装，因此请打开　Terminal.app 并进入到你保存所下载到的
fink-0.x.x-full.tar.gz 压缩档的目录。
<!-- start translation -->
(Note: If you have OS X 10.4 and XCode 2.1, you should use
<filename>fink-0.8.0-full-XCode-2.1.tar.gz</filename> instead, and make
the appropriate changes below.)
<!-- end translation -->
以下的命令将解压压缩档：
</p>
      <codeblock>tar -xzf fink-0.x.x-full.tar.gz</codeblock>
      <p>
它会创建一个与压缩档同名的新目录。
我们将继续使用 <code>fink-0.x.x-full</code> 这个名称来代表它。
现在，进入这个新目录，并运行 bootstrap 脚本：
</p>
      <codeblock>cd fink-0.x.x-full
./bootstrap.sh</codeblock>
      <p>
这个脚本会对你的系统进行一些检查，然后使用 sudo 把你提升到 root 权限——这时会提示你输入你的密码。然后，脚本会询问你安装的路径，除非你有一个很好的理由，否则你应该使用默认的——
<filename>/sw</filename>。
只有这样，以后你才可以顺利安装下载的二进制方式提供的安装包。另外，我们全部的例子都使用这个路径，所以如果你使用其它的安装路径，你要记住进行相应的替换。
</p>
      <p>
下一步是 Fink 的配置。
它会询问你一些象代理和镜象服务器设置以及是否需要详细信息输出等问题。
如果你不是很明白有些问题，你可以按回车键接受默认的选择。
以后你还可以通过 <code>fink　configure</code> 这个命令重新这个配置过程。
</p>
      <p>
当 bootstrap 收集到它所需要的所有信息以后，它会下载基本系统所需要的源代码并编译它。
这以后不再需要用户的交互。
如果你看到一些软件包被反复编译两次不需要担心。
这是正常的现象，因为要构件一个软件包管理器的二进制安装包，你首先需要有一个软件包管理器。
</p>
      <p>
当 bootstrap 脚本执行完毕，请继续
<xref section="setup" >设置你的环境</xref>部分。
</p>
    </section>
    <section name="setup" >
      <title>设置你的环境</title>
      <p translated="no">
要使用 Fink 目录下安装的软件，包括软件包管理器本身，你必须相应设置 PATH 环境变量。
<!-- start translation -->
In most cases, you can do this by entering the command
<!-- end translation -->
      </p>
      <codeblock>/sw/bin/pathsetup.sh</codeblock>
      <!-- start translation -->
      <p translated="no">Note that for some older versions of
	fink the program was called  <filename>pathsetup.command</filename>, and one could
	run it via <code>open /sw/bin/pathsetup.command</code>.      </p>
      <!-- end translation -->
      <p>
如果由于某种情况这种方法不奏效，你可以手工配置它。不过，这会随你使用的 Shell 程序不同而不同。
你可以通过打开终端窗口并运行下面指令来查看你 shell 类型：
</p>
      <codeblock>echo $SHELL</codeblock>
      <p>
如果命令输出 &quot;csh&quot; 或 &quot;tcsh&quot; ，那么你使用的是 C shell。如果输出是　bash，zsh，sh　或其它类似的东西，你很可能是在使用 Bourne shell 的一个变种。
</p>
      <ul>
        <li>
          <p>
            <strong>Bourne Shell</strong>（在 Mac OS X 10.3 后是默认的shell程序） </p>
          <p>
   如果你使用 Bourne 风格的 shell （比如 sh，bash，zsh），把下面的几行添加到你的主目录下的 <code>.profile</code> 文件中（或者，如果你已经有一个 <code>.bash_profile</code> 文件，你也可以添加到那里）：
  </p>
          <codeblock>. /sw/bin/init.sh</codeblock>
          <p>
   如果你不知道如何添加，运行下面的命令：
  </p>
          <codeblock>cd
pico .profile</codeblock>
          <p>
   你现在进入到一个全屏幕（准确地说，全终端窗口）文本编辑器，应该很容易能够输入 <code>. /sw/bin/init.sh</code> 这一行。如果有个提示说 &quot;New file&quot;，这不是什么问题。确定在这行的末尾你至少输入了回车，然后按 Control-O，再回车，最后　Control-X 退出编辑器。
  </p>
        </li>
        <li>
          <p>
            <strong>C Shell</strong>（在 Mac OS X 10.2 或更早的版本是默认 Shell) </p>
          <p>
   如果你使用 tcsh，在你主目录下的<filename>.cshrc</filename>文件中添加下面一行：
  </p>
          <codeblock>source /sw/bin/init.csh</codeblock>
          <p>
   如果你不懂怎么添加，运行下面的命令：
  </p>
          <codeblock>cd
pico .cshrc</codeblock>
          <p>
   你现在进入到一个全屏幕（准确地说，全终端窗口）文本编辑器，应该很容易能够输入 <code>source /sw/bin/init.sh</code> 这一行。如果有个提示说 &quot;New file&quot;，这不是什么问题。确定在这行的末尾你至少输入了回车，然后按 Control-O，再回车，最后　Control-X 退出编辑器。
  </p>
          <p>有些情况下你需要编辑更多的文件：</p>
          <ol>
            <li>
              <p>你已经有一个<code>~/.tcshrc</code>文件。</p>
              <p>有些第三方软件会创建这个文件，或者你自己这样做。
  这时，<code>~/.tcshrc</code> 将会被读取，而 
  <code>~/.cshrc</code> 则被忽略了。
  推荐的步骤是用你上面编辑<code>~/.cshrc</code>时类似的方法编辑 <code>~/.tcshrc</code>，并在最后加入这样一行：</p>
              <codeblock>source ~/.cshrc</codeblock>
              <p>这样，如果你要删除 <code>~/.tcshrc</code>，你还可以运行 Fink。</p>
            </li>
            <li>
              <p>你曾经按照 <code>/usr/share/tcsh/examples/README</code> 文档里面的要求进行操作。</p>
              <p>这些指南告诉你创建一个 <code>~/.tcshrc</code> 文件及一个 <code> ~/.login</code> 文件。这种情况下的问题是 <code>~/.login</code> 文件在 <code>~/.tcshrc</code> 文件之后运行，并用 source 语句引用 <code>/usr/share/tcsh/examples/login</code> 文件的内容。后者包括一条语句重写了你前面设置的 PATH 环境变量。在这种情况下，你需要做的是创建 <code>~/Library/init/tcsh/path</code>文件：</p>
              <codeblock>mkdir -p ~/Library/init/tcsh
  pico ~/library/init/tcsh/path</codeblock>
              <p>并加入：</p>
              <codeblock>source ~/.cshrc</codeblock>
              <p>到文件里面。你还需要按照第一点所说的那样修改你的 .tcshrc 文件，以确保在 <code>~/.login</code> 文件没有被读取的时候 PATH 仍然被正确设置。</p>
            </li>
          </ol>
          <p>
  编辑 .cshrc （以及其它启动文件）只会影响新的 Shell（也就是说，新打开的终端窗口），所以你也需要在你编辑这个文件之前打开的所有终端窗口中运行这个命令。
  你还需要运行 <code>rehash</code> 命令，因为 tcsh 会在内部缓存所有可用的命令。
  </p>
        </li>
      </ul>
      <p>
注意这个 <filename>init.sh</filename> 和 <filename>init.csh</filename> 脚本还添加了 <filename>/usr/X11R6/bin</filename> 和
<filename>/usr/X11R6/man</filename> 到你 PATH 环境变量中，使得你可以在安装了 X11 以后使用它。
Fink 软件包可以添加它们自己的设置，例如，qt 软件会设置 QTDIR 环境变量。
</p>
      <p>
一旦你的环境设置好，继续
<xref chapter="packages" >安装软件包</xref> 章节来了解如何用 Fink 所包括的软件包管理工具来安装一些实际的软件包。
</p>
    </section>
  </chapter>
  <chapter filename="packages" >
    <title>安装软件包</title>
    <shorttitle>软件包</shorttitle>
    <preface>
      <p>
现在你已经做完了一些可以称为 Fink 安装的事情。
本章介绍怎么用 Fink 来安装一些实际的软件包，这也是你安装 Fink 的目的。
在我们解释如何用源码或二进制包安装前，有一些重要的信息是对这两种方式都适用的。
</p>
    </preface>
    <section name="bin-dselect" >
      <title>用 dselect 安装二进制包</title>
      <p>
        <code>dselect</code> 是一个让你查看可用的软件包清单的程序，同时也可以选择你所需要安装的包。
它在 Terminal.app 程序中运行，但会占用整个&quot;屏幕&quot; 并使用简单的键盘进行控制浏览。
和其它软件包管理工具一样 <code>dselect</code> 需要
root 用户权限，所以你需要(以具有管理员权限的帐号)使用 sudo：
</p>
      <codeblock>sudo dselect</codeblock>
      <p>
        <em>注意：</em>
        <code>dselect</code> 已知在 Mac OS X 的终端程序中运行存在问题。你需要套在使用它前运行下面的命令，或把它们放到合适的启动文件中（例如 <code>.cshrc</code> 或 <code>.profile</code>）：</p>
      <p>对 tcsh 用户：</p>
      <codeblock>setenv TERM xterm-color</codeblock>
      <p>对 bash 用户：</p>
      <codeblock>export TERM=xterm-color</codeblock>
      <p>
在主菜单里面有几个选择：
</p>
      <ul>
        <li>
          <p>
            <em>[A]ccess</em> - 这个选项配置所使用的网络访问方法。
<em>你不需要运行这个</em>，因为 Fink 已经为你预先配置好一切东西了。
事实上，你应该避免使用这个菜单，因为它可能会用一些不合适的选项来覆盖默认的配置。
</p>
        </li>
        <li>
          <p>
            <em>[U]pdate</em> - 这个选项从 Fink 站点中下载所有可用的软件包的清单。
这个选项并不实际安装或更新任何软件包，它只是更新软件包浏览器中所使用的清单。
在安装 Fink 以后你必须知道运行它一次。
</p>
        </li>
        <li>
          <p>
            <em>[S]elect</em> - 这个选项告诉你实际的软件包清单，在这里你可以按你的希望选择或反选你系统里面的软件包。在后面我们会详细介绍这一点。
</p>
        </li>
        <li>
          <p>
            <em>[I]nstall</em> - 这是开始实际操作的地方。
以上的菜单项只是影响 dselect 的软件包列表和状态数据库。而这个菜单项则是实际开始下载和安装你要求的软件包。
它也会删除你在浏览器中反选的软件包。
</p>
        </li>
        <li>
          <p>
            <em>[C]onfig</em> and <em>[R]emove</em> - 这是 apt 之前的留下来的遗迹。
你不需要使用它们，虽然它们不会有什么害处。
</p>
        </li>
        <li>
          <p>
            <em>[Q]uit</em> - 这应该不需要更多解释。
</p>
        </li>
      </ul>
      <p>
多数时间你会在软件包浏览器中使用 dselect，这可以通过 &quot;[S]elect&quot; 菜单项访问。
在 dselect 显示软件包清单之前，它会显示一个介绍性的帮助屏幕。
你可以按 'k' 按钮来获得一个键盘命令的详细清单，或按空格键进入软件包清单。
</p>
      <p>
你可以使用上下方向键来在清单中进行浏览。
你可以用 '+' and '-'　来进行选择。
当你选择的软件包安装时需要其它的软件包时，dselect 会显示一个相关的子列表。
多数情况下，你只需要按回车键来接受 dselect　的选择。
你可以在子列表中进行调整（例如，选择另外一个可替代的软件包依赖关系），或者按 'R'
（即是 Shift-R）来回到原来的状态。
子列表和主软件包清单都是通过按回车键离开。
当你对你的选择感到满意以后，离开主清单并使用 &quot;[I]nstall&quot; 菜单项来实际安装软件包。
</p>
    </section>
    <section name="bin-apt" >
      <title>用　apt-get　安装二进制包</title>
      <p>
        <code>dselect</code> 本身并不实际安装软件包。
相反，它会运行 apt 来做这些实际工作。
如果你喜欢一个纯命令行界面，你可以用 <code>apt-get</code> 命令直接使用 apt　的功能。
</p>
      <p>
和 dselect　一样，你首先需要用这个命令下载可用的软件包清单：
</p>
      <codeblock>sudo apt-get update</codeblock>
      <p>
象 dselect 中的&quot;[U]pdate&quot; 菜单项一样，它并不会实际更新你计算机中的文件，而只是更新 apt 的可用软件包列表。要安装软件包，你需要给 apt-get 一个名字，象这样：
</p>
      <codeblock>sudo apt-get install lynx</codeblock>
      <p>
如果 apt-get 发现这个软件还需要其它软件包安装，它会告诉你一个清单，让你确认。
然后它会下载和安装所要求的软件包。
删除已安装的软件包也很容易：
</p>
      <codeblock>sudo apt-get remove lynx</codeblock>
      <p>
<!-- [FIXME: using apt-cache to search for packages] -->      </p>
    </section>
    <section name="bin-exceptions" >
      <title>安装没有二进制版本的依赖软件包</title>
      <p>有些时候，当我们执行一个二进制软件包安装的时候，你会或得一个依赖关系不能安装的错误信息。比如：</p>
      <codeblock>Sorry, but the following packages have unmet
dependencies:
foo: Depends: bar (>= version) but it is
not installable
E: Sorry, broken packages</codeblock>
      <p>这种现象的原因时你要安装的软件包需要依赖于另外一个软件包，但是那个软件包由于版权许可问题不能以二进制包方式发布。你必须用源代码来安装这个依赖关系（见下一部分）。</p>
    </section>
    <section name="src" >
      <title>从源代码安装软件包</title>
      <!-- start translation -->
      <p translated="no">
The <code>fink</code> tool will allow you to install packages that are not yet
available in the <xref chapter="intro" section="src-vs-bin">binary
distribution</xref>.
      </p>
      <!-- end translation -->
      <p>首先，你需要在你的系统中安装合适版本的开发工具。在 <link url="http://connect.apple.com" >http://connect.apple.com</link>中最新版本免费注册以后可以下载得到它。</p>
      <p>
要获得可以从源代码安装的软件包清单，可以用 <code>fink</code> 工具查询：
</p>
      <codeblock>fink list</codeblock>
      <p>
第一列是安装状态（空白表示没有安装，<code>i</code> 表示已安装，<code>(i)</code> 表示已安装但是并不是最新的版本），后面是软件包的名字，最新版本，以及一个简要的描述。
你可以用　&quot;describe&quot; 命令 （&quot;info&quot; 是它的一个别名）来获得某个软件包的更多信息：
</p>
      <codeblock>fink describe xmms</codeblock>
      <p>
当你找到一个你希望的软件包以后，可以使用
&quot;install&quot; 命令：
</p>
      <codeblock>fink install wget-ssl</codeblock>
      <p>
<code>fink</code> 命令首先会检查所有需要先安装的软件（&quot;依赖关系&quot;）是否已经存在，然后询问你时候可以安装那些现在还不存在的软件包。
然后它会开始下载源代码，解包，给它打上必要的补丁，编译，然后把最终的结果安装到你的系统上。
这可能会花费比较长的时间。
如果你发现此过程中发生了错误，请首先查看
<link url="/faq/" >FAQ</link>。
</p>
      <!-- start translation -->
      <p translated="no">
For <code>fink</code> versions since 0.23.0 you can tell it to try to download
pre-compiled binary packages, if available, instead of building them. Just pass
the <xref chapter="usage" section="options">--use-binary-dist (or -b)
option</xref> to <code>fink</code>. This can save you a lot of time. E.g.
calling
      </p>
      <codeblock>fink --use-binary-dist install wget-ssl</codeblock>
      <p>or</p>
      <codeblock>fink -b install wget-ssl</codeblock>
      <p translated="no">
will first download all dependencies for wget-ssl that are available from the
binary distribution and only build the remainder from source. This option can
also be enabled permanently in the <xref chapter="conf">Fink configuration
file</xref> (fink.conf) or by running the command <code>fink configure</code>.
      </p>
      <p translated="no">
More details about the <code>fink</code> tool are available in the chapter 
<xref chapter="usage">"Using the fink Tool from the Command Line"</xref>.
      </p>
      <!-- end translation -->
    </section>
    <section name="fink-commander">
      <title>Fink Commander</title>
      <p>Fink Commander 是 <code>apt-get</code> 和 <code>fink</code> 工具的 Aqua 界面。二进制包菜单可以让你管理二进制安装包，源程序菜单则相应管理源程序安装包。</p>
      <p>Fink Commander 被包括在 Fink 的二进制安装包中。如果你想要单独下载它（比方说，你是从源代码开始建立 Fink 的），或者需要额外的信息，可以访问 <link url="http://finkcommander.sourceforge.net" >Fink Commander 网站</link>。</p>
    </section>
    <section name="available-versions" translated="no">
      <title>可用版本</title>
      <p>当你希望安装一个软件包，你应该首先查看 <link url="http://pdb.finkproject.org/pdb/index.php" >软件包数据库</link> 来找找是不是可以通过 Fink 获得。软件包的各个可用版本会在一个表格的多个行中出现。就象这样：</p>
      <!-- start translation -->
      <ul>
        <li>Binary Distribution
<ol>
            <li><p>
            <em>0.4.1:</em>  this is the version that can be installed from binaries for OS 10.1.</p></li>
            <li><p><em>0.6.4:</em>  this is the version that can be installed from binaries for OS 10.2.</p></li>
            <li><p><em>0.7.2</em>
  This is the base version that can be installed from binaries for OS 10.3.  If you <xref chapter="install" section="bin">update</xref> Fink, later versions of some packages may be available.</p> 
        </li>
            <li><p><em>&fink_version;:</em>  This is the base version that can be installed from binaries for OS 10.5.  If you <xref chapter="install" section="bin">update</xref> Fink, later versions of some packages may be available.
</p></li>
          </ol>
          
        </li>
      </ul>
      <ul>
        <li>CVS/rsync Distributions
<ol>
            <li>
          <p>
            <em>10.2-gcc3.3 stable:</em>  This is the most recent stable version that can be installed from the stable source tree for OS 10.2 with the <code>gcc 3.3</code> update to the Developer Tools.  To be able to install this version, you may need to enable <link url="/doc/cvsaccess/index.php">CVS</link> or rsync access.  If you have not applied the <code>gcc 3.3</code> update you may not see this version (or possibly even the package).</p>
          <p>Note:  Unlike the case for some other projects, Fink distributes the most recent stable versions of packages via CVS, as well as versions in need of testing (see the section on unstable below).  Enabling CVS or rsync updating  gives you access to new stable versions of packages before the binary distribution is updated. 
</p>
        </li>
            <li><p><em>10.3 stable:</em>  This is the most recent version that can be installed from the stable source tree for OS 10.3.</p></li>
            <li><p><em>10.4-transitional stable:</em>  This is the most recent version that can be installed from the stable source tree for OS 10.4 users
who upgraded from 10.3.  PowerPC only.</p></li>
            <li><p><em>10.4/powerpc stable:</em>  This is the most recent version that can be installed from the stable source tree for OS 10.4 users
with new fink installations.  PowerPC only.</p></li>
            <li><p><em>10.4/intel stable:</em>  This is the most recent version that can be installed from the stable source tree for OS 10.4 users
on intel hardware.</p></li>
			<li>
          <p>
            <em>10.2-gcc3.3 unstable:</em>  This is the latest version that can be installed from the unstable source tree for OS 10.2 with <code>gcc 3.3</code>.  To install this version, follow the <link url="/faq/usage-fink.php#unstable">instructions</link> on how to install unstable packages.</p>
          <p>Note:  unstable doesn't necessarily mean unusable, but install such packages at your own risk.
</p>
        </li>
            <li><p><em>10.3 unstable:</em>  This is the latest version that can be installed from the unstable source tree for OS 10.3.</p></li>
            <li><p><em>10.4-transitional unstable:</em>  This is the latest version that can be installed from the unstable source tree for OS 10.4 users
who upgraded from 10.3.  PowerPC only.</p></li>
            <li><p><em>10.4/powerpc unstable:</em>  This is the most recent version that can be installed from the unstable source tree for OS 10.4 users
with new fink installations.  PowerPC only.</p></li>
            <li><p><em>10.4/intel unstable:</em>  This is the most recent version that can be installed from the unstable source tree for OS 10.4 users
on intel hardware.</p></li>
          </ol></li>
      </ul>
      <!-- end translation -->
    </section>
    <section name="x11" >
      <title>找到 X11</title>
      <p>许多 Fink 中的软件包都要求已经安装某种形式的 X11。因此，首先要做的第一件事情是选择一种 X11 实现。</p>
      <p>
由于在 Mac OS X 上有几种 X11 实现（Apple X11, XFree86, X.org），以及几种不同的方式去安装它们（手工或通过 Fink），所以存在有几种可选的软件包 - 每种设置方式一个。
这里是可用的软件包和　X11　安装方法：
</p>
      <ul>
      <!-- start translation -->
        <li>
          <p translated="no">
            <em>xfree86, xfree86-shlibs:</em>
Install both of these packages for XFree86 4.3.0 (OS 10.2 only), 4.4.0 (10.2 or 10.3), or 4.5.0 (10.3 or 10.4).  
</p>
        </li>
        <li><p translated="no"><em>xorg, xorg-shlibs</em>(10.3 or 10.4)  Install these packages to get the 6.8.2 release of the X.org X11 distribution.</p></li>
        <li>
          <p translated="no">
<em>system-xfree86 + -shlibs, -dev:</em>
These packages are automatically generated (for Fink 0.6.2 or later) if you install Apple's X11, or manually installed XFree86 or X.org.  
They will then act as
dependency placeholders.
</p>
        </li>
        <li>
          <p translated="no">
            <em>xfree86-base, xfree86-rootless [-threaded] + -shlibs, -dev</em>
(10.1 or 10.2 only) These packages install all of XFree86 4.2.1.1 (4.2.0 on 10.1).  The <code>-threaded</code> variant was provided for applications that required it, and this functionality is standard in later XFree86 versions.  The <code>-rootless</code> packages include the XDarwin display server--the name is historical.
</p><p>You must install all six packages to build X11-based packages from source.
</p>
        </li>
        <!-- OBSOLETE <li>
          <p>
system-xtools:
如果你安装了 Tenon 的 Xtools 产品，你需要安装这个软件包。
和 system-xfree86 一样，这只是执行一个可用性校验，并不修改实际的文件。
</p>
        </li>
-->
      <!-- start translation -->
      </ul>
      <p>
关于安装和运行 X11 的更多信息，请参考
<link url="/doc/x11/" >Darwin
及 Mac OS X 上 X11 的文档</link>.
</p>
    </section>
  </chapter>
  <chapter filename="upgrade" >
    <title>升级 Fink</title>
    <shorttitle>升级</shorttitle>
    <preface>
      <p>
本章介绍如何升级你的 Fink 安装到最新和最好的版本。
</p>
    </preface>
    <section name="bin" >
      <title>用二进制包进行升级</title>
      <p>
如果你只是使用二进制包进行安装，那么不需要什么特别的升级步骤。
简单地选择你喜欢的工具从服务器上获取最新的软件包，并安装需要的所有软件包就可以了。
</p>
      <p>
对于 dselect，只需要选择 &quot;[U]pdate&quot;，然后 &quot;[I]nstall&quot;　就足够了。
当然，你也许会希望在两个步骤中间运行 &quot;[S]elect&quot; 来查看做了什么选择以及新软件包的有关信息。
</p>
      <p>
对于 apt，运行 <code>apt-get update</code> 来获取最新的软件包清单，然后运行 <code>apt-get upgrade</code> 来更新全部有新版本的软件包。
</p>
<p>对于 Fink Commander，选择 Binary->Update descriptions 来更新软件包清单，然后选择 Binary->Dist-Upgrade packages 来升级到新的版本。</p>
      <p>
更多的信息，尤其是关于升级 Fink 0.3.0　之前版本，参见
<link url="/download/upgrade.php" >Upgrade Matrix</link>。
</p>
    </section>
    <section name="src" >
      <title>升级从源码安装版本</title>
      <p>
整个过程由两个步骤组成。
第一步，下载最新的软件包描述到你的计算机。
第二步，使用这些软件包描述来编译新的软件包，实际的源代码会根据需要下载。
</p>
      <p>
如果你使用 Fink 0.2.5 或更新版本，第一步可以运行 <code>fink selfupdate</code>。
这个命令会检查 Fink 网站看是否有一个新的版本发布，如果有的话，会自动下载和安装软件包描述文件。
在最新的 <code>fink</code> 版本的命令中，你可以选择直接从 CVS 或通过 rsync 来直接获取软件包描述。
CVS 是一个具有版本控制功能的储存库，它保存和管理软件包描述文件。
使用 CVS 的优点是它是不断更新的，缺点是对 Fink 只有一个 Git 服务器，如果访问量太大，它会变得不稳定。因此，对通常用户，我们推荐使用 rsync。对于 rsync，我们有多个镜像站点。唯一得缺点是新得版本在 Git 发布以后会大约需要一个小时后才会更新到 rsync 镜像站点上。
</p>
      <p>（如果你在升级从源码安装得版本中碰到问题，请查阅　
<link url="/download/fix-upgrade.php" >一些特殊指引</link>。）</p>
      <p>
如果你的 Fink 是 0.2.5　之前得版本，你需要手工下载软件包描述文件。
访问 <link url="http://sourceforge.net/project/showfiles.php?group_id=17203" >下载区</link>，在 &quot;distribution&quot;　模块中寻找最新的 packages-0.x.x.tar.gz 压缩档。
下载它，然后按下面的办法安装：
</p>
      <codeblock>tar -xzf packages-0.x.x.tar.gz
cd packages-0.x.x
./inject.pl</codeblock>
      <p>
更新了软件包描述以后（无论你采用什么办法），
你应该可以用　<code>fink　update-all</code>　命令一次更新所有软件包。
</p>
<p>如果使用 Fink Commander 更新源代码发布版本，选择 Source-&gt;Selfupdate 下载最新的软件包信息文件，然后选择 Source-&gt;Updata-all 来更新所有不是最新的软件包。</p>
    </section>
    <section name="mix" >
      <title>混合使用二进制和源文件安装的情况</title>
      <p>
如果你的某些软件包是使用预编译好的二进制安装包安装，而另外一些则使用源代码安装，你需要使用上面的两套步骤来更新你的 Fink 安装。
也就是说，首先使用 <code>dselect</code> 或 <code>apt-get</code> 来获取可用的二进制安装版本，然后使用 <code>fink selfupdate</code> 和 <code>fink update-all</code>　来过去最新的软件包描述，并更新剩下的软件包。
		</p>
	  <!-- start translation -->
      <p translated="no">
Starting with fink 0.23.0 using the UseBinaryDist option (settable via the
<xref chapter="usage" section="options">--use-binary-dist (or -b) option</xref>
or in the <xref chapter="conf">Fink configuration file</xref>) both source and
binary descriptions will be updated if you call <code>fink selfupdate</code>.
In this case you don't need a separate <code>apt-get</code> call anymore.
     </p>
      <p translated="no">
If you are using Fink Commander select Binary-&gt;Update descriptions to update
the package list, and then Binary-&gt;Dist-Upgrade packages to update to new
versions. After that do Source-&gt;Selfupdate to download new package
information files, and then Source-&gt;Update-all (see previous sections for
details).
      </p>
      <!-- end translation -->
    </section>
  </chapter>
  <chapter filename="conf" >
    <title>Fink 配置文件</title>
    <shorttitle>fink.conf</shorttitle>
    <preface>
      <p>
本章会解释 Fink 配置文件（fink.conf）中的设置项，以及他们会对 Fink 的工作产生什么作用，尤其是 <code>fink</code> 命令行工具（也就是说使用源代码发布版本）。
</p>
    </preface>
    <section name="about" >
      <title>关于 fink.conf</title>
      <p>
在 Fink 安装的时候，它会询问你几个问题以建立起你的配置文件，就好像选择你希望使用来下载文件的 <xref section="mirrors" >镜像网站</xref> 以及如何获得超级用户权限。你可以用<code>fink configure</code> 命令来重新进行这个过程。而有一些选项，则需要直接编辑 <em>fink.conf</em> 文件。通常来说，这些选项对于熟练用户才会有用。
</p>
      <p>
<em>fink.conf</em> 文件的位置在
<code>/sw/etc/fink.conf</code>，它可以用你喜欢的纯文本编辑器来编辑它。要编辑它，你需要超级用户的权限。
</p>
    </section>
    <section name="syntax" >
      <title>fink.conf 文件的语法</title>
      <p>
你的 fink.conf 文件由多行组成，格式是：</p>
      <codeblock>选项名: 选项值</codeblock>
      <p>每行一个选项，选项名和选项值之间以一个冒号和一个空格分开。选项值的内容取决每个不同的选项，但通常会是一个布尔值（&quot;True&quot; 或 &quot;False&quot;），一个字符串，或用空格分开的多个字符串。 
例如：
</p>
      <codeblock>
BooleanOption: True
StringOption: Something
ListOption: Option1 Option2 Option3
</codeblock>
    </section>
    <section name="required" >
      <title>必需的设置</title>
      <p>
<em>fink.conf</em> 文件里面的一些设置是不可缺的。如果缺少它们，Fink 就无法正常工作。下面的设置就属于这一类。
</p>
      <ul>
        <li>
          <p>
            <em>Basepath:</em> 路径</p>
          <p>
它告诉 Fink 它被安装在什么位置。默认的情况是 <em>/sw</em>，除非你在第一次安装的时候更改了它的位置。安装以后，你<em>决不能</em>再更改这个设置，否则会使 <em>fink</em> 陷入混乱中。
</p>
        </li>
      </ul>
    </section>
    <section name="optional" >
      <title>可选用户设置</title>
      <p>
有很多设置用户可以进行调整，来对 Fink 进行优化。
</p>
      <ul>
        <li>
          <p>
            <em>RootMethod:</em> su 或 sudo 或 none</p>
          <p>对一些操作，Fink 需要有超级用户权限。可供选择的选项包括 <em>sudo</em> 或 <em>su</em>。你也可以把它设为
<em>none</em>，这时，你需要自己转换到 root 权限后再运行 Fink。默认值是 <em>sudo</em>，多数情况下这不应该修改。</p>
        </li>
        <li>
          <p>
            <em>Trees:</em> 代码树列表</p>
          <p>可供选择的代码树包括：</p>
          <codeblock>
local/main      - 所有你希望安装的本地软件包
local/bootstrap - Fink　安装过程需要使用的软件包
stable/crypto   - 稳定的可靠（经过数字签名）软件包
stable/main     - 其它稳定软件包
unstable/crypto - 未稳定的可靠（经过数字签名）软件包
unstable/main   - 其它未稳定软件包
</codeblock>
          <p translated="no">
你可以根据需要在　<code>/sw/fink/dists</code>　目录中加入你自己的代码树，但通常来说不需要这样做。默认的代码树是 &quot;local/main local/bootstrap　stable/main&quot;。这个设置清单应该与 <code>/sw/etc/apt/sources.list</code> 文件内容保持一致。
<!-- start translation -->
(As of fink 0.21.0, <code>fink</code> does this for you automatically.)
<!-- end translation -->
</p>
<!-- start translation -->
<p translated="no">The order of the trees is meaningful, as packages from later trees in the list may
override packages from earlier ones.</p>
<!-- end translation -->
        </li>
        <li>
          <p>
            <em>Distribution:</em> 10.1、10.2、10.2-gcc3.3, 10.3 或 10.4</p>
          <p>Fink 需要知道你使用的 Mac OS X 版本是什么。10.0 或更早的版本不能够被支持，从这个版本的 Fink 开始，10.1 或 10.2 也不被支持。
          <!-- strat translation -->
          Mac OS X 10.2 users are restricted to fink-0.24.7, released in June 2005.
          <!-- end translation -->
          这个字段是通过运行 <code>/sw/lib/fink/postinstall.pl</code> 来设置的。你不应该手工改变这个设置值。
</p>
        </li>
        <li>
          <p>
            <em>FetchAltDir:</em> 路径</p>
          <p>通常来说 <code>fink</code> 会保存它下载的源代码到
<code>/sw/src</code>　目录中。你可以用这个选项来更换保存下载源程序的目录。例如：
</p>
          <codeblock>FetchAltDir: /usr/src</codeblock>
        </li>
        <li>
          <p>
            <em>Verbose:</em> 0 到 3　之间的数字</p>
          <p>
这个选项设置 Fink 应该在运行过程中告诉你详细到什么程度的信息。取值的含义是：
<em>0</em>
            <tt>Quiet</tt> (安静模式)（不显示下载状态）
<em>1</em>
            <tt>Low</tt> (低模式)（不显示正在展开的压缩档的信息）
<em>2</em>
            <tt>Medium</tt> (中模式)（几乎显示所有信息）
<em>3</em>
            <tt>High</tt> (高模式)（显示所有信息）
默认值是 1。
</p>
        </li>
        <!-- start translation -->
        <li><p><em>SkipPrompts:</em> a comma-delimited list</p><p translated="no">(<code>fink-0.25</code> and later) This option instructs <code>fink</code> to refrain from asking for input when
           the user does not want to be prompted. Each prompt belongs to a
           category. If a prompt's category is in the SkipPrompts list then
           the default option will be chosen within a very short period of
           time.</p><p translated="no">Currently, the following categories of prompts exist:</p><p translated="no"><em>fetch</em> - Downloads and mirrors</p><p translated="no"><em>virtualdep</em> - Choosing between alternative packages</p><p translated="no"> By default, no prompts are skipped.</p></li>
        <!-- end translation -->
        <li>
          <p>
            <em>NoAutoIndex:</em> 布尔值</p>
          <p>Fink 会缓存它的软件包描述文件在 /sw/var/db/fink.db 中，这会减少每次运行时读取和解析这些文件的时间。除非这个值被设成 &quot;True&quot;，否则 Fink 会每次都检查软件包的索引时候需要更新。默认情况下它被设成 &quot;False&quot;。我们不推荐你更改它。如果你真的改动了它，你需要手工运行　<code>fink index</code> 命令来更新索引。</p>
        </li>
        <li>
          <p>
            <em>SelfUpdateNoCVS:</em> 布尔值</p>
          <p><code>fink selfupdate</code>　命令会更新 Fink软件管理器到最新的版本。当这个选项设为 <tt>True</tt> 的时候，将保证不会使用协作式版本管理系统（CVS）来更新软件包。它由 <code>fink　selfupdate-cvs</code> 命令自动设置，所以你不需要手工改变它。</p>
        </li>
        <li>
        		<p><em>Buildpath:</em> 路径</p>
        		<!-- start translation -->
        		<p>Fink 在从源代码编译的时候，需要创建几个临时的目录。默认情况下，它们被放置在 <filename>/sw/src</filename> (on Panther and earlier) 下， <filename>/sw/src/fink.build</filename> (on Tiger) 下，不过，如果你想把它们放在其它地方的话，可以在这里指明路径。查阅本文档后面关于 <code>KeepRootDir</code> 和 <code>KeepBuildDir</code> 字段的描述获取关于这个临时目录的更多信息 (<xref section="developer">Developer Settings</xref>)。</p>
	    <p translated="no">On Tiger, it is recommended that the Buildpath end with <filename>.noindex</filename>
or <filename>.build</filename>. Otherwise, Spotlight will attempt to index the temporary files in
the Buildpath, slowing down builds.
    	</p>
                <!-- end translation -->
        </li>
<!-- start translation -->
        <li><p><em>Bzip2Path:</em> the path to your <filename>bzip2</filename> (or compatible) binary
          </p><p translated="no">(<code>fink-0.25</code> and later) The Bzip2Path option lets you override the default path for the
           <filename>bzip2</filename> command-line tool.  This allows you to specify an alternate
           location to your <filename>bzip2</filename> executable, pass optional command-line
           options, or use a drop-in replacement like <filename>pbzip2</filename> for decompressing
           <filename>.bz2</filename> archives.</p></li>
<!-- end translation -->
      </ul>
    </section>
    <section name="downloading" >
      <title>下载设置</title>
      <p>有几个设置会影响 Fink 下载软件包数据的方式。</p>
      <ul>
        <li>
          <p>
            <em>ProxyPassiveFTP:</em> 布尔值</p>
          <p>这个选项使得 Fink 使用 &quot;被动&quot; 模式来进行 FTP 下载。某些 FTP 服务器或网络配置会要求这个设置必须为 。建议永远保持这个选项为打开，因为主动模式的 FTP 已经过时了。</p>
        </li>
        <li>
          <p>
            <em>ProxyFTP:</em> url</p>
          <p>如果你使用 FTP 代理，那么你应该这里输入它的地址，例如：</p>
          <codeblock>ProxyFTP: ftp://yourhost.com:2121/</codeblock>
          <p>留空这一项，如果你不需要使用 FTP 代理。</p>
        </li>
        <li>
          <p>
            <em>ProxyHTTP:</em> url</p>
          <p>如果你使用 HTTP 代理，那么你应该在这里输入它的地址，例如：</p>
          <codeblock>ProxyHTTP: http://yourhost.com:3128/</codeblock>
          <p>留空这一项，如果你不需要使用 HTTP 代理。</p>
        </li>
        <li>
          <p>
            <em>DownloadMethod:</em> wget 或 curl 或 axel 或 axelautomirror</p>
          <p translated="no">Fink 可以使用三种不同的程序来从网上下载程序 —— <em>wget</em>，<em>curl</em> 或 <em>axel</em>。而 <em>axelautomirror</em> 会使用 <em>axel</em> 的一种实验中的模式，这种模式会自动检测包含你要下载的文件的离你最近的服务器。目前不推荐使用 <em>axelmirror</em>。默认值是 <em>curl</em>。
<em>你这里选择的程序必须已经安装在你的计算机上！</em>
          <!-- start translation -->
          (i.e. <code>fink</code>won't fall back to <em>curl</em> if you try to use a download application that isn't present.
          <!-- end translation -->
          </p>
        </li>
<!-- start translation -->
        <li>
          <p>
            <em>SelfUpdateMethod:</em> point, rsync or git</p>
          <p translated="no">
<code>fink</code> can use some different methods to update the package info files.
<em>rsync</em> is the recommended setting; it uses rsync to download only
modified files in the <xref section="optional">trees</xref> that you have enabled. Note that if you have
changed or added to files in the <code>stable</code> or <code>unstable</code> trees, using rsync will
delete them. Make a backup first, e.g. in your <code>local</code> tree. <em>git</em> will download using anonymous or
Github access from the Fink repository. This has the disadvantage that git
can not switch mirrors; if the server is unavailable you will not be able to
update. <em>point</em> will download only the latest released version of the
packages. It is not recommended as your packages may be quite out of date.
          </p>
        </li>
        <li><p><em>SelfUpdateCVSTrees:</em> list of trees
           </p><p translated="no">(<code>fink-0.25</code> and later) By default, the <em>cvs</em> selfupdate method will update only the current
           distribution's tree.  This option overrides the list of distribu-
           tion versions that will be updated during a selfupdate.

           Please note that you will need a recent "cvs" binary installed if
           you wish to include directories that do not have CVS/ directories
           in their entire path (e.g., dists/local/main or similar).</p></li>
        <li>
          <p>
            <em>UseBinaryDist:</em> boolean</p>
          <p translated="no">
Causes <code>fink</code> to try to download pre-compiled binary packages from the binary
distribution if available and if the binary package is not already on the
system. This can save a lot of installation time and it is therefore 
recommended to set this option. Passing fink the 
<xref chapter="usage">--use-binary-dist</xref> option (or the <code>-b</code> flag) has the same effect,  
but only operates on that single <code>fink</code> invocation.  Passing <code>fink</code> the
           <code>--no-use-binary-dist</code> flag overrides this, and compiles from source
           for that single <code>fink</code> invocation.
<em>Only available as of  fink version 0.23.0</em>.
          </p><p translated="no">Note that this mode instructs <code>fink</code> to download an available binary  
           if that version is the latest available version of the package; it does <em>not</em> cause <code>fink</code>
           to choose a version based on its binary availability.
</p>
        </li>
<!-- end translation -->
      </ul>
    </section>
    <section name="mirrors" >
      <title>镜像站点设置</title>
      <p>从网上获取软件可能会是一个冗长的过程。经常下载的速度不会象我们所希望的那样快。镜像服务器会从其它服务器中拷贝文件，但可能它会有一个更快的网络连接，或者它在地理上离你更近，这样从它上面下载会更快些。同时它们也可以分担主服务器的负担，其中一个例子是<em>ftp.gnu.org</em>，在一个访问不到的时候，它会提供另一个替代的服务器。</p>
      <p>为了让 Fink 能够使用最合适你的镜像服务器，你要告诉它你居住在哪个洲和哪个国家。如果不能从某个服务器下载，它会提示你是：重试相同的镜像站点，连接与你在相同国家或洲的另一个镜像服务器，还是世界上任意一个镜像服务器。</p>
      <p><em>fink.conf</em> 文件中保存着你希望使用哪些镜像服务器的信息。</p>
      <ul>
        <li>
          <p>
            <em>MirrorContinent:</em> 三个字母的代号</p>
          <p>你应该使用 <code>fink configure</code>
命令来更改这些取值。三个字母的代号可以在 <code>/sw/lib/fink/mirror/_keys</code> 文件中找到。
例如，如果你住在亚洲：</p>
          <codeblock>MirrorContinent: asi</codeblock>
        </li>
        <li>
          <p>
            <em>MirrorCountry:</em> 六个字母代号</p>
          <p>你应该使用 <code>fink configure</code>
命令来更改这些取值。六个字母由三个字母的洲代号（见上面的描述），一个减号，以及两个字母的国家代号组成。你可以在 <code>/sw/lib/fink/mirror/_keys</code> 文件中找到它们。
例如，如果你住在中国：</p>
          <codeblock>MirrorCountry: asi-CN</codeblock>
        </li>
        <li>
          <p>
            <em>MirrorOrder:</em> MasterFirst 或 MasterLast 或 MasterNever 或 ClosestFirst</p>
          <p>
Fink 支持 '主（master）镜像服务器'，它镜像保存了 Fink 中有的所有软件包的源程序压缩档。使用主镜像服务器的好处是下载源程序的链接不会失效。用户可以选择使用这些由 Fink 团队维护的镜像服务器，或使用那些原始的源程序站点和外部的镜像服务器：例如 gnome，KDE 和 　debian 的镜像网站。
另外，用户还可以选择结合两种设置，并按上文所说的办法以邻近的次序来进行搜索。如果使用 MasterFirst 或 MasterLast 选项，当某个服务器失效时，用户可以“跳转到”到主服务器（或非主服务器）组。选项包括：
</p>
          <codeblock>
MasterFirst - 优先搜索 &quot;主&quot; 镜像服务器。
MasterLast - 最后搜索 &quot;主&quot; 镜像服务器。
MasterNever - 不搜索 &quot;主&quot; 镜像服务器。
ClosestFirst - 优先搜索最近的镜像服务器（把所有镜像服务器合在一组）。
</codeblock>
        </li>
        <!-- start translation -->
        <li><p><em>Mirror-rsync:</em>
           </p><p translated="no">(<code>fink-0.25.2</code> and later) When doing <code>fink selfupdate</code> with the <em>SelfupdateMethod</em> set to <code>rsync</code>,
           this is the rsync url to sync from.  This should be an anonymous
           rsync url, pointing to a directory which contains all the fink Dis-
           trubutions and Trees.
</p></li>
		<!-- end translation -->
      </ul>
    </section>
    <section name="developer" >
      <title>开发人员设置</title>
      <p>在 <em>fink.conf</em> 中一些选项只是对开发人员有用。我们不推荐 Fink 用户修改它们。下面的一些选项属于这一类。</p>
      <ul>
        <li>
          <p>
            <em>KeepRootDir:</em> 布尔值</p>
          <p>使得 <code>fink</code> 不会在构建好一个软件包以后删除 <filename>root-[name]-[version]-[revision]</filename> 目录会在 <em>BuildPath</em>。默认值是 False。<em>注意，使用这个选项可以很快塞满你的硬盘！</em>
          传递 <em>-K</em> 标志给 <em>fink</em> 可以起到相同的效果，但只对单次的 <code>fink</code> 调用起作用。
          </p>
        </li>
        <li>
          <p>
            <em>KeepBuildDir:</em> boolean</p>
          <p>使得 Fink 不会在构建好一个软件包以后删除 <filename>[name]-[version]-[revision]</filename> 目录会在 <em>BuildPath</em>。默认值是 False。<em>注意，使用这个选项可以很快塞满你的硬盘！</em>
          传递 <em>-K</em> 标志给 <code>fink</code> 可以起到相同的效果，但只对单次的 <code>fink</code> 调用起作用。
          </p>
        </li>
      </ul>
    </section>
    <!-- start translation -->
    <section name="advanced" translated="no">
      <title>Advanced Settings</title>
      <p>There are some other options which may be useful, but require some knowledge to get right.</p>
      <ul>
        <li>
          <p>
            <em>MatchPackageRegEx:</em> </p>
          <p>Causes fink not to ask which package to install if one (and only one) of the choices matches the perl Regular Expression given here. Example:</p>
          <codeblock>MatchPackageRegEx: (.*-ssl$|^xfree86$|^xfree86-shlibs$)</codeblock>
          <p>will match packages ending in '-ssl', and will match 'xfree86' and 'xfree86-shlibs' exactly.</p>
        </li>
        <li>
          <p>
            <em>CCacheDir:</em> path</p>
          <p>If the Fink package <code>ccache-default</code> is installed, the cache files it makes
while building Fink packages will be placed here. Defaults to <filename>/sw/var/ccache</filename>. If set to <code>none</code>, fink will not set the CCACHE_DIR environment variable and ccache will use <filename>$HOME/.ccache</filename>, potentially putting root-owned files into your home directory.
<em>Only available in fink newer than version 0.21.0</em>.
          </p>
        </li>
        <li><p><em>NotifyPlugin:</em> plugin</p><p>
           Specify a notification plugin to tell you when packages have been
           installed/uninstalled.  Defaults to Growl (requires <code>Mac::Growl</code> to
           operate).  Other plugins can be found in the
           <filename>/sw/lib/perl5/Fink/Notify</filename> directory.
</p></li>
        <!-- start translation -->
        <li><p><em>AutoScanpackages:</em> boolean
           </p><p translated="no">When <code>fink</code> builds new packages, <code>apt-get</code> does not immediately know about
           them.  Historically, the command <code>fink scanpackages</code> had to be run
           for <code>apt-get</code> to notice the new packages, but now this happens auto
           matically. If this option is present and <em>false</em>, then <code>fink
           scanpackages</code> will no longer be run automatically after packages are
           built.  Defaults to <em>true</em>.
</p></li>
        <li><p><em>ScanRestrictivePackages:</em> boolean
           </p><p translated="no">When scanning the packages for <code>apt-get</code>, <code>fink</code> normally scans all
           packages in the current trees. However, if the resuting apt repository will be made publically available, the administrator may be
           legally obligated not to include packages with <code>Restrictive</code> or
           <code>Commercial</code> licenses. If this option is present and <em>false</em>, then Fink
           will omit those packages when scanning.</p></li>
		<!-- end translation -->
      </ul>
    </section>
    <!-- end translation -->
    <!-- start translation -->
    <section name="sourceslist" translated="no">
      <title>Managing apt's sources.list file</title>
      <p>Starting with fink 0.21.0, fink actively manages the file
<code>/sw/etc/apt/sources.list</code> which is used by apt to locate
binary files for installation.  The default sources.list file looks 
something like this, adjusted to match your Distribution and Trees:
</p>
      <codeblock># Local modifications should either go above this line, or at the end.
#
# Default APT sources configuration for Fink, written by the fink program

# Local package trees - packages built from source locally
# NOTE: this is automatically kept in sync with the Trees: line in 
# /sw/etc/fink.conf
# NOTE: run 'fink scanpackages' to update the corresponding Packages.gz files
deb file:/sw/fink local main
deb file:/sw/fink stable main crypto

# Official binary distribution: download location for packages
# from the latest release
deb http://us.dl.sourceforge.net/fink/direct_download 10.3/release main crypto

# Official binary distribution: download location for updated
# packages built between releases
deb http://us.dl.sourceforge.net/fink/direct_download 10.3/current main crypto

# Put local modifications to this file below this line, or at the top.
</codeblock>
      <p>With this default file, apt-get first looks in your local installation
for already-compiled binaries, and then looks in the official binary
distribution.  You can alter this by making entries at the beginning of
the file (which will be searched first) or at the end of the file (which
will be searched last).</p>
      <p>If you change your Trees line or the Distribution you are using,
fink will automatically modify the "default" portion of the file to
correspond to the new values.  Fink will, however, preserve any local
modifications you have made to the file, provided that you confine your
modifications to the top of the file (above the first default line) and
the bottom of the file (below the last default line).
</p>
      <p>
Note: If you had modified <code>/sw/etc/apt/sources.list</code> prior to upgrading
to fink 0.21.0, you will find your former file stored at <code>/sw/etc/apt/sources.list.finkbak</code> .
</p>
    </section>
    <!-- end translation -->
  </chapter>
  <chapter filename="usage" >
    <title>在命令行使用 Fink 工具</title>
    <shorttitle>fink 工具</shorttitle>
    <section name="using" >
      <title>使用 Fink 工具</title>
      <p><code>fink</code> 工具使用几个后缀命令来处理源程序发行包。其中的一些需要至少有一个软件包名称，但同时可以处理多个软件包。你可以简单地应用软件包的名称（例如，　gimp），或包括版本号的全名（例如 gimp-1.2.1) 或包含版本号和修订版号的名称 (例如 gimp-1.2.1-3）。在没有指明版本的情况下，Fink 会自动选择最新的版本。其它还具有不同的选项。</p>
      <p>下面是 <code>fink</code> 工具的命令清单：</p>
    </section>
    <!-- start translation -->
    <section name="options" translated="no">
      <title>Global options</title>
      <p>
There are some options, which apply to all fink commands. If you 
type <code>fink --help</code> you get the list of options: 
      </p>
      <p>(as of <code>fink-0.26.0</code>)</p>
      <p><em>-h, --help</em> - displays help text.
</p>
      <p><em>-q, --quiet</em>  - causes <code>fink</code> to be less verbose, opposite of <em>--verbose</em>.  Overrides the <xref chapter="conf" section="optional">Verbose</xref> flag in <filename>fink.conf</filename>.
</p>
      <p><em>-V, --version</em> - display version information.
</p>
      <p><em>-v, --verbose</em> - causes  <code>fink</code> to be more verbose, opposite of <em>--quiet</em>.  Overrides the <xref chapter="conf" section="optional">Verbose</xref> field in <filename>fink.conf.</filename>
</p>
      <p><em>-y, --yes</em> - assume default answer for all interactive 
                        questions.
</p>
      <p><em>-K, --keep-root-dir</em>   - Causes <code>fink</code> not to delete the
                        <filename>root-[name]-[version]-[revision]</filename>
		        directory in the <xref chapter="conf" section="optional">Buildpath</xref> after building a package.  Corresponds to the <xref chapter="conf" section="developer">KeepRootDir</xref> field in <filename>fink.conf</filename>.
</p>
      <p><em>-k, --keep-build-dir</em>  - Causes <code>fink</code> not to delete the
                        <filename>[name]-[version]-[revision]</filename>
                        directory in the <xref chapter="conf" section="optional">Buildpath</xref> after building a package.  Corresponds to the <xref chapter="conf" section="developer">KeepBuildDir</xref> field in <filename>fink.conf</filename>.</p>
      <p><em>-b, --use-binary-dist</em> - download pre-compiled packages from the binary 
                        distribution if available (e.g. to reduce compile
		        time or disk usage).
		        Note that this mode instructs fink to download the
                        version it wants if that version is available for
		        download; it does not cause fink to choose a version
    		        based on its binary availability.  Corresponds to the <xref chapter="conf" section="downloading">UseBinaryDist</xref> flag in <filename>fink.conf</filename>.
</p>
      <p><em>--no-use-binary-dist</em>  - Don't use pre-compiled binary packages from the binary 
		        distribution, opposite of the --use-binary-dist flag. 
                        This is the default unless overridden by setting <code>UseBinaryDist: true </code>in 
                        the <filename>fink.conf</filename> configuration file. 
</p>
      <p><em>--build-as-nobody</em>     - Drop to a non-root user when performing the unpack,
                        patch, compile, and install phases. Note that packages
                        built with this option may be non-functional. You
                        should use this mode for package development and 
                        debugging only.
</p>
      <p><em>-m, --maintainer</em>
            - (<code>fink-0.25</code> and later) Perform actions useful to package maintainers: run validation on
           the <filename>.info</filename> file before building and on the <filename>.deb</filename> after building a
           package; turn certain build-time warnings into fatal errors; (<code>fink-0.26</code> and later) run the test suites as specified in the  field.  This sets <em>--tests</em> and <em>--validate</em> to <code>on</code>.</p>
      <p><em>--tests[=on|off|warn]</em>         - (<code>fink-0.26.0</code> and later) Causes <code>InfoTest</code> fields to be activated and test suites specified
           via <code>TestScript</code> to be executed (see the <varlink url="../packaging/reference.php#fields" varurl="../packaging/packaging.en.html#reference.fields">Fink Packaging Manual</varlink>).  If no argument is given to this
           option or if the argument is <code>on</code> then failures in test suites will
           be considered fatal errors during builds.  If the argument is <code>warn</code>
           then failures will be treated as warnings.</p>
      <p><em>--validate[=on|off|warn]</em> -
           Causes packages to be validated during a build.  If no argument is
           given to this option or if the argument is <code>on</code> then validation failures will be considered fatal errors during builds.  If the argument is <code>warn</code> then failures will be treated as warnings.</p>
      <p><em>-l, --log-output</em>
            - Save a copy of the terminal output during each package building
           process. By default, the file is stored in
           <filename>/tmp/fink-build-log_[name]-[version]-[revision]_[date]-[time]</filename> but
           one can use the <em>--logfile</em> flag to specify an alternate filename.</p>
      <p><em>--no-log-output</em>
            - Don't save a copy of the output during package-building, opposite
           of the <em>--log-output</em> flag. This is the default.</p>
      <p><em>--logfile=filename</em>
            - Save package build logs to the file <filename>filename</filename> instead of the default
           file (see the <em>--log-output</em> flag, which is implicitly set by the
           <em>--logfile</em> flag). You can use percent-expansion codes to include
           specific package information automatically. A complete list of percent-expanions is available in the <varlink url="../packaging" varurl="../packaging/packaging.en.html">Fink Packaging Manual</varlink>; some common percent-expansions are:</p>
      <ul>
        <li>                 <em>%n</em>    - package name
                 </li>
        <li><em>%v</em>    - package version
                 </li>
        <li><em>%r</em>    - package revision</li>
      </ul>
      <p><em>-t, --trees=expr</em>
           - Consider only packages in trees matching <em>expr</em>.

           The format of expr is a comma-delimited list of tree specifica-
           tions. Trees listed in <filename>fink.conf</filename> are compared against <em>expr</em>.  Only
           those which match at least one tree specification are considered by
           <code>fink</code>, in the order of the first specifications which they match. If
           no <em>--trees</em> option is used, all trees listed in <filename>fink.conf</filename> are
           included in order.

           A tree specification may contain a slash (/) character, in which
           case it requires an exact match with a tree. Otherwise, it matches
           against the first path-element of a tree. For example,
           <em>--trees=unstable/main</em> would match only the <em>unstable/main</em> tree,
           while <em>--trees=unstable</em> would match both unstable/main and
           <em>unstable/crypto</em>.

           There exist magic tree specifications which can be included in
           <em>expr</em>:</p>
      <ul>
        <li><em>status</em>
                       - Includes packages in the dpkg status database.

                 </li>
        <li><em>virtual</em>
                       - Includes virtual packages which reflect the capabili-
                       ties of the system.
</li>
      </ul>
      <p>Exclusion of (or failure to include) these magic trees is currently
           only supported for operations which do not install or remove packages.</p>
      <p><em>-T, --exclude-trees=expr</em>
           Consider only packages in trees not matching expr.

           The syntax of expr is the same as for <em>--trees</em>, including the magic
           tree specifications. However, matching trees are here excluded
           rather than included. Note that trees matching both <em>--trees</em> and
           <em>--exclude-trees</em> are excluded.
</p>
      <p> Examples of <em>--trees</em> and --exclude-trees:

                 </p>
      <ul>
        <li><code>fink --trees=stable,virtual,status install <em>foo</em></code> 
                       <p>Install <em>foo</em> as if <code>fink</code> was using the stable tree, even
                       if unstable is enabled in <filename>fink.conf</filename>.
</p></li>
        <li><code>fink --exclude-trees=local install <em>foo</em></code> 
                       <p>Install the version of <em>foo</em> in Fink, not the locally
                       modified version.

</p></li>
        <li><code>fink --trees=local/main list -i</code>
                       <p>List the locally modified packages which are installed.</p></li>
      </ul>
      <p>
Most of these options are self-explanatory (see <xref chapter="conf" section="optional">here </xref> for the definition of Buildpath). They can also be set in the 
<xref chapter="conf">Fink configuration file</xref> (fink.conf) if you want 
to set them permanently and not just for that invocation of <code>fink</code>.</p>
    </section>
    <!-- end translation -->
    <section name="install" >
      <title>install</title>
      <p><em>install</em> 命令用于安装软件包。它下载，配置，构建和安装你指名的软件包。它还会自动安装需要的依赖关系，但在此之前会要求你确认。例如：</p>
      <codeblock>fink install nedit

Reading package info...
Information about 131 packages read.
The following additional package will be installed:
 lesstif
Do you want to continue? [Y/n]</codeblock>
      <!-- start translation -->
      <p translated="no">Use of the <xref section="options">--use-binary-dist</xref> option with <code>fink install</code> can speed the build process for complicated packages by quite a lot.</p>
      <!-- end translation -->
      <p>install 命令的别名包括： <em>update, enable, activate, use</em> （这些别名多数是因为历史原因形成的）。</p>
    </section>
    <!-- start translation -->
    <section name="remove" translated="no">
      <title>remove</title>
      <p>The remove command removes packages from the system by calling '<code>dpkg --remove</code>'. The current default implementation has a flaw: it
doesn't check dependencies itself but rather completely leaves that to
the dpkg tool (usually this poses no problem, though).</p>
      <p>The <em>remove</em> command only removes the actual package files,
(excluding configuration files), but leaves
the <filename>.deb</filename> compressed package file intact. This means that you can
re-install the package later without going through the compile process
again. If you need the disk space, you can remove the <filename>.deb</filename> from the
<filename>/sw/fink/dists</filename> tree.</p>
      <p>These flags can be used with the <em>fink remove</em> command
</p>
      <codeblock>-h,--help             - Show the options which are available.
-r,--recursive        - Also remove packages that depend on the package(s) to
                        be removed (i.e. overcome the above-mentioned flaw).</codeblock>
      <p>Aliases: <em>disable, deactivate, unuse, delete</em>.</p>
    </section>
    <section name="purge" translated="no">
      <title>purge</title>
      <p>The <em>purge</em> command purges packages from the system. This is
the same as the <em>remove</em> command except that it removes configuration
files as well.</p>
      <p>This command takes the:</p>
      <codeblock>-h,--help
-r,--recursive</codeblock>
      <p>options.</p>
    </section>
    <!-- end translation -->
    <section name="update-all" >
      <title>update-all</title>
      <p>这个命令会更新所有已经安装的软件包到最新的版本。它不需要输入要更新的软件包清单，你只需要输入：</p>
      <codeblock>fink update-all</codeblock>
      <!-- start translation -->
      <p translated="no"><xref section="options">--use-binary-dist</xref> is also useful with this command.</p>
      <!-- end translation -->
    </section>
    <section name="list" >
      <title>list</title>
      <p>
这个命令产生一个可用的软件包，它的安装情况，最新版本和简单的描述。
如果你不使用其它参数的话，它会列出所有可用软件包。
你可以附上一个名称或 shell 模式，fink 会列出所有匹配的软件包。
</p>
      <p>
第一列显示的安装状态的意义为：
</p><!-- start translation -->
      <codeblock>    未安装
 i   已安装最新版本
(i)  已安装，但不是最新版本
 p   a virtual package provided by a package that is installed</codeblock>
<!-- end translation -->
      <p> The version column always lists the latest (highest) version known for the package, regardless of what version (if any) you have installed.  To see all versions of a package available on your sys-
           tem, use the <xref section="dumpinfo">dumpinfo</xref> command.</p>
      <p>
<code>fink list</code> 命令可以使用下面这些标志：
</p>
      <codeblock>
-h,--help
	  显示可用的选项。
-t,--tab
	  按制表位输出清单，这对需要在脚本中使用输出很有用。
-i,--installed
	  只显示已安装的软件包。
-o,--outdated
	  只显示已过期的软件包。
-u,--uptodate
	  只显示没有过期的软件包。
-n,--notinstalled
	  只显示没有安装的软件包。
-s expr,--section=expr
	  只显示满足正则表达式的软件包。
-m expr,--maintainer=expr
          Show only packages with the maintainer  matching the
          regular expression expr.
-r expr,--tree=expr
          Show only packages in the trees matching the regular
          expression expr.
-w=xyz,--width=xyz
	  设定你希望输出格式化为的宽度。xyz 可以为一个数字或者 auto。
	  auto 会根据终端的宽度来设置输出宽度。
	  默认值是 auto。
</codeblock>
      <p>
一些有用的例子：
</p>
      <codeblock>
fink list                 - 列出所有的软件包
fink list bash            - 检查 bash 是否可用，以及它的版本
fink list --outdated      - 列出过期的软件包
fink list --section=kde   - 列出属于 kde 部分的软件包
fink list &quot;gnome*&quot;        - 列出所有以 'gnome' 开头的软件包
</codeblock>
      <p>
在最后一个例子中，引号是必须的。因为这样才可以避免 shell 自己来匹配这个模式。
</p>
    </section>
    <section name="apropos" >
      <title>apropos</title>
      <p>
这个命令的作用几乎和 <xref section="list">fink list</xref> 一样。最主要区别是 <code>fink apropos</code> 还会搜索软件包描述来寻找软件包。第二个区别是必需提供一个搜索字符串，而不是可选的。
</p>
      <codeblock>
fink apropos irc          - 寻找在名称或描述中包含 'irc' 的软件包
fink apropos -s=kde irc   - 同上，但只在 kde 部分寻找
</codeblock>
    </section>
    <section name="describe" >
      <title>describe</title>
      <p>
你在这个命令中给出软件包的名称，命令会输出它的描述。
注意，目前只有一小部分软件包有描述信息。
</p>
      <p>
别名： <em>desc, description, info</em>
</p>
    </section>
	<!-- start translation -->
    <section name="plugins" translated="no">
      <title>plugins</title>
      <p> List the (optional) plugins available to the <code>fink</code> program.  Currently lists the notification mechanisms and the source-tarball
           checksum algorithms.</p>
    </section>
	<!-- end translation -->
    <section name="fetch" >
      <title>fetch</title>
      <p>下载指定的软件包，但不安装它。这个命令下载压缩档，即使以前已经下载过。</p>
      <!-- start translation -->
      <p translated="no">The following flags can be used with the <xref section="fetch">fetch</xref> command:</p>
      <codeblock>-h,--help		Show the options which are available.
-i,--ignore-restrictive	Do not fetch packages that are &amp;quot;License: Restrictive&amp;quot;.
                      	Useful for mirrors, because some restrictive packages
                      	do not allow source mirroring.
-d,--dry-run		Just display information about the file(s) that would
			be downloaded for the package(s) to be fetched; do not
			actually download anything.
-r,--recursive		Also fetch packages that are dependencies of the
			package(s) to be fetched.</codeblock>
	   <!-- end translation -->
    </section>
    <section name="fetch-all" >
      <title>fetch-all</title>
      <p>下载 <em>所有</em> 软件包源程序文件。和 <code>fetch</code>　一样，它会下载即使已经下载过的压缩档。</p>
      <!-- start translation -->
      <p translated="no">These flags can be used with the <code>fink fetch-all</code> command:</p>
      <codeblock>-h,--help
-i,--ignore-restrictive
-d,--dry-run</codeblock>
      <!-- end translation -->
    </section>
    <section name="fetch-missing" >
      <title>fetch-missing</title>
      <p>下载 <em>所有</em> 缺失的软件包源程序文件。这个命令只下载系统中没有的文件。</p>
      <!-- start translation -->
      <p>These flags can be used with the <code>fink fetch-missing</code> command:</p>
      <codeblock>-h,--help
-i,--ignore-restrictive
-d,--dry-run</codeblock>
      <!-- start translation -->
    </section>
    <section name="build" >
      <title>build</title>
      <p>构建一个软件包，并不安装它。通常，缺少的源压缩档会自动被下载。这个命令的结果是产生一个可用于安装的 .deb 软件包文件，以后你可以使用 install 命令迅速地安装它。如果 .deb 文件已经存在，这个命令会什么都不干。注意，依赖关系会被<em>安装</em>，而不仅仅是构建。</p>
    </section>
    <section name="rebuild" >
      <title>rebuild</title>
      <p>构建一个软件包（和 build 命令类似），但忽略和覆盖现存的 .deb 文件。如果这个软件包已经安装，新创建的 .deb 文件也会通过 <code>dpkg</code> 安装到系统。对软件包开发过程很有用。</p>
      <!-- start translation -->
      <p translated="no">The <xref section="options">--use-binary-dist option</xref> is applicable here.</p>
      <!-- end translation -->
    </section>
    <section name="reinstall" >
      <title>reinstall</title>
      <p>和 install 相同，但会使用 <code>dpkg</code> 安装，即使它已经被安装。你可以用这个命令安装被意外删除的软件包文件或者改变了设置文件以后希望恢复回默认的设置。</p>
    </section>
    <section name="configure" >
      <title>configure</title>
      <p>
重新运行 <code>fink</code> 的配置过程。
你可以改变镜像站点和代理服务器设置等。
</p>
	  <!-- start translation -->
      <p translated="no"><em>New in</em> <code>fink-0.26.0</code>: This command will also let you turn on the unstable trees if desired.</p>
      <!-- end translation -->
    </section>
    <section name="selfupdate" >
      <title>selfupdate</title>
      <!-- start translation -->
      <p>
	这个命令会自动更新到一个新的 Fink 版本。它检查 Fink 网站确定是否有新的版本。然后下载软件包描述并升级核心软件包，包括 <code>fink</code> 本身。这个命令可以升级标准的发布版本，但也可以设置你的 <filename>/sw/fink/dists</filename> 目录树来使用直接 git 或 rsync 进行升级, if you select one of those options the first time this command is run。这意味着你可以访问所有软件包的最新修订版。
</p>
      <!-- end translation -->
      <!-- start translation -->
      <p translated="no">If the <xref section="options">--use-binary-dist option</xref> is enabled, the list of available packages in the binary distribution is also updated.
      </p>
      <!-- end translation -->
    </section>
<!-- start translation -->
    <section name="selfupdate-rsync" translated="no">
      <title>selfupdate-rsync</title>
      <p>Use this command to make <code>fink selfupdate</code> use rsync to update its package list.</p>
      <p>This is the recommended way to update Fink when building from source.</p>
      <p><em>Note:</em>  rsync updates only update the active <xref chapter="conf" section="optional">trees</xref> (e.g. if unstable isn't turned on in <code>fink.conf</code> the list of unstable packages won't be updated.</p>
    </section>
    <section name="selfupdate-git" translated="no">
      <title>selfupdate-git</title>
      <p>Use this command to make <code>fink selfupdate</code> use Git access to update its package list.</p>
      <p>Rsync updating is preferred, except for developers and those people who are behind firewalls that disallow rsync.</p>
    </section>
<!-- end translation -->
    <section name="index" translated="no">
      <title>index</title>
      <p>
   重建软件包缓存。通常你不应该手工运行这个命令，因为 <code>fink</code> 应该能够自动检测到什么时候需要更新。
</p>
    </section>
    <section name="validate" translated="no">
      <title>validate</title>
      <p>
   这个命令会对 <filename>.info</filename> 和 <filename>.deb</filename> 文件进行一些检查。软件包维护人员在提交他们负责的软件包之前，应该运行这个命令来对它的描述和相应的构建好的软件包进行检查。
</p>
      <!-- start translation -->
      <p>The following optional options may be used:</p>
      <codeblock>-h,--help            - Show the options which are available.
-p,--prefix          - Simulate an alternate Fink basepath prefix (%p) within
                      the files being validated.
--pedantic, --no-pedantic
                     - Control the display of nitpicky formatting warnings.
                      --pedantic is the default.</codeblock>
      <!-- start translation -->
      <p>
   别名： <em>check</em>
</p>
    </section>
    <section name="scanpackages" translated="no">
      <title>scanpackages</title>
      <!-- start translation -->
      <p>Updates the <code>apt-get</code> database of debs; defaults to updating all of the trees, but may be restricted to a set of one or more trees given as arguments.</p>
      <!-- end translation -->
    </section>
    <section name="cleanup" translated="no">
      <title>cleanup</title>
      <!-- start translation -->
      <p>
   Removes obsolete and temporary files. 
   This can reclaim large amounts of disk space.  One or more modes may be specified:</p>
      <codeblock>--debs               - Delete .deb files (compiled binary package archives)
                       corresponding to versions of packages that are neither
                       described by a package description (.info) file in the
                       currently-active trees nor presently installed.
--sources,--srcs     - Delete sources (tarballs, etc.) that are not used by
                       any package description (.info) file in the currently-
                       active trees.
--buildlocks, --bl   - Delete stale buildlock packages.
--dpkg-status        - Remove entries for packages that are not installed from
                       the dpkg "status" database.
--obsolete-packages  - Attempt to uninstall all installed packges that are
                       obsolete. (new in fink-0.26.0)
--all                - All of the above modes. (new in fink-0.26.0)</codeblock>
      <p>If no mode is specified, <code>--debs --sources</code> is the default action. </p>
      <p>In addition, the following options may be used:</p>
      <codeblock>-k,--keep-src        - Move old source files to /sw/src/old/ instead of deleting them.
-d,--dry-run         - Print the names of the files that would be deleted, but
                       do not actually delete them.
-h,--help            - Show the modes and options which are available.</codeblock>
    <!-- end translation -->
    </section>
    <section name="dumpinfo">
      <title>dumpinfo</title>
      <!-- start translation -->
      <p translated="no">Only available in <code>fink</code> newer than version 0.21.0</p>
      <!-- end translation -->
      <p>
	显示 <code>fink</code> 如何解析软件包的 <filename>.info</filename> 文件的各个部分。各个字段和百分号展开会按照下面<em>选项</em>的设置来显示：
      </p>
      <codeblock>
-h, --help           - 显示可用的选项。
-a, --all            - 显示软件包描述文件的全部字段。
                       这时没有指定 --field 或 --percent 标志时的默认方式。
-f 字段名,            - 按列出的顺序显示给定的字段名
  --field=字段名
-p 关键字,            - 按列出顺序显示指定的关键字的百分号扩展
   --percent=关键字
      </codeblock>
    </section>
    <!-- start translation -->
    <section name="show-deps" translated="no">
      <title>show-deps</title>
      <p>Only available in fink-0.23-6 and later.</p>
<p>Displays a human-readable list of the compile-time (build) and run-
           time (installation) dependencies of the listed package(s).</p>
    </section>
    <!-- end translation -->
  </chapter>
</document>
